function varargout = SignalBrowser(varargin)
% HELP
% SignalBrowser launches a Graphical User Interface to load, process and
% analyze psychophyiological data including ECG, Skin Conductance and
% Respiration biosignal.
% 
% SignalBrowser loads raw ECG data and detect R peaks of the
% QRS complex to obtain the interbeat intervals (IBI) time series. After
% using the automatic R peaks detection function, the R peaks can be
% manually edited, and noisy data segments excluded.
% The IBI time series can then be analyzed by computing various heart rate 
% variability time and frequency metrics.
% This program has also the ability to load and analyze respiration and skin
% conductance data. Alternatively respiration rate can be extracted from
% amplitude modulation of the ECG (when recorded from chest leads).
% It is also able to compute and display the time-frequency analysis of the
% HRV power spectrum and the low, high and low to high ratio of the HRV
% power spectrum as a reflection of the parasympathetic/sympathetic nervous
% system activity.
% Various parameters for analyzing and extracting metrics can be set and
% are stored in the parameters.m file
% Please refer to the user manual for more details.
%
%
% SignalBrowser - Release Version 4.6 
% Copyright (c) 2022, Didier Allexandre
% All rights reserved.



%%%%%%%%%%%%%%% License Information %%%%%%%%%%%%%%%%%
% SignalBrowser  
% Copyright (c) 2022, Didier Allexandre
% All rights reserved.
% 
% Permission is hereby granted, free of charge, to use, copy, and/or 
% modify this software and associated documentation files (the "Software"),
%  for personal, non-commercial use, subject to the following conditions:
% 
% The above copyright notice and this permission notice shall be included 
% in all copies or substantial portions of the Software. 
% 
% 
% THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
% IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
% FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL 
% THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
% LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, 
% OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

if isempty(varargin)
    fprintf('---------------------------------------------- \n')
    fprintf('---------------------------------------------- \n')
    fprintf('--                                          -- \n')
    fprintf('--             Signal Browser               -- \n')
    fprintf('--           Didier Allexandre              -- \n')
    fprintf('--                                          -- \n')
    fprintf('--               Release 4.6                -- \n')
    fprintf('--                4/26/2022                 -- \n')
    fprintf('--                                          -- \n')
    fprintf('---------------------------------------------- \n')
    fprintf('---------------------------------------------- \n')
end

% Release History
% Release 1.3: 
%       1. New look
%       2. Added <Save> button
% Release 1.4:
%       1. Added the Frequency Edit Feature
% Release 1.5 
%       1. Expand to calculate EDR & Pwelch of EDR
% Release 2.0 
%       1. Included Spectrogram
%       2. Sample Editing
% Release 2.1
%       1. Switch between Spectrogram and ...
% Release 2.2 
%       1. Fixing Issues with Loading Parameters
%       2. Fixing issues with FFT_axes not cleared when loading new data
% Release 2.3 
%       1. Merging 2 parallel revisions
%       2. Fixing bugs with switching between View_allsignal and View_SignalEditing 
% Release 2.4 
%       1. Fixed issues with Skin Conductance discontinuity and scaling.
%       (Still need to adjust scaling as raw signals is not exactly between -5 & 5v)
%       2. Fixed some compatibility issues with Matlab 7.2
%       3. Resolved issues when loading any Parameters file:
%               a. Parameters would be overwritten by the default 
%               values found in "Parameters.m" file when loading a new data file
%               b. Analyzed Sample Time periods will be automatically
%               deleted and overwritten by default values
% Release 3.0 
%       1. Add the possibility of loading processed data (resp, SCL, RR)
%       without having to load raw text file data
%
% Release 3.1 8/10/2009
%       1. Add the capability to deal with NaN (missing data)
%
% Release 3.2 11/12/2009
%       1. Modified LoadData & GetContentOfFiles function to load data
%       generated by ANX HRV system 
%       2. Corrected errors regarding Welch methods:
%               - When Nwindow<Vector length<2xNwindow+Noverlap, discarded
%               part of signals in the analysis. For Nwindow = 512 and
%               Vector Length = 3x60x4 = 720 the last 208 points were not
%               used in the PSD
%               - Corrected discrepancies between welch 1, 2 and 3. Welch 1
%               and 3 multiplied the power by two for real signals
%               following one-sided convention. Forced it to use two-sided
%               method
%
% Release 3.3 11/23/2009
%       1. Fixed issues with file naming in GetContentOfFiles, Save and Load
%       functions introduced in revision 3.2
%       2. Implemented the possibility to read and load multiple files at
%       the same time and perform automatic export of results
%       3. Compute Skin Conductance response (SCR)
%       4. Modified export function such that parameters file is saved 
%       each time under the specific export file name
%
% Release 4.0 1/18/2010
%       1. Fixed issues with mouse click point and drag to zoom on axes1.
%       Associated with function figure1_WindowButtonDownFcn

% Release 4.1 2/28/2010
%       1. Replaced boxmsg with GUI textbox
%       2. Replaced Figure(gcf) with figure(SignalBrowser)
%
% Release 4.2 4/22/2010
%       1. Add a function to automatically detect and reject of abnormal R
%       peaks
%       2. Enhanced EDR detection
%       3. Added "PlotFinal" PushButton to allow or not plotting of final
%       signals (which exclude parts of the signals edited out with 
%       SignalEditing)
%
% Release 4.3 6/30/2010
%       1. Made major corrections to figure1_WindowButtonDownFcn to correct
%        and fixed associated bugs and crashes
%       2. Fixed issues with Load Parameters from Toolbar which was
%       launching the function Paramters_Fcn twice
% Release 4.5 3/24/2022
%       1. Added the ability to load ECG data using the Physionet WFDB
%       format
%       2. Fixed a few bugs due to changes to Matlab version (note that the
%       toolbox is still a little buggy as not all necessary changes have
%       been made)
% Release 4.6 4/26/2022
%       1. Made changes to simplify/fix FreqSpectrum power spectrum density
%           computation options
%       2. Fixed ANS/Power Spectrum object handle visibility when toggling
%	   	   between RR editing and All Signals view
%       3. Fixed issues with timeshift of ANS/Power Spectrum in the presence of 
%          noisy Signal data segments 
%



% fprintf('var --------')
varargin{:};
nargin;

% fprintf('endvar ------')
% SIGNALBROWSER M-file for SignalBrowser.fig
%      SIGNALBROWSER, by itself, creates a new SIGNALBROWSER or raises the existing
%      singleton*.
%
%      H = SIGNALBROWSER returns the handle to a new SIGNALBROWSER or the handle to
%      the existing singleton*.
%
%      SIGNALBROWSER('CALLBACK',hObject,eventData,handles,...) calls the local
%      function named CALLBACK in SIGNALBROWSER.M with the given input arguments.
%
%      SIGNALBROWSER('Property','Value',...) creates a new SIGNALBROWSER or raises the
%      existing singleton*.  Starting from the left, property value pairs are
%      applied to the GUI before SignalBrowser_OpeningFunction gets called.  An
%      unrecognized property name or invalid value makes property application
%      stop.  All inputs are passed to SignalBrowser_OpeningFcn via varargin.
%
%      *See GUI Options on GUIDE's Tools menu.  Choose "GUI allows only one
%      instance to run (singleton)".
%
% See also: GUIDE, GUIDATA, GUIHANDLES

% Edit the above text to modify the response to help SignalBrowser

% Last Modified by GUIDE v2.5 18-Feb-2011 15:41:26

% Begin initialization code - DO NOT EDIT
gui_Singleton = 1;
gui_State = struct('gui_Name',       mfilename, ...
                   'gui_Singleton',  gui_Singleton, ...
                   'gui_OpeningFcn', @SignalBrowser_OpeningFcn, ...
                   'gui_OutputFcn',  @SignalBrowser_OutputFcn, ...
                   'gui_LayoutFcn',  [] , ...
                   'gui_Callback',   []);




action = '';
               
if nargin & isstr(varargin{1})
    fprintf('\n\n----------- \n')
    gui_State.gui_Callback = str2func(varargin{1});
    if nargin == 1
        action = varargin{1};
    end
end

if nargout
    [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});
else
    gui_mainfcn(gui_State, varargin{:});
    if nargin == 0
        fprintf('\n\n create menu\n')
        hfig = gui_mainfcn(gui_State, []);
        % ====================================================================
        % MENUs
        %  create cell array with {menu label, callback, tag}
        
        %  MENU LABEL                     CALLBACK                      TAG
        
        fm={ 
            'File'                              ' '                                         'filemenu'          %1
            '>&Load Data...^l'                  'SignalBrowser(''load'');'                  'loadmenu'          %2
            '>&Save Data...^s'                  'SignalBrowser(''Save'');'                  'savemenu'          %3
            '>&------- Processed Data -------'                        ' '                        ' '            %4
            '>&Load Processed Data...^a'        'SignalBrowser(''loadProcessed'');'         'loadmenu'          %5
            '>&------- Electrocardiogram -------'                           ' '                        ' '      %6
            '>&Load ECG Data...'                  'SignalBrowser(''load'');'                'loadmenu'          %7
            '>&Save RR Data...'                  'SignalBrowser(''saveRRdata'');'          'saveRRmenu'        %8
            '>&Load RR Data...'                    'SignalBrowser(''loadRRdata'');'         'loadRRmenu'        %9
            '>&Retrieve RR Data...'                'SignalBrowser(''retrieveRRdata'');'     'retrieveRRmenu'    %10
            '>&Clear RR Data...'              'SignalBrowser(''clearRRdata'');'             'clearRRmenu'       %11
            '>&Clear EDR Data...'              'SignalBrowser(''clearEDRdata'');'           'clearEDRmenu'      %12
            '>&Export RR Data...^x'             'SignalBrowser(''export'');'                'exportmenu'        %13
             '>&------- Respiration -------'                           ' '                        ' '           %14
            '>&Load Respiration Data'            'SignalBrowser(''load_RESP'');'            'loadRESP'          %15
             '>&------- Skin Conductance -------'                      ' '                        ' '           %16
            '>&Load Skin Conductance Data'       'SignalBrowser(''load_SCL'');'             'loadSCL'           %17
%             '>&Load Session'                    'SignalBrowser(''loadsession'');'           'loadsessionmenu'
%             '>&Save Session'                    'SignalBrowser(''savesession'');'           'savesessionmenu'
%             '>Save Session As...'               'SignalBrowser(''savesessionas'');'         'savesessionasmenu'
             '>------'                           ' '                        ' '                                 %18
            '>&Close^w'                         'SignalBrowser(''close'');'                 'closemenu'         %19

            % Retrieve Rpeaks Menu
            'Retrieve Rpeaks'                              ' '                              'RR_fromIBI'        %20
            '>------- Retrieve Rpeaks from IBI -------'     ' '                             ' '                 %21   
            '>&Import IBI...'                  'SignalBrowser(''ImportIBI'');'              'ImportIBI'         %22
            '>&Import Editing Samples...'      'SignalBrowser(''ImportSignals'');'          'ImportSignals'     %23
            '>&Turn Off Rpeaks Finder...'      'SignalBrowser(''TurnOffRpeaksFinder'');'    'TurnOffRpeaksFinder'%24  
            % Export Analysis Results
            'Export Analysis'                              ' '                              'ExportAnalysis'    %25
            %'>&Save results data...'         'SignalBrowser(''SaveMeasures'');'        'SaveResults'       %24
            '>&Export results data...'       'SignalBrowser(''ExportMeasures2'');'      'ExportHR'          %26
            %'>&Combine results data...'      'SignalBrowser(''CombineHRMeasures'');'     'CombineHR'         %26
            % Print Results
            'Print/Save Results'                              ' '                              'PrintResults'  %27
            '>&Print Setup...'           'SignalBrowser(''PrintSetup'');'        'PrintSetup'       %28
            '>&Print Preview...'         'SignalBrowser(''PrintPreview'');'        'PrintPreview'       %29
            '>------- Print to Printer -------'     ' '                             ' '                 %30   
            '>&Print Figure...'         'SignalBrowser(''PrintFigure'');'        'PrintFigure'       %31
            '>------- Save Figure -------'     ' '                             ' '                 %32   
            '>&Save Figure (jpeg)...'         'SignalBrowser(''PrintFileJPEG'');'        'PrintFileJPEG'       %33
            '>&Save Figure (Portable Network Graphic)...'         'SignalBrowser(''PrintFilePNG'');'        'PrintFilePNG'       %34
            'Load/Save Parameters'                              ' '                              'LoadParameters'    %35
            '>&Load Parameters...'         'SignalBrowser(''LoadParameters_ui'');'        'LoadParameters'       %36
        };
        
        
        ud.filemenu_handles = makemenu(hfig, char(fm(:,1)),char(fm(:,2)), char(fm(:,3)));
        idxRR = [3 (5:7)+2]+1;
        ud.file_saveAll_handles = ud.filemenu_handles([3; 6+2]);
        ud.file_saveClearRR_handles = ud.filemenu_handles([6+2;(9:11)'+2]);
        ud.file_saveClearResp_handles = ud.filemenu_handles([]);
        ud.file_saveClearSCL_handles = ud.filemenu_handles([]);
        ud.file_save_handles = [ud.file_saveClearRR_handles;ud.file_saveAll_handles];
        
        ud.filemenu_retrieveRpeaks_handles = ud.filemenu_handles(18+2);
        ud.filemenu_TurnOffRPeaks = ud.filemenu_handles(22+2);
        ud.filemenu_Export = ud.filemenu_handles(24+2);
        
        set([ud.file_save_handles;ud.filemenu_retrieveRpeaks_handles;ud.filemenu_Export],'Enable','Off'); 
        
%             for idx = idxRR
%             set(ud.filemenu_handles(idx),'Enable','off');
%         end               
%         set(ud.filemenu_handles(4),'Enable','off');
        

        
        
        %Allow resizing the window
        %set(gcf,'Resize','on')
        h = guihandles(hfig);

        %%%%%%%%%%%   RENDERER SETTING %%%%%%%%%%%%%%%%%%%
        set(h.figure1,'renderer','OpenGl');
        %set(h.figure1,'renderer','zbuffer');
        %set(h.figure1,'renderer','painters');
        
        %%%%%%%%%%%% Add current path
        addpath(pwd)
        
        %%%%%%%%%%%   Color Definition %%%%%%%%%%%%%%%%%%%
        
        ud.blue0 = [118 192 254]/255; %dark blue
        ud.blue1 = [0 128 192]/255; %
        ud.lightblue = [202 232 255]/255;
        ud.magenta_light = [255 190 255]/255;
        ud.magenta_dark = [190 0 190]/255;
        ud.magentaPushbutton = [255 128 255]/255;
        ud.blue_enable_back = [170 200 220]/255;
        ud.blue_enable_for = [230 230 230]/255;
        ud.green = [0 0.8 0];
        ud.greenPushbutton = [132 217 128]/255;
        ud.green_light = [225 255 226]/255;
        ud.green_lightAnalyzed = [193 255 185]/255;
        ud.blue = [0 0 1];
        ud.red = [1 0 0];
        ud.orange = [255 102 0]/255; %[1 0 1]; %magenta %[255 128 128]/255;
        ud.orange_light = [255 200 170]/255;
        ud.magenta = [255 120 255]/255;
        
        set(h.figure1,'Color',ud.blue0)
        
        %designing Cdata for cursor <->
        M = NaN*ones(16,16);
        M(8,:) = 1;
        M([7 9],:) = 2;
        for i = 0:2
            M([[7-i:7] [9:9+i]],[2+i 15-i]) = 1;
            M([7-i-1 9+i+1],[2+i 15-i]) = 2;
        end
        ud.CursorRightLeft = M;
%         % pointer <-|->
%         M(:,7:9) = 1;
%         M(8,:) = 1;
%         for i = 0:2
%             M([7-i 9+i],[5-i 11+i]) = 1;
%         end
%       ud.CursorEdge = M
        
               %create EDR axes & handle
        h.EDR_FFTaxes = axes('Position',get(h.FFT_axes,'Position'),...
            'YAxisLocation','right', 'Color','none',...
            'YColor',ud.green,'XTick',[],'YTick',[],'XTickLabel',[],'YTickLabel',[], 'Parent',h.figure1);
        h.Spec_cursor_FFTaxes = axes('Position',get(h.FFT_axes,'Position'),...
            'Color','none','XTick',[],'YTick',[],'XTickLabel',[],'YTickLabel',[], 'Parent',h.figure1, 'visible','off');
        h.SampleEditaxes = axes('Position',get(h.axes3,'Position'),...
             'Color','none','XTick',[],'YTick',[],'XTickLabel',[],'YTickLabel',[], 'Parent',h.figure1);
        h.SignalEditaxes = axes('Position',get(h.axes3,'Position'),...
             'Color','none','XTick',[],'YTick',[],'XTickLabel',[],'YTickLabel',[], 'Parent',h.figure1);
        h.EDRaxes3 = axes('Position',get(h.axes3,'Position'),...
            'YAxisLocation','right', 'Color','none',...
            'YColor',ud.green,'XTick',[],'YTick',[],'XTickLabel',[],'YTickLabel',[],'Xcolor','b', 'Parent',h.figure1);
        h.RESPaxes3 = axes('Position',get(h.axes3,'Position'),...
            'YAxisLocation','right', 'Color','none',...
            'YColor',ud.magenta,'XTick',[],'YTick',[],'XTickLabel',[],'YTickLabel',[],'Xcolor','b', 'Parent',h.figure1);
        h.SCLaxes3 = axes('Position',get(h.axes3,'Position'),...
            'YAxisLocation','right', 'Color','none',...
            'YColor',ud.orange,'XTick',[],'YTick',[],'XTickLabel',[],'YTickLabel',[],'Xcolor','b', 'Parent',h.figure1);
        h.cursor_axes3 = axes('Position',get(h.axes3,'Position'),...
            'Color','none','XTick',[],'YTick',[],'XTickLabel',[],'YTickLabel',[], 'Parent',h.figure1, 'Color','none','visible','off');
        pos3 = get(h.axes3,'Position');
        h.axis3 = axes('Position',[pos3(1:2) pos3(3)*1.07 pos3(4)]...
             ,'XTick',[],'YTick',[],'XTickLabel',[],'YTickLabel',[], 'Parent',h.figure1); 
        h.Spectrogram_axes = axes('Position',get(h.axes3,'Position')...
             ,'XTick',[],'YTick',[],'XTickLabel',[],'YTickLabel',[], 'Parent',h.figure1,'visible','off');
        h.ANSTime_axes = axes('Position',get(h.axes3,'Position')...
             ,'XTick',[],'YTick',[],'XTickLabel',[],'YTickLabel',[], 'Parent',h.figure1,'visible','off');
        h.Spectrogram_axes_contour = axes('Position',get(h.axes3,'Position')...
             ,'XTick',[],'YTick',[],'XTickLabel',[],'YTickLabel',[], 'Parent',h.figure1,'Color','none','visible','off');
        h.Spectrogram_axes_cursor = axes('Position',get(h.axes3,'Position')...
             ,'XTick',[],'YTick',[],'XTickLabel',[],'YTickLabel',[], 'Parent',h.figure1,'Color','none','visible','off');
        h.ANSTime_HFLF_axes = axes('Position',get(h.axes3,'Position'),'YAxisLocation','right'...
             ,'XTick',[],'YTick',[],'XTickLabel',[],'YTickLabel',[], 'Parent',h.figure1,'Color','w','visible','off');
        h.Spectrogram_axis = axes('Position',get(h.axes3,'Position')...
             ,'XTick',[],'YTick',[],'XTickLabel',[],'YTickLabel',[], 'Parent',h.figure1,'Color','none','visible','off');
         
        pos = get(h.axes3,'position');
        h.colorbar = colorbar(h.Spectrogram_axes,'position',[pos(1)+pos(3)+0.002 pos(2) 0.01 pos(4)]...
             ,'fontsize',8, 'visible','off');
%         h.colorbar=axes('position',[pos(1)+pos(3)+0.002 pos(2) 0.01 pos(4)]...
%             ,'XTick',[],'YTick',[],'XTickLabel',[],'YTickLabel',[], 'Parent',h.figure1,'visible','off');

        
        set([h.axes_SpectrumBackground1;h.axes_SpectrumBackground2],'XTick',[],'YTick',[],'XTickLabel',[],'YTickLabel',[],'visible','off')
     
        ud.axes3_Pos1 = get(h.axes3,'Position');
        ud.slider1_Pos1 = get(h.slider1,'Position');
        ud.slider2_Pos1 = get(h.slider2,'Position');
        
        Dy = 0.46; %0.18*4
        ypos = 0.41;
        ud.axis3_Pos2 = [0.053 ypos        0.5 Dy  ];
        ud.axes3_Pos2 = [0.053 ypos        0.5 Dy/3];
        ud.RESP_Pos2 =  [0.053 ypos+Dy/3   0.5 Dy/3];
        ud.EDR_Pos2 =   [0.053 ypos+Dy/3   0.5 Dy/3];
        ud.SCL_Pos2 =   [0.053 ypos+2*Dy/3 0.5 Dy/3];
        set(h.cursor_axes3,'position',ud.axes3_Pos2); 
        guidata(hfig,h);
        
        %create group handles
        
         ud.SamplePushbuttonHandle = [h.SamplePrevious_pushbutton' ; h.SampleNext_pushbutton'; h.SampleDelete_pushbutton';...
                 h.SampleZoom_pushbutton'];
         
         ud.SampleEditHandle = [h.Sample_Nber; h.Nber_of_Samples; h.SampleStart_edit; h.SampleEnd_edit; h.SampleLength_edit; h.SampleLabel_edit];
         
         ud.SampleTextHandle= [ h.SampleEditing_frame ; h.RRsample_Select_Title ; h.Sample_text; h.Of_text; ...
                 h.Start_text; h.End_text; h.Length_text; h.SampleLabel_text ];
         
         ud.SampleHandle = [ud.SampleTextHandle; ud.SampleEditHandle; ud.SamplePushbuttonHandle];
         
         ud.SignalAnalyzedHandle= [h.LengthAnalyzed_text ; h.percsec_text; h.SampleAnalyzedPerc; h.SampleAnalyzedSec;...
                 h.SampleAnalyzed_frame; h.sec2_text; h.SampleAnalyzedHRVSec; h.LengthAnalyzedFinal_text];
         
         
         % Switch All signal, Editing handles
         pos1 = cell2mat(get(h.SamplePrevious_pushbutton,'position'));
         [y, ix] = sort(pos1(:,1));
         h.SamplePrevious_pushbutton = h.SamplePrevious_pushbutton(ix);
         h.SampleNext_pushbutton = h.SampleNext_pushbutton(ix);
         h.SampleZoom_pushbutton = h.SampleZoom_pushbutton(ix);
         guidata(hfig,h);
         
         
         ud.SamplePush1Handle = [h.SamplePrevious_pushbutton(1)' ; h.SampleNext_pushbutton(1)'; h.SampleDelete_pushbutton';...
                 h.SampleZoom_pushbutton(1)'; h.SampleEditing];
         ud.SignalPush1Handle = [h.SignalEditing; h.SignalAnalyzed];
         ud.ChannelSelectHandle = [h.All_pushbutton; h.SCL_togglebutton; h.EDR_togglebutton(2); h.RESP_togglebutton; h.IBI_togglebutton]; 
         ud.SelectRRHandle = [h.SelectRR_togglebutton; h.Dec_pushbutton; h.Inc_pushbutton];
         ud.axes1_ECGHandle = [h.invertEKGpushbutton;  h.RRmarkerstogglebutton; ...
                 h.MarkQRS_pushbutton; ud.SelectRRHandle];
         ud.EditingViewHandle = [h.RRzoomtogglebutton; h.AbnormalRpeaks_togglebutton;ud.ChannelSelectHandle; ud.axes1_ECGHandle; h.slider1; h.slider2; h.pushzoomout];
         ud.AllSignalViewHandle = [h.slider1b;h.pushzoomoutb; h.Spectrum_pushbutton; h.Power_pushbutton; ...
                                    h.cursor_axes3; h.Spectrogram_axes_cursor; h.Spec_cursor_FFTaxes; ...
                                    h.RefreshSpectrum_pushbutton ; h.SpectrumSeparation_frame; h.SpectrumSeparation_frame2;...
                                    h.SpectrogramMethod_menu; h.SpectrogramMethod_text; h.SpectrogramMethod_frame; h.Spectrogram_RelAbs_menu];
         
         
         set(ud.AllSignalViewHandle,'visible','off');
         set(h.RR_Editing_View,'Value', 1);
         
        set(h.invertEKGpushbutton,'BackgroundColor',ud.blue1)
        set(h.pushzoomout,'BackgroundColor',ud.blue1)
        set(h.figure1,'userdata',ud)
        
        % enable pushbutton
         set([h.pushzoomout ; h.savebutton ; ...
                 h.invertEKGpushbutton ; h.RRmarkerstogglebutton ; h.RRzoomtogglebutton; h.AbnormalRpeaks_togglebutton; h.Fs_edit],'Enable','off')
               
        % enable 'Next file' button
        set(h.NextFile,'enable','off','BackgroundColor',ud.blue_enable_back,'foregroundColor',ud.blue_enable_for,'Value',0)

        
        
        %input default values
        ha1 = h.axes1;
        ud1.xy1 = [];
        ud1.xy3 = [];
        ud1.hIBI = [];
        ud1.hIBI2 = [];
        ud1.hIBI2b = [];
        ud1.hIBI3 = [];
        ud1.hPatch3 = [];
        ud1.hPatch = [];
        ud.hPatchSample = [];
        ud1.hPatchSignal = [];
        ud1.hRsig = [];
        ud2.hPatch2 = [];
        figure(h.figure1); set(h.figure1,'HandleVisibility','on');
        set(ha1,'userdata',ud1);
        set(h.axes2,'userdata',ud2,'XAxisLocation','top','XTickMode','auto','YTickMode','auto')
        
        axes(h.axes1); 
        axes(h.axes3); set(h.axes3,'XTick',[],'YTick',[],'XTickLabel',[], 'YTickLabel',[])  ;%set(h.axes3,'visible','off') %axis off; %
        set(h.figure1,'HandleVisibility','Callback');
        ud = get(h.figure1,'userdata');
        ud.idxRR = idxRR;
        ud.ECGfil = [];
        ud.nRfil = [];
        ud.tRfil = [];
        ud.nR2 = [];
        ud.tR2 = [];
        ud.nR2offset = [];
        ud.tR2offset = [];
        ud.EDRsig = [];
        ud.EDRval = 0;
        ud.hEDRsig = [];
        
        ud.RESPsig = [];
        ud.hRESPsig = [];
        ud.SCLsig = [];
        ud.hSCLsig = [];
        
        ud.IBI_FFT =[];
        ud.EDR_FFT =[];
        ud.RESP_FFT =[];
        
        %%%%%%%%% Didier v3.3 %%%%%%%%%%%%%%%
        ud.automatic = 0;
        ud.cursor = '';
        %%%%%%%%% Didier v3.3 %%%%%%%%%%%%%%%

        % file name
        ud.wd = pwd;
        ud.PathNameLoad = pwd;
        ud.PathNameExport = '';
        ud.FileNameExport = '';
        ud.PathNameExportHRV = '';
        ud.FileNameExportHRV = '';
        ud.FileNameParam = 'Parameters.m';
        ud.PathNameParam = pwd;

        %pause
        
        
        % Default Variable value
        set(h.TimeMeasure_text,'string','');
        
        
        %%%%%%%% Default parameter Values  %%%%%%%%%%%
        ud.RRmin = 0.3; %minimum IBI interval for human (mice RRmin = 0.05/0.2)
       
        %HRV bands 
        ud.VLFmin = 0; 
        ud.VLFmax = 0.04; 
        ud.LFmin = 0.04; 
        ud.LFmax = 0.15; 
        ud.HFmin = 0.15; 
        ud.HFmax = 0.4; 
        
        % HRV values
        %interpolation Frequency = 4Hz
        ud.Fs_interp = 4; 
        %--------- Didier v4.4 ----------
        ud.ARorder = 8;
        %--------- v4.4 ----------
        %Detrend 2nd order
        ud.detrend = 3;
        ud.smoothN = 2*round(1/ud.LFmin*ud.Fs_interp);
        ud.NFFT = 2048;
        ud.Nwindow = 128*ud.Fs_interp;
        ud.Noverlap = ud.Nwindow/2;
        ud.FreqMethod = 1; %Welch methods
        ud.WindowFilter = 2; %Hamming
      
        % Spectrogram Values
        ud.SpectrogramMethod = 4;
        
        % EDR
        ud.nQR = 43; ud.nRS = 34;
           
        % Samples informations
        ud.Samplet1 = [];
        ud.Samplet2 = [];
        ud.Nber_of_Samples = 0;
        ud.Sample_Nber = [];
        ud.SampleLabel = {};
        
        %Signal Excluded Samples
        ud.Signalt1 = [];
        ud.Signalt2 = [];
        ud.Nber_of_Signals = 0;
        ud.Signal_Nber = [];
      
        %%%%%%%%%%% Didier 3.1 %%%%%%%%%%%
        %Asking to load parameters value
        %set(h.figure1,'userdata',ud)
        %LoadParameters_Fcn
        %ud = get(h.figure1,'userdata')

        %%%%%%%%%%% Didier  %%%%%%%%%%%%%%
        
        %updating fields
        set(h.VLFmin,'String',sprintf('%4.2f',ud.VLFmin));
        set(h.VLFmax,'String',sprintf('%4.2f',ud.VLFmax));
        set(h.LFmin,'String',sprintf('%4.2f',ud.LFmin));
        set(h.LFmax,'String',sprintf('%4.2f',ud.LFmax));
        set(h.HFmin,'String',sprintf('%4.2f',ud.HFmin));
        set(h.HFmax,'String',sprintf('%4.2f',ud.HFmax));
        
        %--------- Didier v4.4 ----------
         set(h.ARorder_edit,'String',sprintf('%d',ud.ARorder));
        %--------- v4.4 ----------
        
        set(h.interpol_edit,'String',sprintf('%d',ud.Fs_interp));
        set(h.detrend_menu,'Value',ud.detrend);
        set(h.smoothN_edit,'string',sprintf('%d',ud.smoothN));
        set(h.NFFT_edit,'String',sprintf('%d',ud.NFFT));
        set(h.WindowLength_edit,'String',sprintf('%d',ud.Nwindow));
        set(h.WindowOverlap_edit,'String',sprintf('%d',ud.Noverlap));
        set(h.FreqMethod_menu,'Value',ud.FreqMethod);
        set(h.WindowFilter_menu,'Value',ud.WindowFilter);
        set(h.SpectrogramMethod_menu,'Value',ud.SpectrogramMethod);

        
 
        
        
%         axes(h.SCLaxes3); ylabel('SCL (mS) /'); 
%         axes(h.RESPaxes3);ylabel('           RESP /'); 
%         axes(h.EDRaxes3);ylabel('                  EDR');
        
        
        %create white background for axes3
        uistack(h.axes3,'top')
        uistack(h.axis3,'bottom')
        uistack(h.Spectrogram_axis,'bottom')
        
        % Update Sample Edit
        set(h.SampleLength_edit,'String',[]);
        set(h.SampleStart_edit,'String',[]);
        set(h.SampleEnd_edit,'String',[]);
        set(h.Sample_Nber,'String',[]);
        set(h.Nber_of_Samples,'String',[]);
        
        set([ud.SamplePushbuttonHandle;ud.SampleEditHandle],'Enable','off');
        set(h.Nber_of_Samples,'Enable','on');
        
        set(h.HRVMeasurePeak_text,'string',[]);
        set(h.HRVMeasurePwr_ms_text,'string',[]);
        set(h.HRVMeasurePwr_perc_text,'string',[]);
        set(h.HRVMeasurePwr_nu_text,'string',[]);
        set(h.TimeMeasure_text,'string',[]);
        
        
        set(h.figure1,'userdata',ud)
        set(h.figure1,'WindowButtonUpFcn' ,'')

    end



switch action
  case 'load'
    load_CreateFcn
  %%%%%% Didier v3.3 %%%%%%
  case 'loadProcessed'
    loadProcessed_CreateFcn
  %%%%  Didier v3.3  %%%%%%
  case 'Save'
    savedata_CreateFcn
  case 'saveRRdata'
    saveRRdata_CreateFcn
  case 'loadRRdata'
    loadRRdata_CreateFcn
  case 'retrieveRRdata'
    loadRRdata_CreateFcn
  case 'clearRRdata'
    clearRRdata_CreateFcn  
  case 'clearEDRdata'
    clearEDRdata_CreateFcn  
  case 'load_RESP'
    load_RESP_CreateFcn
  case 'load_SCL'
    load_SCL_CreateFcn
  case 'export'
    export_CreateFcn
  case 'close'
      'close1'
      close(SignalBrowser)
      
  case 'ImportIBI'
      ImportIBI_Callback
  case 'ImportSignals'
      ImportSignals_Callback
  case 'TurnOffRpeaksFinder'
      TurnOffRpeaksFinder
      
  case 'SaveMeasures'
      ExportMeasures
  case 'ExportMeasures2'
      ExportMeasures
  case  'CombineHRMeasures'
      CombineHRMeasures
      
 case  'PrintSetup'
      printdlg('-setup',h.figure1)
 case  'PrintPreview'
      printpreview(h.figure1)
 case  'PrintFigure'
      printdlg(h.figure1)
 case 'PrintFilePNG'
      %print gcf -dpng 
      fprintf('print png \n')
      ud = get(h.figure1,'userdata');
      mf = length(ud.fullFileName);
      mf1 = max(find(ud.fullFileName == '.'));
      if strcmp(ud.fullFileName(mf1-3:mf1-1), 'ECG') == 1
        mf1 = mf1 - 4;
      end
      filename = sprintf('%s.png',ud.fullFileName(1:mf1-1));
      print(h.figure1,'-dpng',filename);

 case 'PrintFileJPEG'
      fprintf('print jpeg \n')
      ud = get(h.figure1,'userdata');
      mf = length(ud.fullFileName);
      mf1 = max(find(ud.fullFileName == '.'));
      if strcmp(ud.fullFileName(mf1-3:mf1-1), 'ECG') == 1
        mf1 = mf1 - 4;
      end
      filename = sprintf('%s.jpg',ud.fullFileName(1:mf1-1));
      print(h.figure1,'-djpeg(90)',filename);
    
  case 'LoadParameters_ui'
    %%%%%%% Didier 3.1 %%%%%%%%%%%
    %% modified LoadParameters function to ask to choose a file if none is
    %% specified
      LoadParameters_Fcn
    %%%%%%%%%  Didier  %%%%%%%%%%%%%%
    

   
    
    case ''
      
end

end
% End initialization code - DO NOT EDIT


% --- Executes just before SignalBrowser is made visible.
function SignalBrowser_OpeningFcn(hObject, eventdata, handles, varargin)
% This function has no output args, see OutputFcn.
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
% varargin   command line arguments to SignalBrowser (see VARARGIN)

% Choose default command line output for SignalBrowser
handles.output = hObject;

% Update handles structure
guidata(hObject, handles);

% UIWAIT makes SignalBrowser wait for user response (see UIRESUME)
% uiwait(handles.figure1);




  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  %%%%%%%%%%                                                        %%%%%%%%%%
  %%%%%%%%%%                Create Objects Function                 %%%%%%%%%%
  %%%%%%%%%%                                                        %%%%%%%%%%
  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

               
function LoadParameters
    fprintf('Load parameters \n')
    h = guidata(gcf);
    ud = get(h.figure1,'userdata');
    cd(ud.PathNameParam);
    
    [f,p]=uigetfile({'*Param*.m','Parameters File (*.m)'},'Please Peak a Parameter File',ud.FileNameParam);
    if ~isempty(f)
        LoadParameters_Fcn(f,p)
        %ud = get(h.figure1,'userdata',ud);
        Update_PatchSample;
        %Update_PatchSignal;
    end
    cd(ud.wd)
    

  
  
% --- Outputs from this function are returned to the command line.
function varargout = SignalBrowser_OutputFcn(hObject, eventdata, handles)
% varargout  cell array for returning output args (see VARARGOUT);
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Get default command line output from handles structure
varargout{1} = handles.output;


% --- Executes during object creation, after setting all properties.
function slider1_CreateFcn(hObject, eventdata, handles)
% hObject    handle to slider1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: slider controls usually have a light gray background, change
%       'usewhitebg' to 0 to use default.  See ISPC and COMPUTER.
usewhitebg = 1;
if usewhitebg
    %set(hObject,'BackgroundColor',[.9 .9 .9]);
    set(hObject,'BackgroundColor',[1 1 1]);
else
    set(hObject,'BackgroundColor',get(0,'defaultUicontrolBackgroundColor'));
end
blue0 = [118 192 254]/255;
set(hObject,'SliderStep',[0 inf],'enable','off','BackgroundColor',blue0) ;
%get(hObject);

% --- Executes during object creation, after setting all properties.
function slider2_CreateFcn(hObject, eventdata, handles)
% hObject    handle to slider2 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: slider controls usually have a light gray background, change
%       'usewhitebg' to 0 to use default.  See ISPC and COMPUTER.
usewhitebg = 1;
if usewhitebg
    set(hObject,'BackgroundColor',[1 1 1]);
else
    set(hObject,'BackgroundColor',get(0,'defaultUicontrolBackgroundColor'));
end
blue0 = [118 192 254]/255;
set(hObject,'SliderStep',[0 inf],'enable','off','BackgroundColor',blue0) ;

  
  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  %%%%%%%%%%                                                        %%%%%%%%%%
  %%%%%%%%%%                Load Processed Data Function            %%%%%%%%%%
  %%%%%%%%%%                                                        %%%%%%%%%%
  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  %%%%%%% Didier: function created with v3.3  %%%%%%%%%%%%%%%%
  
  function loadProcessed_CreateFcn
  % Callback code for pushbutton with Tag "load"
  %hObject
  % Load processed data (containining extracted IBI/RR data) either by 
  % 1. loading a text file containing list of data file
  % 2. loading one or several selected files
  % If more than one file is selected, HRV metrics that were computed for 
  % each file will be automatically loaded and exported into a 
  % "Results_all.txt" file
  % If only one file is selected, the data (RR, SCL, respiration data) will  
  % simply loaded
  % An option is given to load ECG data (which is not needed to compute
  % results)

  h = guidata(gcf);
  ud = get(h.figure1,'userdata');
  orange_flash = [255 128 128]/255;
  
  ud.automatic = 0; %set ud.automatic to 0 by default
  matlab_wd = pwd;
  if  exist(ud.PathNameLoad)>1
        cd(ud.PathNameLoad);
  end
  
  button = questdlg('You can choose to load one or multiple data files. Do you want to select a text file containing the list of data file names or select the actual data file (s)?',...
      'Choose One or Multiple Files','A file containing the list of Data File Names','The Actual Data File (s)','Cancel','Cancel');
  switch button
      case 'A file containing the list of Data File Names'
          if exist(ud.PathNameExportHRV,'dir')
              cd(ud.PathNameExportHRV);
          end
          [file_list,path_list]=uigetfile({'*.txt','List of Files (*.txt)'});
          cd(matlab_wd)
          path_data = path_list;
          %%%%%%%%%%%%% Didier 3.2 1/14/09  %%%%%%%%%%%%%%%%
          %FileName_List = textread([path_list file_list],'%s');
          [FileName_List ParametersFile_List] = textread([path_list file_list],'%s%s');
          if isempty(ParametersFile_List{1})
              ParametersFile_List = '';
          end
          %%%%%%%%%%%%% Didier %%%%%%%%%%%%%%%%%
          
          if ~exist([path_data FileName_List{1}])
              uiwait(msgbox(sprintf('Please choose the folder where the data files are \n'),'Modal'))
              path_data = [uigetdir(path_data,'Data File Directory') '\' ];
              cd(matlab_wd)
          end
          
          n = length(FileName_List);
          for i=1:n
              if ~exist([path_data FileName_List{i}]) & exist([path_data '0' FileName_List{i}])
                  FileName_List{i} = ['0' FileName_List{i}];
              end
          end


          
      case 'The Actual Data File (s)' 
          version_date = str2num(datestr(version('-date'),'yyyy'));
          if version_date>2003 
              [FileName_List,path_data,filterindex]=uigetfile({'*_all.mat','Processed Data Files (*.mat)';...
                      '*_all.txt','Processed Data Files (*txt)';'*.*','RR Data (*.*)';'*.*','(*.*)'}...
                  ,'MultiSelect', 'on');
              
          else
              [FileName_List,path_data]=uigetfiles('*_all.mat','Processed Data Files (*.mat)');
          end
          ParametersFile_List = [];
          path_list = path_data;
      otherwise
          return %stop function
  end
  cd(matlab_wd)



  if ~isequal(FileName_List,0) && ~isempty(FileName_List)
      Nf = length(FileName_List);
      ud.tmin = 0;
      ud.tmax = 1;
      ud.nR = [];
      ud.PathNameLoad = path_data;

      set(h.figure1,'userdata',ud);

        

      cd(matlab_wd)

      Clear_Plots
      Initialize_all
      button_loadECG = questdlg('Do you wish to load ECG data? ','Loading ECG Data','Yes','No','No');

      %%%%%%%%%%%%%%%%% Import file from File List (more than one file) %%%%%%%%%%%%%%%%%%
      if iscellstr(FileName_List) && length(FileName_List)>1

          if isempty(ParametersFile_List)
              %load parameters values
              LoadParameters_Fcn

              ud = get(h.figure1,'userdata');
              % save Parameter file before it gets deleted when loaded ud from
              % file
              ParametersFile = ud.FileNameParam;
          end

          ud.automatic = 1;
          %%%%%%%%%%%%%%  Define Export File %%%%%%%%%%%%
          %asking to define the file for which to export results to
          %           uiwait(msgbox(sprintf('Please choose the file you would like results to be exported to \n'),'Modal'))
          %           uiwait(gcf);
          %           figure(h.figure1)
          btn = questdlg('Please choose the file you would like results to be exported to',...
              'Exporting Results','OK','Not Exporting','Cancel','Ok');

          FileNameExportHRV = 0;
          EXPORT = 0;
          if isequal(btn,'OK')

              if isempty(ud.PathNameExportHRV) || min(ud.PathNameExportHRV == 0)
                  DefaultPathName = path_list;
              else
                  DefaultPathName = ud.PathNameExportHRV;
              end
              cd(DefaultPathName)
              DefaultName = 'Results_all.txt';
              [FileNameExportHRV,PathNameExportHRV] = uiputfile({'*.txt;*.dat','Text or Data File (*.txt,*.dat)'},'Export File Name', DefaultName);
          end

          if ~isequal(FileNameExportHRV,0)
              EXPORT = 1;
              ud.FileNameExportHRV = FileNameExportHRV;
              ud.PathNameExportHRV = PathNameExportHRV;
              TimeFields = 'MeanRR , STDRR , MeanHR , STDHR , RMSSD, MeanSCL, EDRs';

              text_IBIf = 'f_VLFmax , f_LFmax , f_HFmax';
              text_RESPf = ' f_RESPmean , f_RESPmedian , f_RESPstd ,  f_RESPmax';
              text_EDRf = 'f_EDRmean , f_EDRmedian , f_EDRstd ,  f_EDRmax';
              text_IBIpwr = 'VLFpwr , LFpwr , HFpwr';
              text_RESPEDRpwr = 'RESPLFpwr , RESPHFpwr , EDRLFpwr , EDRHFpwr';
              text_pwr_perc = 'VLFpwr_perc , LFpwr_perc , HFpwr_perc , LFoverHF';
              text_pwr_nu = 'LFpwr_nu , HFpwr_nu';
              FreqFields = [text_IBIf ' , ' text_RESPf ' , ' text_EDRf ' , '  text_IBIpwr ' , ' text_RESPEDRpwr ' , ' text_pwr_perc ' , ' text_pwr_nu];

              text_FieldHeader = sprintf('PathName , FileNameExport , FileName, PatientID, SampleNber , SampleLabel , Duration , DurationEdited , EditedPerc, DurationHRV , t1 , t2 , %s , %s', TimeFields, FreqFields);
              [fid errmsg] = fopen([ud.PathNameExportHRV ud.FileNameExportHRV],'wt');
              fprintf(fid,'%s \n ', text_FieldHeader);
              fclose(fid);
              set(h.figure1,'userdata',ud);
              cd(matlab_wd)
          else
              FileNameExportHRV = 'File.txt';
              PathNameExportHRV = path_list;
          end


          %%%%%%%%%%%%%%  create a log file in case of error/crash %%%%%%%%%%%%
          ni = findstr(FileNameExportHRV,'.');
          nl = length(FileNameExportHRV);
          File_log = [PathNameExportHRV FileNameExportHRV(1:ni-1) '_log.txt' ];
          [fid2 errmsg] = fopen(File_log,'wt');
          fclose(fid2);

          % Switch to all signal view
          path_ECG = '';
          if EXPORT == 1 && strcmp(button_loadECG,'No');
              All_Signals_View_Fcn(1)
          end

          for nf = 1:Nf
              Ermsg1 = ''; Ermsg2 = ''; Ermsg3 = '';
              Clear_Plots
              Initialize_all

              %%%%%%%%%%%%%% load file %%%%%%%%%%%%%

              try
                  % Load data file
                  fprintf('\n\n\n------------------------------------------------------------------------------- \n');
                  fprintf('------------------  %d/%d - %s    ----------------------- \n',nf,Nf,FileName_List{nf});
                  fprintf('------------------------------------------------------------------------------- \n\n');

                  loadfile(path_data,FileName_List{nf})
                  Ermsg1 = 'File loaded';
                  %               [fid2 errmsg] = fopen(File_log,'at');
                  %               fprintf(fid2,', %s \n', Ermsg1 );
                  %               fclose(fid2)

                  %%%%%%%%%%% Load ECG RR data if asked for %%%%%%%%%%%%%%%%%%
                  ud = get(h.figure1,'userdata');


                  if isequal(button_loadECG, 'YesYes')
                      if isempty(path_ECG) 
                          %ask for the folder where ECG files are in case it is different than path_data
                          uiwait(msgbox(sprintf('Please choose the folder where the ECG data files are located\n'),'Modal'))
                          path_ECG = [uigetdir(path_data,'Data File Directory') '\' ];
                          load handel
                          y_handel = y(1:15800); %y(33501:44500)'.*sin((1:11000)*pi/12000); %
                          Fs_handel = Fs;
                      end


                      
                      if isfield(ud,'fileNameString')
                          if ~exist(fullfile(path_ECG,ud.fileNameString))
                              Ermsg1 = 'No ECG File';
                          end
                      else
                          Ermsg1 = 'No ECG File';
                      end
                      if strcmp(Ermsg1,'No ECG File')
                          n2 = max(findstr(FileName_List{nf},'_all'));
                          ud.fileNameString = [FileName_List{nf}(1:n2) 'ECG.txt'];
                          if exist(fullfile(path_ECG,ud.fileNameString))>0
                              Ermsg1 = 'File loaded';
                          end
                      end

                      if strcmp(Ermsg1,'File loaded')

                          load_ECG_CreateFcn(path_ECG,ud.fileNameString)
                          %ndir = findstr(ud.fullFileNameECG, ud.fileNameString);
                          loadRRdata_CreateFcn(path_ECG,ud.fileNameString)

                          udnew = get(h.figure1,'userdata');
                          if ~strcmp([path_ECG ud.fileNameString], udnew.fullFileNameECG)
                              Ermsg1 = 'File loaded - Original ECG File different than what was loaded';
                          end
                          ud.fullFileNameECG = udnew.fullFileNameECG;
                          ud.ECGsig = udnew.ECGsig;
                          ud.tsig = udnew.tsig;

                          ud.nR = udnew.nR;
                          ud.tR = udnew.tR;
                          if ishandle(ud.hEDRsig); delete(ud.hEDRsig); end;
                          ud.hEDRsig = []; ud.tEDRsig= []; ud.EDRsig = [];
                          set(h.figure1,'userdata',ud);
                          Compute_EDR(1)
                          ud = get(h.figure1,'userdata');

                      end
                  end

                  Samplet2 = ud.Samplet2;
                  % For IRB8128 only
                  %Samplet2 = ud.Samplet2-15;
                  %clear EDR variables if they exist
                  %ud.EDRsig = [];ud.tEDRsig = [];



                  %%%%%%%%%%%%%% load the new parameters file.. %%%%%%%%%%%%%
                  if isempty(ParametersFile_List)
                      ud.FileNameParam = ParametersFile;
                  else
                      ud.FileNameParam = ParametersFile_List{nf};
                      ud.PathNameParam = path_list;
                  end

                  set(h.figure1,'userdata',ud);
                  LoadParameters_Fcn(ud.FileNameParam, ud.PathNameParam);
                  ud = get(h.figure1,'userdata');
                  fprintf('t2_old =') ;
                  fprintf('\t%d',Samplet2);
                  fprintf('\nt2     =');
                  fprintf('\t%d',ud.Samplet2);
                  fprintf('\n');


                  %%%%%%%%%%%%%%%%%%%% Load SCL if file exists %%%%%%%%%%%%%%%%
                  % need to recalculate SCL, since errors found in the earlier procedure
                  % This is done only if date > 11/24/2009 date of the new SCL
                  % processing routine
                  try
                      file_info = dir([path_data FileName_List{nf}]);
                      if isfield(file_info,'date')
                          DateCreated = datenum(file_info.date);
                      else
                          DateCreated = 0;
                      end

                      if DateCreated < datenum('11-Dec-2009')

                          ud = get(h.figure1,'userdata');
                          mf = findstr(ud.fileNameString,'ECG');
                          m = length(ud.fileNameString);
                          if isempty(mf)
                              mf = findstr(ud.fileNameString,'.');
                              filename_SCL = [ud.fileNameString(1:mf-1) '_SCL2' ud.fileNameString(mf:m)];
                          else
                              filename_SCL = [ud.fileNameString(1:mf-1) 'SCL2' ud.fileNameString(mf+3:m)];
                          end

                          if exist([ud.PathNameLoad filename_SCL])~=0
                              fprintf('loading & computing SCL data\n');
                              %hb = MsgBox2('Loading and Processing Skin Conductance data...'); pause(1)
                              var_out = load_SCL_CreateFcn(path_data,filename_SCL);
                              %delete(hb); %figure(fig)

                              % Update log file
                              if var_out == 1
                                  Ermsg2 = 'SCL data loaded';
                              else
                                  Ermsg2 = 'SCL data not loaded - SCL1 & SCL2 different lengths ';
                              end
                          else
                              fprintf('SCL data not loaded for %s\n',ud.fileNameString)
                              Ermsg2 = 'SCL data not loaded';
                          end

                      else
                          Ermsg2 = 'No need to load SCL';

                      end

                  catch
                      Ermsg2 = 'Error when recomputing SCL';
                  end

                  %pause
                  %%%%%%%%%%%%%%%%%  Export File %%%%%%%%%%%%%%%%%%%%
                  if EXPORT == 1
                      try
                          ExportMeasures
                          Ermsg3 = 'Results Exported';
                      catch
                          Ermsg3 = 'Error when Exporting results';
                      end
                      %               [fid2 errmsg] = fopen(File_log,'at');
                      %               fprintf(fid2,', %s \n', Ermsg3 );
                      %               fclose(fid2)
                  else
                      Ermsg3 = 'Results not Exported';
                      if isequal(button_loadECG, 'Yes')
                          sound(y_handel,Fs_handel)
                      end
                      set(h.NextFile,'enable','on')

                      while get(h.NextFile,'Value')==0
                          set(h.NextFile,'BackgroundColor',orange_flash,'foregroundColor',[1 1 1])
                          pause(0.5);pause(0.5);
                          %set(h.NextFile,'BackgroundColor',orange_light,'foregroundColor',[0 0 0])
                          set(h.NextFile,'BackgroundColor',ud.blue1,'foregroundColor',[1 1 1])
                          pause(0.5);pause(0.5);
                      end
                      set(h.NextFile,'enable','off','BackgroundColor',ud.blue_enable_back,'foregroundColor',ud.blue_enable_for,'Value',0)
                      %                       beep; pause;
                      %                       btn = '';
                      %                       btn = msgbox('Continue to next file?','Continue Loading','Yes','No','Yes');
                      %                       %if answer is no break the loop else contimue
                      %                       while isempty(btn)
                      %                             pause(0.001)
                      %                       end
                      %                       if btn = 'No' then
                      %                           break;
                      %                       end

                  end
              catch %catch error with loading file
                  Ermsg1 = 'Error when loading file';
                  Samplet2 = [];
                  ud.Samplet2 =[];

              end

              %%%%%%%%%%%%%%%%% Update log file  %%%%%%%%%%%%%%%%
              [fid2 errmsg] = fopen(File_log,'at');
              fprintf(fid2,'%d, %s , %s, %s, %s ', nf, FileName_List{nf}, Ermsg1, Ermsg2, Ermsg3 );
              fprintf(fid2,', %d',Samplet2);
              fprintf(fid2,'\n');
              fprintf(fid2,'%d, %s , %s, %s, %s ', nf, FileName_List{nf}, Ermsg1, Ermsg2, Ermsg3 );
              fprintf(fid2,', %d',ud.Samplet2);
              fprintf(fid2,'\n');
              fclose(fid2);


          end
          %%%%%%%%%%%%%%%%% Import Single file %%%%%%%%%%%%%%%%%%
      else
          if iscellstr(FileName_List)
              FileName_List = FileName_List{1};
          end
          nf = length(FileName_List);
          % not sure why there is a choice of loading a txt file
          % I am not clear what processing is done to the data
          if strcmp(FileName_List(nf-2:nf),'txt') 
              set(h.figure1,'pointer','watch')
              M = importdata([path_data FileName_List],' ');
              [r c] = size(M);
              FileData = M;

              if filterindex == 3
                  Nr = length(M);
                  ud.tR=zeros(Nr+1,1);
                  ud.nR=ud.tR+1;
                  for n = 1:Nr
                      ud.tR(n+1) = ud.tR(n)+M(n)/1000;
                      %ud.nR =
                  end
                  ud.Fs = 1;
                  ud.tsig = 0:1/ud.Fs:ud.tR(Nr+1);
                  ud.ECGsig = ud.tsig/ud.tR(Nr+1);
                  ud1 = get(h.axes1,'userdata');
                  ampECG = max(ud.ECGsig) - min(ud.ECGsig);
                  ud1.ECGmin = min(ud.ECGsig)-0.1*ampECG;
                  ud1.ECGmax = max(ud.ECGsig)+0.1*ampECG;
                  ud.tmin = min(ud.tsig);
                  ud.tmax = max(ud.tsig);
                  set(h.axes1,'userdata',ud1);

                  %ud.nR = 1:Nr+1;
                  set(ud.file_saveClearRR_handles,'Enable','on');
                  set(h.RRzoomtogglebutton,'Enable','on')
                  set([h.RRmarkerstogglebutton h.IBI_togglebutton],'Value',1);
                  set(h.savebutton,'Enable','off','BackgroundColor',ud.blue_enable_back,'ForegroundColor',ud.blue_enable_for)
                  set([h.pushzoomout ; h.savebutton ; ...
                      h.invertEKGpushbutton ; h.RRmarkerstogglebutton ; h.RRzoomtogglebutton; h.AbnormalRpeaks_togglebutton; h.Fs_edit],'Enable','on')

              else
                  Ts = M(1);
                  nM = length(M);

                  tM=(0:(nM-2))*Ts;
                  tIBI = 60./M(2:nM);

                  % interpolate
                  Ri = Ts*10;
                  tIBI2 = interp(tIBI,Ri);
                  tM2 = (0:length(tIBI2)-1)*Ts/Ri;

                  i=1; tR(i) = 0;
                  iM =2;
                  while iM<nM-1
                      if tIBI(iM)>=Ts %duplicate beat measure, need to skip
                          iM = iM +1;
                      elseif tIBI(iM)+tIBI(iM-1) >= Ts & tR(i)+ tIBI(iM)> tM(iM-1)
                          tR(i+1) = tR(i) + tIBI(iM);
                          iM = iM +1;
                          i = i+ 1;
                      else %skipped beat measure
                          tR2 = tR(i);
                          while tR2 <= tM(iM) - tIBI(iM)
                              rg1 = find(tM2>tR(i));
                              rg = rg1(1:Ri);
                              DtRv = abs((tR(i)+tIBI2(rg))-tM2);
                              nR2 = find(DtRv == min(DtRv)); nR2 = nR2(1);
                              tR2 = tR(i)+ tIBI2(nR2);
                              if tR2 <= tM(iM) - tIBI(iM)
                                  tR(i+1) = tR2;
                                  i = i + 1;
                              end
                          end
                      end
                  end
              end




              All_Signals_View_Fcn(1)
          else

              loadfile(path_data, FileName_List)
              ud = get(h.figure1,'userdata');

              %%%%%%%%%%% Load ECG RR data if asked for %%%%%%%%%%%%%%%%%%
              %button_loadECG = questdlg('Do you wish to load ECG data? ','Loading ECG Data','Yes','No','No');

              if isequal(button_loadECG, 'YesYes')
                  if isfield(ud,'PathNameLoad') & isfield(ud,'fileNameString')
                      if exist(fullfile(ud.PathNameLoad , ud.fileNameString))
                            path_ECG = [ ud.PathNameLoad '\'];
                      end
                  else % ask where the ECG file is 
                      uiwait(msgbox(sprintf('Please choose the folder where the ECG data files are located\n'),'Modal'))
                      path_ECG = [uigetdir(path_data,'Data File Directory') '\' ];
                      load handel
                      y_handel = y(1:15800); %y(33501:44500)'.*sin((1:11000)*pi/12000); %
                      Fs_handel = Fs;
                  end
                  % Check that the ECG file exists
                  if isfield(ud,'fileNameString')
                      if ~exist(fullfile(path_ECG , ud.fileNameString))
                          Ermsg1 = 'No ECG File';
                      else
                          Ermsg1 = 'File loaded';
                      end
                  else
                      Ermsg1 = 'No ECG File';
                  end
                  % if ud.fileNameString doesn't exist, try to find one based on FileName
                  if strcmp(Ermsg1,'No ECG File')
                      n2 = max(findstr(FileName_List,'_all'));
                      ud.fileNameString = [FileName_List(1:n2) 'ECG.txt'];
                      if exist([path_ECG ud.fileNameString])>0
                          Ermsg1 = 'File loaded';
                      end
                  end
                  % Load ECG file if it exists
                  if strcmp(Ermsg1,'File loaded')

                      load_ECG_CreateFcn(path_ECG,ud.fileNameString)
                      %ndir = findstr(ud.fullFileNameECG, ud.fileNameString);
                      loadRRdata_CreateFcn(path_ECG,ud.fileNameString)

                      udnew = get(h.figure1,'userdata');
                      if ~strcmp([path_ECG ud.fileNameString], udnew.fullFileNameECG)
                          Ermsg1 = 'File loaded - Original ECG File different than what was loaded';
                      end
                      ud.fullFileNameECG = udnew.fullFileNameECG;
                      ud.ECGsig = udnew.ECGsig;
                      ud.tsig = udnew.tsig;

                      ud.nR = udnew.nR;
                      ud.tR = udnew.tR;
                      set(h.figure1,'userdata',ud);
                      clear udnew
                      Compute_EDR(1)

                  end
              elseif isequal(button_loadECG, 'No')
                  All_Signals_View_Fcn(1)
              end


          end
          set(h.figure1,'userdata',ud);

          %           %%%%%%%%%%% Load ECG data if asked for %%%%%%%%%%%%%%%%%%
          %           ud = get(h.figure1,'userdata');
          %           if isequal(button_loadECG, 'Yes')
          %               load_ECG_CreateFcn(path_ECG,ud.fileNameString)
          %               %ndir = findstr(ud.fullFileNameECG, ud.fileNameString);
          %               loadRRdata_CreateFcn(path_ECG,ud.fileNameString)
          %               udnew = get(h.figure1,'userdata');
          %               if ~strcmp([path_ECG ud.fileNameString], udnew.fullFileNameECG)
          %                   Ermsg1 = 'File loaded - Original ECG File different than what was loaded';
          %               end
          %               ud.fullFileNameECG = udnew.fullFileNameECG;
          %               ud.ECGsig = udnew.ECGsig;
          %               ud.tsig = udnew.tsig;
          %               ud.nR = udnew.nR;
          %               ud.tR = udnew.tR;
          %               clear udnew
          %           else
          %               All_Signals_View_Fcn(1)
          %           end
          set(h.figure1,'userdata',ud);

          Update_axes1([ud.tmin ud.tmax min(ud.ECGsig) max(ud.ECGsig)])
          Update_IBIplot;
          % Switch to all signal view
          %All_Signals_View_Fcn(1)
          %Update_axes1(axis(h.axes1))
      end
  end
  
  % --- Executes on button press in NextFile.
function NextFile_Callback(hObject, eventdata, handles)
% hObject    handle to NextFile (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of NextFile
  

  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  %%%%%%%%%%                                                        %%%%%%%%%%
  %%%%%%%%%%                Load Function                           %%%%%%%%%%
  %%%%%%%%%%                                                        %%%%%%%%%%
  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

  
  function load_CreateFcn
  % Callback code for pushbutton with Tag "load"
  %hObject
  % Load file of raw data
  % this can assume various file and data formats
  % call onto loadfile function to load data

  h = guidata(gcf);
  ud = get(h.figure1,'userdata');
  ud.automatic = 0; %set ud.automatic to 0 by default
  
  matlab_wd = pwd;
  if exist(ud.PathNameLoad)
        cd(ud.PathNameLoad);
  end

  [f,p]=uigetfile({'*ECG*.*','ECG Files (*.ECG)';'*.txt;*.dat;*.csv;*.V*','Text, Data, CSV or Psylab File (*.txt,*.dat,*.csv,*.V*)'...
          ;'*.mat','Matlab File (*.mat)';'*.V*','Psylab File';'*.txt*','RRtext File'});
%   [f,p]=uigetfile({'*ECG*','ECG Files';'*.txt;*.dat;*.V*','Text, Data or Psylab File (*.txt,*.dat,*.V*)'...
%           ;'*ECG*','ANSAR files';'*.mat','Matlab File (*.mat)';'*.V*','Psylab File'});
  cd(matlab_wd)
  if ~isequal(f,0) && ~isempty(f)
    
      ud.tmin = 0;
      ud.tmax = 1;
      ud.nR = [];
      set(h.figure1,'userdata',ud);
      
      %load parameters values 
      LoadParameters_Fcn 
      
      Clear_Plots
      Initialize_all
      loadfile(p,f)
  end
  
  
  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  function loadfile(p,f)
  % call onto 

  h = guidata(gcf);
  fig = figure(h.figure1);
  ha1 = h.axes1;
  matlab_wd = pwd;
  ud = get(h.figure1,'userdata');
 
  set(h.figure1,'pointer','watch')

  if ~isequal(f,0) && ~isempty(f)
      
      load_ECG_CreateFcn(p,f)
      
      ud1 = get(ha1,'userdata');
      ud = get(h.figure1,'userdata');
      
      set(h.savebutton,'Enable','off','BackgroundColor',ud.blue_enable_back,'ForegroundColor',ud.blue_enable_for)
      
      %'OK2'
      %pause
      
      % DA --------
      %load RR data if not already loaded 
      if ud.ECGsig(1)~=0 & isempty(ud.nR) 
          loadRRdata_CreateFcn(ud.PathNameLoad, ud.fileNameString)
          
      else

          if  ~isempty(ud.nR)
              % checking that saved R data samples are actually maxima
              % if not assumes that ECG was inverted before R data were found
              RisMax = 0;
              for nR1 = ud.nR(3:6)' % check that those R samples are maxima
                  RisMax = RisMax + (ud.ECGsig(nR1+1) <= ud.ECGsig(nR1) & ud.ECGsig(nR1-1) <= ud.ECGsig(nR1));
              end
              for nR1 = ud.nR(3:6)'+1 % sometimes they are shifted by 1 sample
                  RisMax = RisMax + (ud.ECGsig(nR1+1) <= ud.ECGsig(nR1) & ud.ECGsig(nR1-1) <= ud.ECGsig(nR1));
              end
              for nR1 = ud.nR(3:6)'-1 % check that those R samples are maxima
                  RisMax = RisMax + (ud.ECGsig(nR1+1) <= ud.ECGsig(nR1) & ud.ECGsig(nR1-1) <= ud.ECGsig(nR1));
              end


              if sum(RisMax)<3 % if R samples are not maxima for at least 2 of the 4 samples
                  % check that they are if ECG is inverted
                  for nR1 = ud.nR(3:6)'
                      RisMax = RisMax + (-ud.ECGsig(nR1+1) <= -ud.ECGsig(nR1) & -ud.ECGsig(nR1-1) <= -ud.ECGsig(nR1));
                  end
                  if sum(RisMax)>=3 % if they are, invert ECG
                      ud.ECGsig = -ud.ECGsig;
                      disp('----------------- INVERTED EKG')
                      set(h.figure1,'userdata',ud);
                  elseif ud.ECGfiltered(1) == 'y'  % if R data sample are not maxima either ways
                      % recompute R peaks!
                      disp(' %%%%% ECG and RR data do not match!!!  %%%%%')
                      %[ud.nR, RRout, ud.tR] = findRpeaks(ud.ECGsig, ud.tsig, ud.Fs, ud.RRmin, 4, ud.nR);
                  end
              end
          end
          
          set(h.RRzoomtogglebutton,'Enable','on')
          set([h.RRmarkerstogglebutton h.IBI_togglebutton],'Value',1);
          set(h.savebutton,'Enable','off','BackgroundColor',ud.blue_enable_back,'ForegroundColor',ud.blue_enable_for)
          axes(h.axes3); axis on;
          axis([ud.tmin ud.tmax 0 1]);
          QuitSignalEditing;
          Update_IBIplot;
          
      end          
      % DA --------
      %if length(ud.tsig)<2
          %DA --------
      %load RESP and SCL data if not already loaded and can guess file
      %names
      if isempty(ud.RESPsig) & isempty(strfind(ud.fileNameString,'ECG'))
          mf = strfind(ud.fileNameString,'ECG');
          m = length(ud.fileNameString);
          filename_RESP = [ud.fileNameString(1:mf-1) 'RESP' ud.fileNameString(mf+3:m)];
          filename_SCL = [ud.fileNameString(1:mf-1) 'SCL2' ud.fileNameString(mf+3:m)];
          
          %%%%%%%%%%%%%%%%%%%% Ask if one wants to load RESP and SCL if they exist
          if exist([ud.PathNameLoad filename_RESP],'file') || exist([ud.PathNameLoad filename_SCL],'file')
              % Didier let's load it every time; no need to ask
              if ud.automatic == 0
                  % Didier let's load it every time; no need to ask
                  %button = questdlg('Do you want to load the Skin Conductance and/or Respiration Signals?','Exporting Results','Yes','No','Yes');
                  button = 'Yes';
              else
                  button = 'Yes';
              end
              
              switch button
                  case 'Yes'
                      fprintf('loading SCL & RESP data\n');
                      %hb = MsgBox2('Loading Respiration data...'); pause(1)
                      load_RESP_CreateFcn(p,filename_RESP)
                      %delete(hb); %figure(fig)
                      %hb = MsgBox2('Loading and Processing Skin Conductance data...'); pause(1)
                      load_SCL_CreateFcn(p,filename_SCL)
                      %delete(hb); %figure(fig)
                  otherwise
                      fprintf('RESP and SCL data not loaded \n')
                      
              end
          end
          %DA-------
          
      end

    

      %DA-----------
%       Update_PatchSample;
       Update_PatchSignal;
%       QuitSignalEditing;
%       ud = get(h.figure1,'userdata');
%       if ud.Nber_of_Samples ~= 0
%           set([ud.SamplePushbuttonHandle;ud.SampleEditHandle],'Enable','on');
%           Update_SamplePatchesMeasures
%       end
       if ud.Nber_of_Samples ~= 0
          set([ud.SamplePushbuttonHandle;ud.SampleEditHandle],'Enable','on');
       end     
      
  else
      fprintf('<no file selected>');
  end
  figure(fig)
  cd(ud.wd)  
  pause(2)
  set(h.figure1,'pointer','arrow')    
  
  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

  function getContentsOfFile_all
  % called by load_ECG_CreateFcn function
  % Can load various files format and raw or processed data format
  % If raw data, it generally assumes that data column  are organized as
  % Time, ECG, [Respiration, Skin conductance]
  
  h = guidata(gcf);
  ud = get(h.figure1,'userdata');
  fig = figure(h.figure1);
  
  %   ud1 = get(h.figure1,'userdata');
  Fs = [];
  filename = ud.fullFileName;
  nf = length(filename);
  
  
  
  if isempty(ud.fullFileName)
      fprintf('<no file selected>');
      %DA---------------
      
      %elseif strcmp(filename(nf-2:nf),'mat')
      
      
  elseif strcmp(filename(nf-7:nf),'_all.mat')
      % '_all_mat' is the matlab file created when "saving" data via
      % SignalBrowser. It contains everything except original ECG file data
      %DA -----------
      whosString = ['w=whos(''-file'',''' ud.fullFileName ''');'];
      err=0;
      eval(whosString,'err=1;')
      fprintf('OK mat file -----------\n')
      if err
          fprintf('<file not found>');    
      else
          if length(w) == 0
              fprintf('<file empty>');
          end
      end     
      %DA---------------
      load(ud.fullFileName);
      udname = fieldnames(udsave);
      n = length(udname);
      udold = ud;
      for i = 1:n
          % transfer anything from udsave to ud which is not handle
          if and(isempty(findstr(udname{i},'andle')),isempty(findstr(udname{i},'filemenu')))
              %eval(['ud.' udname{i} '= udsave.' udname{i} ';']);
              ud = setfield(ud, udname{i}, getfield(udsave,udname{i}))
              %fprintf('n=%d (out of %d) %s \n',i,n,udname{i})
                
          end
      end
      % save ECG location
      nf = length(ud.fullFileName);
      if ~strcmp(ud.fullFileName(nf-3:nf),'.mat')
        ud.fullFileNameECG = ud.fullFileName;
      else
          ud.fullFileNameECG = [];
      end
      % reverse file path when loading mat file
      ud.wd = udold.wd;
      ud.automatic = udold.automatic;
      ud.fullFileName = udold.fullFileName;
      ud.PathNameLoad = udold.PathNameLoad;
      ud.PathNameExport = udold.PathNameExport;
      ud.PathNameExportHRV = udold.PathNameExportHRV;
      ud.FileNameExportHRV = udold.FileNameExportHRV;
      ud.FileNameParam = udold.FileNameParam;
      ud.PathNameParam = udold.PathNameParam;
      ud.wd = udold.wd;
      %ud = udsave;
      % load ECG data if it exists (original path to the file is still
      % valid)
      if exist(fullfile(ud.PathNameLoad,ud.fileNameString),'file')  
          
          load_ECG_CreateFcn(ud.PathNameLoad,ud.fileNameString)
          % only keep ECG data
          udnew = get(h.figure1,'userdata');
%           if ~strcmp(fullfile(ud.PathNameLoad,ud.fileNameString), udnew.fullFileNameECG)
%               Ermsg1 = 'File loaded - Original ECG File different than what was loaded';
%           end
          if isfield(udnew, 'fullFileNameECG')
              ud.fullFileNameECG = udnew.fullFileNameECG;
          end
          ud.ECGsig = udnew.ECGsig;
          ud.tsig = udnew.tsig;
      else
          fprintf('Original ECG file not found and not loaded. Create dummy ECG data instead');  
          ud.tsig = [0:1/ud.Fs:ud.tmax]';
          ud.ECGsig = [0:1/ud.Fs:ud.tmax]'/ud.tmax;
          ud.ECGfil = ud.ECGsig;
          ud.ECGfiltered = 'yes';
      end
      if isempty(ud.SCLsig_nSCR) & ~isempty(ud.SCLsig)
          [N_SCR, ud.SCLsig_nSCR] = Compute_SCR(ud.tSCLsig,ud.SCLsig);
      end
      
      set(h.figure1,'pointer','arrow')
      set(h.figure1,'userdata',ud);
      
      if ~isempty(ud.RESPsig)
          set(h.RESP_togglebutton,'Enable','on');
          set(h.RESP_togglebutton,'Value',1);
          Update_RESPplot
      end
      if ~isempty(ud.SCLsig)
          set(h.SCL_togglebutton,'Enable','on');
          set(h.SCL_togglebutton,'Value',1);
          Update_SCLplot
      end
      if ~isempty(ud.EDRsig)
          set(h.EDR_togglebutton,'Enable','on')
          set(h.EDR_togglebutton,'Value',1);
          Update_EDRplot
      end
      
  else % load raw data (txt, CSV, or mat files)
      
      %end;
      
      %if strcmp(filename(nf-2:nf),'mat')
      %DA---------------
      whosString = ['w=whos(''-file'',''' ud.fullFileName ''');'];
      err=0;
      eval(whosString,'err=1;')
      fprintf('OK mat file -----------\n')
      if err
          fprintf('<file not found>');    
      else
          if length(w) == 0
              sprintf('<file empty>');
          end
      end           

      if strcmp(filename(nf-2:nf),'mat')
          set(h.figure1,'pointer','watch')
          if exist(filename(1:nf-3) + "hea",'file')
              % This is a WFDB Physionet format. Using redmat to read files
              [tsig,ECGsig,Fs,siginfo] = rdmat(filename(1:nf-4));


          elseif length(w)==2   %assumes that there is one vector with EKG signal, Fs the sampling frequency
              if (max(w(1).size)==1 || max(w(2).size)==1)
                  % load Fs
                  wn1 = find(max(w.size) == 1);
                  load(ud.fullFileName, w(wn1).name);
                  Fs = eval(w(wn1).name);
                  % load EKG signal   
                  wn = find(max(w.size) == max(max(w.size))); %select the larger vector
                  load(ud.fullFileName, w(wn).name);
                  ECGsig = eval(w(wn).name);
                  % build time vector starting t = 0
                  tsig = 0:Fs:((length(ECGsig)-1)*Fs);
                  
              elseif max(w(1).size) == max(w(2).size) %assumes that there is two vectors storing both time and EKG signal
                  % load time
                  load(ud.fullFileName, w(1).name);
                  tsig = eval(w(1).name);
                  % load EKG signal   
                  load(ud.fullFileName, w(2).name);
                  ECGsig = eval(w(2).name);
              elseif min(w(1).size)==2 || min(w(2).size)==2
                  if min(w(1).size)==2 ; wn=1; else wn =2; end;
                  % load EKG signal   
                  load(ud.fullFileName, w(wn).name);
                  ECGsig = eval(w(wn).name);
                  % build time vector starting t = 0
                  tsig = ECGsig(:,1);
                  ECGsig = ECGsig(:,2); 
              end
    
          elseif length(w) == 1 %assumes that there is one matrix storing both time and EKG signal
              % load EKG signal   
              load(ud.fullFileName, w(1).name);
              ECGsig = eval(w(1).name);
              % build time vector starting t = 0
              tsig = ECGsig(:,1);
              ECGsig = ECGsig(:,2); 
          end
          %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    
          %%%%%%%%%%%           Text Format                     %%%%%%%%%%%%%%%%%%
          %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 
          
      else %load text or data file
          set(h.figure1,'pointer','watch')
          M = importdata(filename,' ');
          [r c] = size(M);
          
          %       [m c] =size(M.Data);
          %       [m1 c1] = size(M.text);
          %       DataName = M.colheaders;
          
          
          %fprintf('Data1 = %f, Data2 =%f',FileData(1,1),FileData(2,1))
          %    m = length(FileData);
          if r == 1 | c == 5 | iscell(M(1)) % structure | assumes that it is all Data (ReikiStress with ECG, Resp, ...
              %
              %fields = fieldnames(M);
              if r == 1 | iscell(M(1)) % structure
                  
%                   if isnan(M.data) % change delimiter
%                       M = importdata(filename);
%                   end
                  M = importdata(filename);
                  FileData = M.data;    
                  try
                      Fs = str2num(M.textdata);
                      Fs1 = Fs(1);
                  catch 
                      Fs1 = '';
                  end
                  m1 = 1; 
              else % a matrix
                  FileData = M;
                  if abs((FileData(1,2)-FileData(1,2))/FileData(2,2)) > 0.1
                      m1 = 2; % first number is a frequency
                      Fs1 = FileData(1);
                  else
                      m1 = 1;
                  end
                  
              end
              clear M;
              [m c] = size(FileData);
              ECGsig = FileData(m1:m,2);
              tsig = FileData(m1:m,1);
              Fs = 1/(tsig(2) - tsig(1));
              tsig = (0:m-1)'/Fs;
              fprintf('Fs = %f, Fs from time: %f \n',Fs1,Fs);  
              
              %%%%%%% Didier 3.1 %%%%%%%%%%%%%%
              %%%%%%% Offer the possibility of loading Resp Signals
              if c >= 3 %rest of data may be Resp and/or SCL signals
                  if FileData(m1:m,3) == 0 | FileData(m1:m,3) == 1 ;
                      fprintf('3rd Column is not Resp Signals \n');
                      %check if there is another file
                      set(h.figure1,'userdata',ud);
                      m1 = strfind(ud.fileNameString,',');
                      m2 = strfind(ud.fileNameString,'ECG ');
                      if isempty(m1)
                          FileName_RESP = ud.fileNameString([(1:m2-1) (m2+4:length(ud.fileNameString))]);
                      else
                          FileName_RESP = ud.fileNameString([(1:m1-1) ' ' (m2+4:length(ud.fileNameString))]);
                      end
                      %load_RESP_CreateFcn(ud.PathNameLoad,FileName_RESP);
                      ud = get(h.figure1,'userdata');
                  else
                      %%%%%%%%%%%%%%%%%%% Load RESP Signal
                      ud.tRESPsig = (tsig(1):1/ud.Fs_interp:tsig(m))';
                      RESPsig = FileData(m1:m,3);
                      RESPsig = interp1(tsig, RESPsig,ud.tRESPsig,'spline');

                      % low pass filter at 1/30Hz - 1Hz
                      fp1 = 1/30; fp2 = 1;
                      fp1 = 0.05; fp2 = 0.5;

                      % --------- Didier v4.4 ----------
%                       [b,a]=butter(4,2*ud.RESPfilter_freq./ud.Fs_interp);
%                       % filter the signal
%                       RESPsig = filter(b,a,RESPsig);
                      [b,a]=butter(2,2*ud.RESPfilter_freq./ud.Fs_interp);
                      % filter the signal
                      RESPsig = filtfilt(b,a,RESPsig);
                      % ------------- v4.4 ------------------
                      % normalize and center
                      RESPsig = RESPsig - mean(RESPsig);
                      ud.RESPsig = RESPsig/std(RESPsig);

                      ud.FsRESP = Fs;


                      if ~isempty(ud.hRESPsig)
                          delete(ud.hRESPsig);
                          ud.hRESPsig = [];
                      end
                      figure(h.figure1);

                      %------ plot RESP results
                      axes(h.axes3);
                      %axis([ud.tmin ud.tmax 0 1]);

                      set(h.figure1,'userdata',ud);

                      Update_RESPplot
                      set(h.RESP_togglebutton,'Enable','on')
                      set(h.RESP_togglebutton,'Value',1);

                      ud = get(h.figure1,'userdata');
                  end % end load resp signals

                  if c >= 4
                      %%%%%%%%%%%%%%%%%%%  LOAD SCL   %%%%%%%%%%%%%%%%%%%%%%
                      ud.tSCLsig = ud.tRESPsig;

                      if c>=5 % assumes that SCl is registred onto 2 channels
                               % there is something wrong here
                               % SCL1 is unused???
                      
                          SCL1 = FileData(m1:m,4);
                          SCL2 = FileData(m1:m,5);
                          %fprintf('SCL: %0.1f %0.1f',min(SCL2),max(SCL2))
                          % Merge SCL1 & SCL2

                          SCL1_unwrap = unwrap(SCL1,4); % unwrap
                          SCL1u = SCL1_unwrap;
                          SCL1 = SCL1;
                          SCL2 = (SCL2+5)*10; %calibrated to 0-100uS for -5+5 volts range
                          SCL = SCL2;
                          
                      else
                          SCL = FileData(m1:m,4);
                      end
                      
                      SCLsig = interp1(tsig,SCL ,ud.tSCLsig,'spline');
                      % low pass filter at 1/30Hz - 1Hz
                      fp1 = 1/30; fp2 = 1;
                      fp1 = 1;
                      % --------- Didier v4.4 ----------
                      % %[b,a]=butter(4,2*[fp1 fp2]./ud.Fs_interp);
                      %[b,a]=butter(4, 2*ud.SCLfilter_freq./ud.Fs_interp);
                      % % filter the signal
                      %ud.SCLsig = filter(b,SCLsig);
                      %[b,a]=butter(2,2*[fp1 fp2]./ud.Fs_interp);
                      [b,a]=butter(2, 2*ud.SCLfilter_freq./ud.Fs_interp);
                      % filter the signal
                      ud.SCLsig = filtfilt(b,a,SCLsig);
                     % --------- v4.4 ----------

                      if isempty(Fs)
                          ud.FsSCL = x_sig(2)-x_sig(1);
                      else
                          ud.FsSCL = Fs;
                      end
                      set(h.figure1,'userdata',ud);


                      if ~isempty(ud.hSCLsig)
                          delete(ud.hSCLsig);
                          ud.hSCLsig = [];
                      end
                      figure(h.figure1);

                      %------ plot SCL results
                      axes(h.axes3);
                      %axis([ud.tmin ud.tmax 0 1]);

                      set(h.figure1,'userdata',ud);

                      Update_SCLplot

                      %                 for idx = [4 ud.idxRR]
                      %                     set(ud.filemenu_handles(idx),'Enable','on');
                      %                 end
                      set(h.SCL_togglebutton,'Enable','on')
                      set(h.SCL_togglebutton,'Value',1);

                      clear FileData


                  end %loading SCL

              end
            %%%%%%%%%%%%%%%% Didier %%%%%%%%%%%%%%
          elseif c == 2 
              %assumes that it is time + ECG
              FileData = M;
              if abs((FileData(1,2)-FileData(1,2))/FileData(2,2)) > 0.1
                  r1 = 2;
              else
                  r1 = 1;
              end
              ECGsig = FileData(r1:r,2);
              tsig = FileData(r1:r,1);
              Fs = 1/(tsig(2) - tsig(1));
              %tsig = (0:1:r-2)'/Fs; 
              %FileData(2,2)
              
          elseif c == 1
              FileData = M;
              %             ud.Samplet1 = [10*60-30-time_window  15*60-60-time_window ]; %[390s  660s] - [390 600]
              %             ud.Samplet2 = [10*60-30  15*60-60]; %[570s 840s] - [570 780]
              if isempty(ud.Samplet1)
                  time_window = 3*60; %3 minutes
                  ud.Samplet1 = [10*60-30-time_window  11*60 ]; %[[390 660]
                  ud.Samplet2 = [10*60-30  11*60+time_window ]; %[570 840]
                  ud.Nber_of_Samples = 2;
                  ud.Sample_Nber = 1;
                  ud.SampleLabel = {'Pre','Post'};
              end
              
              if abs((FileData(1)-FileData(2))/FileData(2)) > 0.1
                  %'ok1'
                  Fs = FileData(1);
                  ECGsig = FileData(2:r);
                  tsig = (0:1:r-2)'/Fs;    
              else
                  %'ok2'
                  % check if there is any *.smr (Spike) file anywhere 
                  fe = exist(sprintf('%s.smr',filename(1:nf-4)),'file');
                  disp(sprintf('%s.smr',filename(1:nf-4)))
                  if fe ==0 %err
                      % the *.smr file is not found
                      % Fs = 1000;
                      % the file was created by Psylab
                      Fs = 1002;
                      disp('Psylab Fs = 1002 \n')
                      
                  else
                      % file was created by Spike  
                      Fs = 1000;
                      disp('Spike Fs = 1000 \n')
                  end     
                  
                  ECGsig = FileData(1:r); ECGsig = (ECGsig-mean(ECGsig)); %ECGsig = ECGsig/1000; 
                  ECGsig = ECGsig/1000; %convert to mV if it is in uV (looks like the inverse is done)
                  tsig = (0:1:r-1)'/Fs; 
              end
          end
          set(h.figure1,'pointer','arrow')
          %       figure(1);
          %       plot(tsig,ECGsig)
          figure(fig)
      end
      set(h.figure1,'pointer','arrow')
      
      
      m = length(tsig);
      
      
      %%%%%%%%%%%%% Didier 8/10/2009  %%%%%%%%%%%%%%
      %Set NaN values to 0
      %There was a mistake here. isnan values set to 0 doing it anything? Didier 4.1 
      % ECGsig(isnan(ECGsig)) = 0;
%       nh_nan = find(isnan(ECGsig)); 
%       ud.ECGsig(nh_nan) = 0;
      %%%%%%%%%%%%% Didier %%%%%%%%%%%%%%%%%%%%%%%

      ud.tsig = tsig(:);
      ud.ECGsig = ECGsig(:); 
      if isempty(Fs)
          ud.Fs = 1/(tsig(2)-tsig(1));
      else
          ud.Fs = Fs;
      end
      
      
      set(h.Fs_edit,'String',num2str(ud.Fs) );
      
      ud.tR = [];
      ud.nR = [];
      ud.tRfil = [];
      ud.nRfil = [];
      ud.tR2 = [];
      ud.nR2 = [];
      ud.nR2offset = [];
      ud.tR2offset = [];
      
      
      ud.FileNameExport = '';
      ud.PathNameExport = '';
      % DA ---------
  end
  % DA ---------
  
  set(h.figure1,'userdata',ud);
  %ud
  
  function MsgBox_text(message)
  
  h = guidata(gcf);
  fig = figure(h.figure1);
  %message = get(h.MsgBox_text,'string');
  %Vis = get(h.MsgBox_text,'Visible');
  if ~strcmp(message,'Off')
      set(h.MsgBox_text,'string',message,'visible','on')
      
%       while( strcmp(get(h.figure1,'pointer'),'watch') )
%           for i=0:3
%               set(h.MsgBox_text,'string',[repmat(' ',1,i) message repmat('.',1,i)] ); pause(1)
%               if ~strcmp(get(h.figure1,'pointer'),'watch')
%                   break
%               end
%           end
%       end
  else
      set(h.MsgBox_text,'visible','off')
  end
  
  
  
  
  
  
  
 %%%%%%%%% Load ECGdata %%%%%%%%%%%% 
 function load_ECG_CreateFcn(p,f)  
  
 
  h = guidata(gcf);
  fig = figure(h.figure1);
  ha1 = h.axes1;
  matlab_wd = pwd;
  ud = get(h.figure1,'userdata');

  %hb = MsgBox2('Loading ECG data...'); pause(0.1)
  MsgBox_text(sprintf('\n\nLoading ECG data...'))

  disp('Loading ECG Data')
  if ~isequal(f,0) && ~isempty(f)
      
      ud.fullFileName = fullfile(p,f);
      ud.fileNameString = f;
      ud.PathNameLoad = p;
      if isempty(ud.PathNameExport) 
          ud.PathNameExport = p;
      end
      set(h.text2,'string',sprintf('File Name: %s',fullfile(p,f) ));
      
      set(h.figure1,'userdata',ud);

      
      getContentsOfFile_all
      
      %Retrieve current directory
      cd(ud.wd)   
      
      ud = get(h.figure1,'userdata');
      ud1 =  get(ha1,'userdata');
      
      set([ud.file_save_handles;ud.filemenu_retrieveRpeaks_handles;ud.filemenu_Export],'Enable','on');
      set(ud.file_saveClearRR_handles,'Enable','off'); %not yet retrieved Rpeaks
      
      set(h.RRmarkerstogglebutton,'Value',0); 
      set(h.RRzoomtogglebutton,'Enable','off','Value',0);
      set([h.pushzoomout; h.AbnormalRpeaks_togglebutton ; h.invertEKGpushbutton ; h.RRmarkerstogglebutton; h.Fs_edit],'Enable','on')
      
      ud.tmin = min(ud.tsig);
      ud.tmax = max(ud.tsig);
      % DA --------
      % make sure we have actual ECG data and not dummy ECG data before
      % filtering the data
      if ~(ud.ECGsig(1)==0 && ud.ECGsig(end)==1) %DA --------
          
          set(h.figure1,'userdata',ud);
          %load parameters values if there is no parameters value loaded already 
          % such as when loading raw data
          if ~isfield(ud,'ECGfilter_freq')
              LoadParameters_Fcn(ud.FileNameParam, ud.PathNameParam);
          end
          ud = get(h.figure1,'userdata');
          
          % filter ECG
          % build the band-pass filter 
          [b,a]=butter(2,2*max(ud.ECGfilter_freq)/ud.Fs);
          if length(ud.ECGfilter_freq) == 2 
             [b,a]=butter(2,2*ud.ECGfilter_freq/ud.Fs);
          end
          % filter the signal
          ECGfil=filtfilt(b,a,ud.ECGsig);
          %----------- v4.4 --------------
          
          % Filtering ECG signal...
          ud.ECGsig = ECGfil;
          ud.ECGfiltered = 'yes';
          
          
          % DA --------
      else
          fprintf('\n \n Not Loading ECG Data \n \n'); %beep;
      end
      % DA --------
      
      ampECG = max(ud.ECGsig)-min(ud.ECGsig);
      ud1.ECGmin = min(ud.ECGsig)-0.1*ampECG;
      ud1.ECGmax = max(ud.ECGsig)+0.1*ampECG;
      
      set(h.axes1,'userdata',ud1);
      set(h.figure1,'userdata',ud);
      
      % update square plot on axes2
      Update_axes2
      
      %Update_axes1
      axisnew = [ud.tmin ud.tmax ud1.ECGmin ud1.ECGmax];
      Update_axes1(axisnew);
      
      set(h.savebutton,'Enable','off','BackgroundColor',ud.blue_enable_back,'ForegroundColor',ud.blue_enable_for)
      
      Update_PatchSignal;
      if ud.Nber_of_Samples ~= 0
          set([ud.SamplePushbuttonHandle;ud.SampleEditHandle],'Enable','on');
      end
      
  else
      disp('<no file selected>');
  end
  %delete(hb)
  MsgBox_text('Off')
  figure(fig)
  cd(ud.wd)  
  pause(0.5)
  
  
 %%%%%%%%% Load RRdata %%%%%%%%%%%% 
 function loadRRdata_CreateFcn(p,f)
 % Callback code for pushbutton with Tag "Load R peak data"
 %hObject
 
 
 disp('loadRRdata')
 
 h = guidata(gcf);
 ha1 = h.axes1;
 matlab_wd = pwd;
 ud = get(h.figure1,'userdata');
 


if nargin == 0
     if ~isempty(ud.PathNameExport)
         pathnameload = ud.PathNameExport;
     else
         pathnameload = ud.PathNameLoad;
     end
else
    pathnameload = p; 
end

if nargin == 0 && ~isempty(ud.FileNameExport) 
    DefaultName = ud.FileNameExport;
else
    f = ud.fileNameString; 
    mf = length(f);
    %%%%%%%%%%%%% Didier v3.2 %%%%%%%%%%%%%%%%%%
    % solve issue with file that does not have extension (ANX files)
    mf1 = mf - 6 + find(f(mf-5:mf) == '.',1,'last');
    if ~isempty(mf1)
        mf1 = mf1-1;
    else
        mf1 = mf;
    end
    %     mf1 = max(find(f == '.'))-1;
    
    %%%%%%%%%%%%% Didier %%%%%%%%%%%%%%%%%%
    DefaultName = sprintf('%s_RR.mat',ud.fileNameString(1:mf1));
end


%%%%%%%%%%%%  Didier v3.3 %%%%%%%%%%%%%%%%%%%%%%%%%%
% error with code, not testing existence of DefaultName in the Pathnameload
% folder


%  whosString = ['w=whos(''-file'',''' DefaultName ''');'];
%  err=0;
%  eval(whosString,'err=1;')
%  if err 
%      if nargin == 2
%          filenameload = 0;
%      else
%          cd(pathnameload)
%          sprintf('<file not found>'); 
%          [filenameload,pathnameload]=uigetfile({'*.mat','Matlab File (*.mat)'},'Couldn''t find a matching R peaks file. Please select a R peaks file',DefaultName);
%          cd(ud.wd)    
%      end    
%  else
%      filenameload = DefaultName;
%  end


 if ~exist([pathnameload DefaultName],'file')
     if nargin == 2
         filenameload = 0;
     else
         cd(pathnameload)
         fprintf('<file not found>'); 
         [filenameload,pathnameload]=uigetfile({'*.mat','Matlab File (*.mat)'},'Couldn''t find a matching R peaks file. Please select a R peaks file',DefaultName);
         cd(ud.wd)    
     end    
 else
     filenameload = DefaultName;
 end
 
 %%%%%%%%%%%%% Didier v3.3  %%%%%%%%%%%%%%%%
 
 if isequal(filenameload,0) || isequal(pathnameload,0)
     disp('User pressed cancel Or No RR file was found')
 else
     tR = []; nR = []; tRfil = []; nRfil = []; ECGfil = []; Delay = 0;
     set(h.figure1,'pointer','watch')
     %hb = MsgBox2('Loading RR data...'); pause(1)
     MsgBox_text(sprintf('\n\nLoading RR data...'))

     
     
     fprintf('%s\n',[pathnameload filenameload])
     load([pathnameload filenameload]);
     %delete(hb); 
     MsgBox_text('Off')
     
     if ~isempty(tR) && ~isempty(nR)
         fprintf('Loading RR peaks data \n');
         
         ud.tR = tR; ud.nR = nR; ud.nRout = [];
         try
             ud.Signalt1 = Signalt1;
             ud.Signalt2 = Signalt2;
             ud.Nber_of_Signals = Nber_of_Signals;
             ud.Signal_Nber = 1;
         catch
             fprintf('no Patch Signals \n');
         end
         % checking that saved R data samples are actually maxima
         % if not assumes that ECG was inverted before R data were found
         RisMax = 0;
         for nR1 = ud.nR(3:6)' % check that those R samples are maxima
             RisMax = RisMax + (ud.ECGsig(nR1+1) <= ud.ECGsig(nR1) & ud.ECGsig(nR1-1) <= ud.ECGsig(nR1));
         end
         if sum(RisMax)<3 % if R samples are not maxima for at least 2 of the 4 samples
                          % check that they are if ECG is inverted
             for nR1 = ud.nR(3:6)'
                 RisMax = RisMax + (-ud.ECGsig(nR1+1) <= -ud.ECGsig(nR1) & -ud.ECGsig(nR1-1) <= -ud.ECGsig(nR1));
             end
             if sum(RisMax)>=3 % if they are, invert ECG
                 ud.ECGsig = -ud.ECGsig;
                 disp('----------------- INVERTED EKG')
             elseif ud.ECGfiltered(1) == 'y'  % if R data sample are not maxima either ways
                                              % recompute R peaks!
                [ud.nR, RRout, ud.tR] = findRpeaks(ud.ECGsig, ud.tsig, ud.Fs, ud.RRmin, 4, ud.nR);
             end
         end
         
         set(h.figure1,'userdata',ud);
         Update_axes1(axis(h.axes1))
         set(ud.file_saveClearRR_handles,'Enable','on');
         set(h.RRzoomtogglebutton,'Enable','on')
         set([h.RRmarkerstogglebutton h.IBI_togglebutton],'Value',1); 
         set(h.savebutton,'Enable','off','BackgroundColor',ud.blue_enable_back,'ForegroundColor',ud.blue_enable_for)

     end
     if ~isempty(tRfil) && ~isempty(nRfil)  
         ud = get(h.figure1,'userdata');
%          if Delay ~= 1
%              Ndelay = round(0.0097*ud.Fs);
%          else
%              Ndelay = 0;
%          end
%          Ntot = length(ECGfil);
%          ud.ECGfil = ECGfil([Ndelay+1:Ntot Ntot*ones(1,Ndelay)]);
%          ud.tRfil = tRfil-Ndelay/ud.Fs; ud.nRfil = nRfil;
         ud.ECGfil = ECGfil;
         ud.tRfil = tRfil; ud.nRfil = nRfil;
         %ud.ECGfil = ECGfil;
         set(h.figure1,'userdata',ud);
         
         figure(h.figure1);
         
     end
     %------ plot RR results
     axes(h.axes3);
     axis([ud.tmin ud.tmax 0 1]);
     QuitSignalEditing;
     Update_IBIplot
     set(h.figure1,'pointer','arrow')
     
     %           if ~isempty(tR) & ~isempty(nR)  
     %               ud.tR = tR; ud.nR = nR;
     %               m = length(ud.tR)
     %               tIBI = 1000*(ud.tR(2:m)-ud.tR(1:m-1));
     %               ud.IBI_final = tIBI; 
     %               ud.tIBI_final = ud.tR(1:m-1);
     %               ud.tIBI_finalshift = ud.tR(1:m-1);
     %               set(h.figure1,'userdata',ud);
     %               figure(h.figure1);
     %               
     %               %------ plot RR results
     %               % plot Rpeaks in axes 1
     %               Update_IBIplot
     %               
     %               
     %               set(h.RRzoomtogglebutton,'Enable','on','Value',0);
     %               set(h.RRmarkerstogglebutton,'Value',1); 
     %               %Update_TimeMeasure
     %               %Update_axes1(axis(h.axes1));
     %           end
     
 end
 cd(matlab_wd)
 
 
  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  %%%%%%%%%%                                                        %%%%%%%%%%
  %%%%%%%%%%                Save Function                           %%%%%%%%%%
  %%%%%%%%%%                                                        %%%%%%%%%%
  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

  function savedata_CreateFcn
      % Callback code for pushbutton with Tag "save"
    %hObject

    
    h = guidata(gcf);
    fig = figure(h.figure1);
    ha1 = h.axes1;
    matlab_wd = pwd;
    ud = get(h.figure1,'userdata');
    ud1 = get(ha1,'userdata');
    mf = length(ud.fullFileName);
    ud.fullFileName;
   %%%%%%% Didier v3.3 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
   % solve issue with files that does not have extension (ANX files)
   mf1 = mf - 6 + find(ud.fullFileName(mf-5:mf) == '.',1,'last');
   if ~isempty(mf1) 
       if strcmp(ud.fullFileName(mf1-4:mf1-1),'_all')
           mf1 = mf1-5; 
       else
           mf1 = mf1-1;
       end
   else
       mf1 = mf;
   end
   % resolve issue with file name not having string ECG
    ni = max(findstr(ud.fullFileName, '_ECG'));
    if isempty(ni)
        filename = sprintf('%s_all.mat',ud.fullFileName(1:mf1));
    else
        filename = sprintf('%s_all.mat',ud.fullFileName([1:ni-1 ni+4:mf1]) );
    end
    
    
%     
%     %%%%%%%%%%% Didier  v3.2  %%%%%%%%%%%%%%%%%%%%%%
%     % solve issue with files that does not have extension (ANX files)
%     mf1 = mf - 6 + max(find(ud.fullFileName(mf-5:mf) == '.'));
%     if ~isempty(mf1)
%         mf1 = mf1-1;
%     else
%         mf1 = mf;
%     end
% %     mf1 = max(find(ud.fullFileName == '.'))-1;
% 
%     %%%%%%%%%%% Didier  %%%%%%%%%%%%%%%%%%%%%%
% 
%     filename = sprintf('%s_all.mat',ud.fullFileName(1:mf1));
%     
    %%%%%%%%%%%%% Didier v3.3 %%%%%%%%%%%%%%%%%%%%%%%%%%%


    fprintf('Saving all: %s \n',filename);
    %remove ECG data to save space; not really needed for computing metrics
    udsave = rmfield(ud,{'tsig','ECGsig','ECGfil'}); 
    
    %%%%%%%%%%%%%%% Didier v4.1 4/20/2010 %%%%%%%%%%%%%%%%
    % move file under folder 'backup/' if it already exists
    if exist(filename)>0
        ndir = max(find(filename == '/' | filename == '\' ))-1;
        dir1 = filename(1:ndir);
        dir2 = [dir1 '/backup'];
        if exist(dir2)==0
          mkdir(dir2)
        end
        filename1 = filename(ndir+1: length(filename));
        
        d1 = dir([dir1 filename1]);
        d2 = dir([dir2 filename1]);
        if isempty(d2) || (now - datenum(d1.date))>1 %move file older than 1 day 
            movefile(filename, [dir2 filename1])
        end
    end
    %%%%%%%%%%%%% Didier 4/20/2010 %%%%%%%%%%%%%%%%%%%%%%%%%%%
    
    %%%%%%%%%%%%%%%% Didier v3.3 %%%%%%%%
    % prevent Matlab 7.0 from saving as compressed file
    % so that file can be read in Matlab 6.xx
    %
    if str2num(version('-release'))>13
        save(filename,'udsave','ud1','-v6');
    else
        save(filename,'udsave','ud1');
    end
    %%%%%%%%%%%%%%%% Didier v3.3 %%%%%%%%
    
    saveRRdata_CreateFcn
    
    set(h.savebutton,'Enable','off','BackgroundColor',ud.blue_enable_back,'ForegroundColor',ud.blue_enable_for)
    figure(fig)
  
  function saveRRdata_CreateFcn
    % Callback code for pushbutton with Tag "save"
    %hObject
 
    
    h = guidata(gcf);
    fig = figure(h.figure1);
    ha1 = h.axes1;
    matlab_wd = pwd;
    ud = get(h.figure1,'userdata');
    mf = length(ud.fileNameString);
    ud.fileNameString;
    %%%%%%%%%%% Didier  v3.2  %%%%%%%%%%%%%%%%%%%%%%
    % solve issue with files that does not have extension (ANX files)
    
    mf1 = mf - 6 + find(ud.fileNameString(mf-5:mf) == '.',1,'last');
    if ~isempty(mf1)
        mf1 = mf1-1;
    else
        mf1 = mf;
    end
    
%     mf1 = find(ud.fullFileName == '.');
%     mf1 = max(mf1)-1;

    %%%%%%%%%%% Didier  %%%%%%%%%%%%%%%%%%%%%%

    %%%%%%%%%%% Didier v4.0 1/26/10 %%%%%%%%%%%%%%%%%%%%%
    % resolve issue with file name not having string ECG
    ni = max(findstr(ud.fileNameString, '_ECG'));
    ni2 = max(findstr(ud.fileNameString, '_all'));
    
    if isempty(ni) && ~isempty(ni2)
       filename = sprintf('%s_ECG_RR.mat',ud.fileNameString([1:ni2-1]) ); 
%     elseif ~isempty(ni)
%         filename = sprintf('%s_RR.mat',ud.fileNameString([1:ni-1 ni+4:mf1]) );
    else 
        filename = sprintf('%s_RR.mat',ud.fileNameString(1:mf1));
    end
    
%    filename = sprintf('%s_RR.mat',ud.fileNameString(1:mf1));
    %%%%%%%%%%% Didier v4.0  %%%%%%%%%%%%%%%%%%%%%

%     fprintf('%s\n',filename)
    tR = ud.tR; nR = ud.nR; ECGsig_filename = ud.fileNameString;
    tRfil = ud.tRfil; nRfil = ud.nRfil; ECGfil = ud.ECGfil; 
    m = length(ud.tR);
    RRint = tR(2:m)-tR(1:m-1);
    ECGsig1000 = ud.ECGsig(1:1000);
    Signalt1 = ud.Signalt1;
    Signalt2 = ud.Signalt2;
    Nber_of_Signals = ud.Nber_of_Signals;
    fprintf('Saving RR: %s \n',fullfile(ud.PathNameLoad,filename));
%    save(filename,'tR','nR','RRint','tRfil','nRfil','Signalt1','Signalt2','Nber_of_Signals','ECGfil','ECGsig1000','ECGsig_filename');

    %%%%%%%%%%%%%%% Didier v4.1 4/20/2010 %%%%%%%%%%%%%%%%
    % move file under folder 'backup/' if it already exists
    if exist(fullfile(ud.PathNameLoad,filename))
        dir2 = fullfile(ud.PathNameLoad,'backup');
        if ~exist(dir2)
          mkdir(dir2)
        end
        full_filename1 = dir(fullfile(ud.PathNameLoad,filename));
        full_filename2 = dir(fullfile(dir2,filename));
        if isempty(full_filename2) || (now - datenum(full_filename1.date))>1 %move only file older than 1 day 
            movefile(fullfile(ud.PathNameLoad,filename), fullfile(dir2,filename))
        end
    end
    %%%%%%%%%%%%% Didier 4/20/2010 %%%%%%%%%%%%%%%%%%%%%%%%%%%



    %%%%%%%%%%%%%%%% Didier v3.3 %%%%%%%%
    % prevent Matlab 7.0 from saving as compressed file
    % so that file can be read in Matlab 6.xx
    if str2num(version('-release'))<=13
        save(fullfile(ud.PathNameLoad,filename),'tR','nR','RRint','Signalt1','Signalt2','Nber_of_Signals','ECGsig_filename');
    else
        save(fullfile(ud.PathNameLoad,filename),'tR','nR','RRint','Signalt1','Signalt2'...
            ,'Nber_of_Signals','ECGsig_filename','-v6');
    end    
%     if str2num(version('-release'))>13
%         save(filename,'tR','nR','RRint','tRfil','nRfil','Signalt1','Signalt2'...
%             ,'Nber_of_Signals','ECGfil','ECGsig1000','ECGsig_filename','-v6');
%     else
%         save(filename,'tR','nR','RRint','tRfil','nRfil','Signalt1','Signalt2','Nber_of_Signals','ECGfil','ECGsig1000','ECGsig_filename');
%     end    
    %%%%%%%%%%%%%%%% Didier v3.3 %%%%%%%%

    set(h.savebutton,'Enable','off','BackgroundColor',ud.blue_enable_back,'ForegroundColor',ud.blue_enable_for)
    figure(fig)
  
    
    % --- Executes on button press in savebutton.
    function savebutton_Callback(hObject, eventdata, handles)
    % hObject    handle to savebutton (see GCBO)
    % eventdata  reserved - to be defined in a future version of MATLAB
    % handles    structure with handles and user data (see GUIDATA)
    
    % Hint: get(hObject,'Value') returns toggle state of savebutton

    h = guidata(gcf);
    saveRRdata_CreateFcn
    savedata_CreateFcn

    
  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  %%%%%%%%%%                                                        %%%%%%%%%%
  %%%%%%%%%%                Clear Function                           %%%%%%%%%%
  %%%%%%%%%%                                                        %%%%%%%%%%
  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    
  function clearRRdata_CreateFcn
    % Callback code for pushbutton with Tag "save"
    %hObject
    disp('save1')
  
    
    
    h = guidata(gcf);
    fig = figure(h.figure1);
    ha1 = h.axes1;
    matlab_wd = pwd;
    ud = get(h.figure1,'userdata');
    ud.tR = []; ud.nR = []; 
    ud1 =  get(ha1,'userdata');

    
    if ~isempty(ud1.hIBI3)
        delete(ud1.hIBI3); ud1.hIBI3 = [];
    end
    if ~isempty(ud1.hIBI)
        delete(ud1.hIBI); ud1.hIBI = [];
    end
    %  Since ud.tR is empty make handle of peaks not visible and Value
    %  of RR toggle off
    axes(h.axes3); set(h.axes3,'XTick',[],'YTick',[],'XTickLabel',[], 'YTickLabel',[])
    %axis off; set(h.axes3,'visible','off')
    if ~isempty(ud1.hPatch3)
        delete(ud1.hPatch3); ud1.hPatch3 = [];
    end

%     for idx = ud.idxRR
%         set(ud.filemenu_handles(idx),'Enable','off');
%     end
    set(ud.file_saveClearRR_handles,'Enable','off');
    
    set(h.savebutton,'Enable','off','BackgroundColor',ud.blue_enable_back,'ForegroundColor',ud.blue_enable_for)
    set(h.RRmarkerstogglebutton,'Value',0); 
    set(h.RRzoomtogglebutton,'Enable','off','Value',0);
    Update_axes1(axis(h.axes1));

    set(h.figure1,'userdata',ud);
    set(ha1,'userdata',ud1);
    
    figure(fig)
 
    
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  %%%%%%%%%%                                                        %%%%%%%%%%
  %%%%%%%%%%                Clear EDR Function                           %%%%%%%%%%
  %%%%%%%%%%                                                        %%%%%%%%%%
  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    
  function clearEDRdata_CreateFcn
    % Callback code for pushbutton with Tag "save"
    %hObject
    
    h = guidata(gcf);
    fig = figure(h.figure1);
    ha1 = h.axes1;
    matlab_wd = pwd;
    ud = get(h.figure1,'userdata');
    ud.tEDRsig = []; ud.EDRsig = []; 
    ud1 =  get(ha1,'userdata');

    try %try to delete ud1.hPatch3 but if it got deleted by mistake, 
        %set as empty to avoid stopping the program and issuing an error
        if ~isempty(ud.hEDRsig)
            delete(ud.hEDRsig); ud.hEDRsig = [];
        end
    catch
        hall = allchild(h.axes3);
        nh = find(strcmp(get(hall,'Type'),'line'));
        %nh2 =  find( sum(get(hall(nh),'Color') == ud.green)==3 );
        if ~isempty(nh)
            nh2 =  find( sum(cell2mat(get(hall(nh),'Color'))==ones(length(nh),1)*ud.green,2)  ==3 );
        end
        beep; pause(0.2);beep; fprintf('Beep on line 2265\n')
        delete(hall(nh2)); 
        
        ud.hEDRsig = [];
    end
    
    
    set(h.EDR_togglebutton,'Value',0); 
    Update_axes1(axis(h.axes1));

    set(h.figure1,'userdata',ud);
    
    figure(fig)
    
    
   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  %%%%%%%%%%                                                        %%%%%%%%%%
  %%%%%%%%%%                Export Function                           %%%%%%%%%%
  %%%%%%%%%%                                                        %%%%%%%%%%
  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    
  function export_CreateFcn
    % Callback code for pushbutton with Tag "export"
    %hObject
    
    
    h = guidata(gcf);
    ha1 = h.axes1;
    matlab_wd = pwd;
    ud = get(h.figure1,'userdata');
    mf = length(ud.fileNameString);
    tR = ud.tR; nR = ud.nR; ECGsig_filename = ud.fullFileName;
    ECGsig1000 = ud.ECGsig(1:1000);
    m = length(ud.tR);
    RRint = tR(2:m)-tR(1:m-1);
    FileNameExport = 0;
    mf1 = max(find(ud.fileNameString == '.'));

    if isempty(ud.FileNameExport)
        %DefaultName = sprintf('%s_RR.txt',ud.fileNameString(1:mf-4));
        DefaultName = sprintf('%s_RR.txt',ud.fileNameString(1:mf1-1));
    else
        DefaultName = ud.FileNameExport;
    end
    if isempty(ud.PathNameExport)
        DefaultPathName = ud.PathNameLoad;
    else
        DefaultPathName = ud.PathNameExport;
    end
    cd(DefaultPathName)
    [FileNameExport,PathNameExport] = uiputfile({'*.txt;*.dat;*.V*','Text or Data File (*.txt,*.dat)'},'Export File Name', DefaultName);

    cd(matlab_wd)

    if FileNameExport ~= 0 && isempty(FileNameExport) == 0
        ud.FileNameExport = FileNameExport;
        ud.PathNameExport = PathNameExport;
        save([PathNameExport FileNameExport],'RRint','-ascii');
        n = length(FileNameExport);
        
        set(h.figure1,'userdata',ud);
    end
    

    

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  %%%%%%%%%%                                                        %%%%%%%%%%
  %%%%%%%%%%                Load RESP Function                      %%%%%%%%%%
  %%%%%%%%%%                                                        %%%%%%%%%%
  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

  
  function load_RESP_CreateFcn(p,f)
  % Callback code for pushbutton with Tag "load"
  %hObject
  %'load1'
 
  h = guidata(gcf);
  fig = figure(h.figure1);
  ha1 = h.axes1;
  matlab_wd = pwd;
  ud = get(h.figure1,'userdata');
  ud1 =  get(ha1,'userdata');
  cd(ud.PathNameLoad);
  
  %hb = MsgBox2('Loading Respiration data...'); pause(0.1)
  %tload = timer;tload.TimerFcn = {@MsgBox_text,sprintf('\n\nLoading Respiration data')};
  %start(tload)
  MsgBox_text(sprintf('\n\nLoading Respiration data...'))
  
  if nargin == 0
      [f,p]=uigetfile({'*.txt;*.dat;*.V*','Text, Data or Psylab File (*.txt,*.dat,*.V*)';...
              '*.mat','Matlab File (*.mat)';'*.V*','Psylab File'});
      set(h.figure1,'pointer','watch')
  elseif exist(fullfile(p,f),'file') == 0
      f = 0;
  end
  
  cd(matlab_wd)
  set(h.figure1,'pointer','watch')
  if ~isequal(f,0)
      ud.fullFileNameRESP = fullfile(p,f);
      ud.fileNameStringRESP = f;
      
      set(h.figure1,'userdata',ud);
      
      filename = ud.fullFileNameRESP; calc_Fs = 1;
      
      [x_sig, y_sig, Fs] = getContentsOfFile(filename,calc_Fs);
      ud = get(h.figure1,'userdata');
      set(h.figure1,'pointer','watch')

      %Retrieve current directory
      cd(ud.wd)   
      
      % resample at 4 Hz
      m = length(x_sig);
      
      
      ud.tRESPsig = (x_sig(1):1/ud.Fs_interp:x_sig(m))';
      try
         RESPsig = interp1(x_sig, y_sig,ud.tRESPsig,'spline');
      catch
         fprintf('RESpsig Spline Interpolation: Out of Memory \n' )
         Nt = ceil(length(ud.tRESPsig)/10);
         RESPsig = [];
         for it  = 1:10
             it1 = 1 + (it-1)*Nt;
             it2 = min((it)*Nt,length(ud.tRESPsig));
             fprintf('it1-it2 = %d - %d \n',it1,it2)
             rg = find(x_sig>=ud.tRESPsig(it1)-10 & x_sig<=ud.tRESPsig(it2)+10);
             RESPsig = [RESPsig; interp1(x_sig(rg), y_sig(rg),ud.tRESPsig(it1:it2),'spline')];
         end
      end
      ud.RESPsig0 = RESPsig;
      %figure(1);
%       figure(2); plot(x_sig, y_sig,'r',ud.tRESPsig, RESPsig,'b')
%       figure(fig)
      % low pass filter at 1/30Hz - 1Hz
      fp1 = 1/30; fp2 = 1; 
      fp1 = 0.05; fp2 = 0.5; 
%       [b,a]=butter(4,2*ud.RESPfilter_freq./ud.Fs_interp);
%       % filter the signal
%       RESPsig = filter(b,a,RESPsig);
      % normalize and center
      RESPsig = RESPsig - mean(RESPsig);
      

      ud.RESPsig = -RESPsig/std(RESPsig); %- to have RSA in phase with HRV HF
      
      %%%%%%%%%%%%% Didier 8/10/2009 Didier 4.1 1/28/2010 %%%%%%%%%%%%%%
      %Set NaN values to 0
%       nh_nan = find(isnan(ud.RESPsig)); 
%       ud.RESPsig(nh_nan) = 0;
      ud.RESPsig(isnan(ud.RESPsig)) = 0;
      %%%%%%%%%%%%% Didier %%%%%%%%%%%%%%%%%%%%%%%

      
      %[ud.RESP_final, ud.tRESP_final, ud.tRESP_finalshift] = ExtractSignal(ud.RESPsig,ud.tRESPsig, ud.Signalt1, ud.Signalt2, [], []);
      ud.RESP_final = ud.RESPsig;
      ud.tRESP_final = ud.tRESPsig;
      ud.tRESP_finalshift = ud.tRESPsig;
      
      if isempty(Fs)
          ud.FsRESP = x_sig(2)-x_sig(1);
      else
          ud.FsRESP = Fs;
      end
      
      %make sure that ud.Signal_Nber = [] when no signals
      if ud.Nber_of_Signals == 0
          ud.Signal_Nber = [];
      end
      
      set(h.figure1,'userdata',ud);
      %delete(hb);
      MsgBox_text('Off')
      
      figure(h.figure1);
      
      %------ plot RESP results
      
      set(h.RESP_togglebutton,'Enable','on','Value',1)
      Update_RESPplot
      
      
  end
  set(h.figure1,'pointer','arrow') 
  %stop(tload)
  figure(fig)
  cd(ud.wd)
  
  
  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  %%%%%%%%%%                                                        %%%%%%%%%%
  %%%%%%%%%%                Load SCL Function                      %%%%%%%%%%
  %%%%%%%%%%                                                        %%%%%%%%%%
  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function var_out = load_SCL_CreateFcn(p1,f1,p2,f2)
  % Callback code for pushbutton with Tag "load"
  % var_out = 1; loading successful, var_out = 0 unsuccessful
  %hObject
  %'load1'
  
  h = guidata(gcf);
  fig = figure(h.figure1);
  ha1 = h.axes1;
  matlab_wd = pwd;
  ud = get(h.figure1,'userdata');
  ud1 =  get(ha1,'userdata');
  

  
  var_out = 1;
  
  if nargin == 0
      cd(ud.PathNameLoad);
      [f2,p2]=uigetfile({'*SCL2*.txt;*SCL2*.dat;*SCL2*.V*','Text, Data or Psylab File (*.txt,*.dat,*.V*)';...
              '*SCL2*.mat','Matlab File (*.mat)';'*SCL2*.V*','Psylab File'},'Pick SCL2 File');
  elseif nargin == 2
      f2 = f1; p2 = p1; f1 =[]; p1 = [];
      if exist(fullfile(p2,f2),'file') == 0
          f2 = 0;
      end
  end
  
  %hb = MsgBox2('Loading and Processing Skin Conductance...'); pause(0.1)
  MsgBox_text(sprintf('\n\nLoading and Processing Skin Conductance...'))
  
  set(h.figure1,'pointer','watch')
  
  if ~isequal(f2,0)
      mf = findstr(f2, 'SCL2');
      f2;
      f1default = [f2(1:mf-1) 'SCL1' f2(mf+4:length(f2))];
      if nargin == 0
          [f1,p1]=uigetfile({'*SCL1*.txt;*SCL1*.dat;*SCL1*.V*','Text, Data or Psylab File (*.txt,*.dat,*.V*)';...
                  '*SCL1*.mat','Matlab File (*.mat)';'*SCL1*.V*','Psylab File'},'Pick SCL1 File',f1default);
          set(h.figure1,'pointer','watch')
      elseif nargin == 2
          f1 = f1default;
          p1 = p2;
          if exist(fullfile(p1,f1),'file') == 0
              f1 = 0;
          end
      end
      cd(matlab_wd)
      ud.fullFileNameSCL = fullfile(p2,f2);
      ud.fileNameStringSCL = f2;
      
      set(h.figure1,'userdata',ud);
      
      filename = ud.fullFileNameSCL; calc_Fs = 1;
      [x_sig, y2_sig, Fs] = getContentsOfFile(filename,calc_Fs);
      set(h.figure1,'pointer','watch')

      %%%%%%%%%%%%%%%%%%  General Note    %%%%%%%%%%%%%%%%%%%%%%%%%%%
      %Technically SCL2 ranges from -5V to +5V corresponding to 100uS
      %SCL2 increase by increment of Dshift = 1.5625/2
      %And SCL1 ranges from -5V to 5V corresponding to -Dshift/2 to Dshift/2
      % However signals do not exactly go from +/-5V but ~ +/-4.618(?) for SCL2 and 
      % +/-4.48V for SCL1!!!!
      % Left it without corrections. May not reflect the real skin
      % conductance but can't seem to figure out what the correction should be
      cor_SCL1 = 1; % Correction for SCL1
      cor_SCL2 = 1; % Correction for SCL2
      
      Dshift = 1.5625/2; 
      y2_sig = y2_sig*cor_SCL2; % Normalizing to +/-5V
      %Retrieve current directory
      cd(ud.wd)   
      %fprintf('SCL: %0.1f %0.1f',min(y2_sig),max(y2_sig))
      y2_sigold = y2_sig;
      
      % reducing noice in y2_sig
      %method 1
      y2_round =  (round(y2_sig*10/Dshift-0.5) + 0.5)*Dshift/10;
      y2_round = (y2_round + 5)*10; %calibrated to 0-100uS for -5+5 volts range
      
     %method 2
      %------------- Didier - 8/10/2009 / Didier 4.1 1/28/2010      ------------------
      % modified to take into account NaN Values - Reverse back to original
      % (no longer NaN values , which are replaced by 0)
%       nh_nan = find(~isnan(y2_sig)); % extract not NaN data
%       m = length(x_sig(nh_nan));
%       
%       nh2 = find( abs(y2_sig(nh_nan(2:m)) - y2_sig(nh_nan(1:m-1)))>0.2*Dshift/10 );  nh2 = [0; nh2;m];
%       
%       for i= 2:length(nh2);
%           rg = (nh2(i-1)+1:nh2(i))';
%           y2_sig(nh_nan(rg)) = mean(y2_sig(nh_nan(rg)));
%       end
     
      m = length(x_sig);
      
      nh2 = find( abs(y2_sig(2:m) - y2_sig(1:m-1))>0.2*Dshift/10 );  nh2 = [0; nh2;m];
      
      for i= 2:length(nh2);
          rg = (nh2(i-1)+1:nh2(i))';
          y2_sig(rg) = mean(y2_sig(rg));
      end
      
      y2_sig = (y2_sig + 5)*10; %calibrated to 0-100uS for -5+5 volts range
      %figure(4); plot(x_sig, (y2_sigold + 5)*10,'k', x_sig, y2_round,'b' ,x_sig, y2_sig,'r')
      %figure(h.figure1)
      
      % loading the second conductance signal
      m = length(x_sig);
      ud.tSCLsig = (x_sig(1):1/ud.Fs_interp:x_sig(m))';

      k = 2*pi/Dshift;
      if ~isequal(f1,0) 
          filename = fullfile(p1, f1);
          [x1_sig, y1_sig, Fs] = getContentsOfFile(filename,calc_Fs);
          set(h.figure1,'pointer','watch')
          m1 = length(y1_sig);
          if (abs(m1 - m)/Fs>2)  %check that data length is not different by more than 1s
              % this happens when signal is recorded less than 5s
              % before treatment starts and the beginning gets
              % truncated
              if ud.automatic == 0
                  msgbox(sprintf('\n Skin Conductance Signals Lengths do not Match! \n Skin Conductance won''t be loaded'))
              else
                  fprintf('Skin Conductance Signals Lengths do not Match (%3.1g)! Skin Conductance won''t be loaded \n',abs(m1 - m)/Fs)
                   
              end
              set(h.figure1,'pointer','arrow');
              var_out = 0;
              return;
          else
              if m1 >m
                  y1_sig = y1_sig(1:m);
              elseif m1<m
                  y1_sig = [y1_sig(1:(m-m1)); y1_sig];
              end
          
             
                  
          y1_sig = y1_sig*cor_SCL1; % Normalizing to +/-5V
          %y1_sig = y1_sig*69/64; 
          y1_sigold = y1_sig;

%           % Method 1
%           y1_sig = y1_sig/5*1.5625;
%           y1_sig = y2_sig(1)+unwrap(y1_sig*k)/k;
          % Method2
          y1_sig = y1_sig/5*Dshift;
          y_sig = y2_sig + y1_sig; 
          y_jump = Dshift; 0.5 ;

%           %cleaning up discontinuity
%           nh_nan = find(~isnan(y_sig)); % extract not NaN data
%           m = length(x_sig(nh_nan));
%           
%           %m=length(y_sig); 
%           nh = find(abs(y_sig(nh_nan(3:m-3)) - y_sig(nh_nan(1:m-5)) ) > 0.025*y_jump & abs(y_sig(nh_nan(3:m-3)) - y_sig(nh_nan(6:m)))>0.025*y_jump);
%           y_sig(nh+2) = (y_sig(nh-1)+y_sig(nh+5))/2;
          
          %cleaning up discontinuity
          
          m=length(y_sig); 
          nh = find(abs(y_sig(3:m-3) - y_sig(1:m-5) ) > 0.025*y_jump & abs(y_sig(3:m-3) - y_sig(6:m))>0.025*y_jump);
          y_sig(nh+2) = (y_sig(nh-1)+y_sig(nh+5))/2;
        
%         %%%%%% plotting different results 
%           %figure(1); plot(x_sig,y3_sig-y3_sig(1),'r',x_sig, y_sig-y_sig(1),'b',x_sig,y2_sigold,'k',x_sig,y1_sigold,'m', x_sig,y2_round,'b');
%            figure(1); plot(x_sig, y_sig,'r',x_sig,y2_sigold,'k',x_sig,y1_sigold,'m', x_sig,y2_round,'b');
%            figure(h.figure1)

          %y_sig = y3_sig; 
          clear y2_sig y3_sig y2_sig;
          
          end
      else
          y_sig = y2_sig; clear y2_sig;
      end
      
      % Didier 8/10/2009
      %Set NaN/ysig = 50 (=0 + 5*10) values to 0
      %nh_nan = find(isnan(y_sig)); 
      %y_sig(nh_nan) = 0;
      y_sig(y_sig==50) = 0;
      %---------------- Didier 4.1 ------------------

      %%%%%%%%%%%%%%%%%%%%%
      
      % -------- resample at 4 Hz and filter by block of continuous data 

      % low pass filter at 1/30Hz - 1Hz
      fp1 = 1/30; fp2 = 1;
      fp1 = 1;
      %[b,a]=butter(4,2*[fp1 fp2]./ud.Fs_interp);
      %---------- Didier v4.4 -------------
%      [b,a]=butter(4,2*ud.SCLfilter_freq./ud.Fs_interp);
      [b,a]=butter(2,2*ud.SCLfilter_freq./ud.Fs_interp);
      %---------- v4.4 ---------------
      m = length(x_sig);
      nh2 = find( abs(y_sig(2:m-1) - y_sig(1:m-2))>0.1*y_jump & abs(y_sig(3:m) - y_sig(2:m-1))<y_jump );  nh2 = [0; nh2;m];
      SCLsig = zeros(length(ud.tSCLsig),1);
      
      % desample & filter by shunks delineated by discontinuity
      for i= 2:length(nh2);
          rg = (nh2(i-1)+1:nh2(i))';
          rg2 = find(ud.tSCLsig >= x_sig(nh2(i-1)+1) & ud.tSCLsig <= x_sig(nh2(i))); %[length(rg) length(rg2)];
          if ~isempty(rg2)
              if length(rg)==1
                  SCLsig(rg2) = y_sig(rg);
              else
                  SCLsig(rg2) = interp1(x_sig(rg), y_sig(rg),ud.tSCLsig(rg2),'spline');
                  
                  % filter the signal
                  %---------- Didier v4.4 -------------
%                  ud.SCLsig(rg2) = filter(  b,a,SCLsig(rg2)-( SCLsig(rg2(1)) ) ) +SCLsig(rg2(1)) ;
                  ud.SCLsig(rg2) = filtfilt(  b,a,SCLsig(rg2)-( SCLsig(rg2(1)) ) ) +SCLsig(rg2(1)) ;
                  %---------- v4.4 -------------
                  %              plot(ud.tSCLsig(rg2), SCLsig(rg2),'b', ud.tSCLsig(rg2), ud.SCLsig(rg2),'r')
              end
          end
      end
      ud.SCLsig0 = SCLsig;
      ud.SCLsig_s = y_sig(1);
      
      %-------- Didier 4.1 1/28/2010------------
      
      y_sig(y_sig==0) = NaN;
      %-------- Didier 4.1 ------------
      %----------- Didier v3.3 --------------------
      %compute SCR response
      [N_SCR, ud.SCLsig_nSCR] = Compute_SCR(ud.tSCLsig,ud.SCLsig);
      %----------- Didier v3.3 --------------------

      
      
      if isempty(Fs)
          ud.FsSCL = x_sig(2)-x_sig(1);
      else
          ud.FsSCL = Fs;
      end
      % Needed to call h.figure1 to plot on SignalBrowser Windows rather
      % figure windows
      %delete(hb)
      
      figure(h.figure1);
      set(h.figure1,'userdata',ud);
      
      
      %------ plot SCL results
   
      
      set(h.SCL_togglebutton,'Enable','on','Value',1)
      Update_SCLplot
      
      
  end
  set(h.figure1,'pointer','arrow') 
  
  MsgBox_text('Off')
 
  figure(fig)
  cd(ud.wd)
  
   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  %%%%%%%%%%                                                        %%%%%%%%%%
  %%%%%%%%%%                Get Contents of File                    %%%%%%%%%%
  %%%%%%%%%%                                                        %%%%%%%%%%
  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    
    
function [x_sig, y_sig, Fs] = getContentsOfFile(filename,calc_Fs)
  % Called by 'browse' button and callback of filename edit box,
  h = guidata(gcf);
  ud = get(h.figure1,'userdata');
  fig = figure(h.figure1);
  

  Fs = [];
  
  nf = length(filename);
  
  set(h.figure1,'pointer','watch')
   
  if isempty(filename)
      fprintf('<no file selected>\n');
  elseif strcmp(filename(nf-2:nf),'mat')
      whosString = ['w=whos(''-file'',''' filename ''');'];
      err=0;
      eval(whosString,'err=1;')
      if err
          fprintf('<file not found>\n');    
      else
          if length(w) == 0
              fprintf('<file empty>\n');
          end
      end     
  
  
 
  elseif strcmp(filename(nf-2:nf),'txt') || strcmp(filename(nf-2:nf),'dat') 
      
      %load text or data file
      y_sig = importdata(filename,' ');
      m = length(y_sig);
      if abs((y_sig(1)-y_sig(2))/y_sig(2)) > 0.1 & calc_Fs == 1
          %'ok1'
          Fs = y_sig(1);
          y_sig = y_sig(2:m); 
          x_sig = (0:1:m-2)'/Fs;    
      elseif calc_Fs == 1
          %'ok2'
          % check if there is any *.smr (Spike) file anywhere 
          fe1 = exist(sprintf('%s.smr',filename(1:nf-4)),'file');
          disp(sprintf('%s.smr',filename(1:nf-4)))
          if fe ==0 %err
              % the *.smr file is not found
              % Fs = 1002;
              % the file was created by Psylab
              Fs = 1002;
              disp('Psylab Fs = 1002 \n')
              y_sig = y_sig(1:m); y_sig = (y_sig-mean(y_sig)); %y_sig = y_sig/1000; 
              y_sig = y_sig/1000; %convert to uV if it is in ms

          else
              % file was created by Spike  
              Fs = 1000;
              disp('Spike Fs = 1000 \n')
          end     
          
          x_sig = (0:1:m-1)'/Fs; 
      else
          Fs =1; x_sig = 1:m;
      end
      %       figure(1);
      %       plot(tsig,y_sig)
      figure(fig)
  %%%%%%%%%%%%%%% Didier 3.1 %%%%%%%%%%%%%%%%%
  else %May be an ANSAR File
      M = importdata(filename);
      [r c] = size(M);

      if c >= 9  % it is a ANSAR file , matrix struct
          FileData = M;

          clear M;
          y_sig= FileData(:,4);
          x_sig = FileData(:,1);
          Fs = 1/(x_sig(2) - x_sig(1));
          
          %load IBI as SCL
%           ud.SCLsig = 60./FileData(:,3);
%           ud.tSCLsig = x_sig;
      
          ud.SCLsig = FileData(:,2);
          ud.SCLsig = ud.SCLsig(find(~(ud.SCLsig==0)));
          ud.tSCLsig = zeros(length(ud.SCLsig),1);
          ud.tSCLsig(1) = ud.SCLsig(1);
          for i = 2:length(ud.tSCLsig)
              ud.tSCLsig(i) = ud.tSCLsig(i-1) + ud.SCLsig(i);
          end

          ud.FsSCL = Fs;
          
          set(h.figure1,'userdata',ud);
          

          set(h.SCL_togglebutton,'Enable','on','Value',1)
          Update_SCLplot

          clear FileData

          
      else
          fprintf('<file structure unknown>\n');

      end
  end

%%%%%%%%%% Didier %%%%%%%%%%%%%%%%%%%%
  set(h.figure1,'pointer','arrow')

  
  
  
  
  
  
  
  
  
  
  
  
% % --- Executes on mouse press over axes background.
% function axes1_ButtonDownFcn(hObject, eventdata, handles)
% % hObject    handle to axes1 (see GCBO)
% % eventdata  reserved - to be defined in a future version of MATLAB
% % handles    structure with handles and user data (see GUIDATA)
% h = guihandles(gcf);
% pos = get(h.axes1,'position')
% xyout = get(gcf,'CurrentPoint')


  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  %%%%%%%%%%                                                        %%%%%%%%%%
  %%%%%%%%%%                Mouse Button Control                    %%%%%%%%%%
  %%%%%%%%%%                                                        %%%%%%%%%%
  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%




% --- Executes on mouse press over figure background, over a disabled or
% --- inactive control, or over an axes background.
function figure1_WindowButtonDownFcn(hObject, eventdata, handles)
% hObject    handle to figure1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
%'Down1'
h = guidata(gcf);
figure(h.figure1)
ha1 = h.axes1;
ha3 = h.axes3;
ud1 = get(ha1,'userdata');
ud = get(h.figure1,'userdata');

pos1 = get(ha1,'position');
xyout = get(h.figure1,'CurrentPoint');
pos3 = get(h.axes3,'position');
Editing_View = get(h.RR_Editing_View,'Value');
posSpec = get(h.Spectrogram_axes,'position');




if Editing_View == 1
    %Cursor within axes 1
    if ((xyout(1)>pos1(1) && xyout(1)<pos1(1)+pos1(3) && xyout(2)>pos1(2) && xyout(2)<pos1(2)+pos1(4))) % cursor within axes1
        % | (xyout(1)>pos13(1) & xyout(1)<pos13(1)+pos3(3) & xyout(2)>pos3(2) &
        % xyout(2)<pos3(2)+pos3(4)) % cursor within axes3
        ud.cursor.axes = 1;
        ud1 = get(ha1,'userdata');
        xyout(1) = (xyout(1) - pos1(1))/pos1(3);
        xyout(2) = (xyout(2) - pos1(2))/pos1(4);
        ud1.xy1 = [xyout(1)  xyout(2)];
        ud1.xy3 = [];
        ud1.hPatch = [];
        set(ha1,'userdata',ud1);
        
        
         %------------ Didier v4.0 1/21/2009 --------------------

        xy1 = [xyout(1)  xyout(2)];
        finalRect = rbbox;
        
        xy2 = get(h.figure1,'CurrentPoint');

%                 x2 = ( min(max(pos(1),xy2(1)),pos(1)+pos(3)) - pos(1) )/pos(3);
%         y2 = ( min(max(pos(2),xy2(2)),pos(2)+pos(4)) - pos(2) )/pos(4);
%         
%         %
%         %axes(ha1); 
%         axes1  = axis(ha1);
%         xmin = axes1(1); xmax = axes1(2); ymin = axes1(3); ymax = axes1(4);
%         xy1 = ud1.xy1;
%         xmin_new = xmin+(xmax-xmin)*min(xy1(1),x2);
%         ymin_new = ymin+(ymax-ymin)*min(xy1(2),y2);
%         xmax_new = xmin+(xmax-xmin)*max(xy1(1),x2);
%         ymax_new = ymin+(ymax-ymin)*max(xy1(2),y2);

        x2 = ( min(max(pos1(1),xy2(1)),pos1(1)+pos1(3)) - pos1(1) )/pos1(3);
        y2 = ( min(max(pos1(2),xy2(2)),pos1(2)+pos1(4)) - pos1(2) )/pos1(4);
        
        subplot(ha1); axes1  = axis(ha1);
        xmin = axes1(1); xmax = axes1(2); ymin = axes1(3); ymax = axes1(4);
        
        %fprintf('norm = %f',sqrt(([x2 y2]-xy1)*([x2 y2]-xy1)')  )
        if sqrt(([x2 y2]-xy1)*([x2 y2]-xy1)') > 0.001 && abs(x2-xy1(1))*(xmax-xmin)>1/ud.Fs %Zoom function (when is not double click)
            % values of x,y with axes for click release
            %
            %'zoom in '
            figure(h.figure1)
            xmin_new = xmin+(xmax-xmin)*min(xy1(1),x2);
            ymin_new = ymin+(ymax-ymin)*min(xy1(2),y2);
            xmax_new = xmin+(xmax-xmin)*max(xy1(1),x2);
            ymax_new = ymin+(ymax-ymin)*max(xy1(2),y2);
% % %             if ~isempty(ud1.hPatch)
% % %                 delete(ud1.hPatch); ud1.hPatch = [];
% % %             end
% % %             hold on;
% % %             hPatch = line([xmin_new xmin_new xmax_new xmax_new xmin_new],[ymin_new ymax_new ymax_new ymin_new ymin_new]);
% % %             set(hPatch,'Color',[0 0 0]);
% % %             hold off;
% % %             axis(axes1);
% % %             pause(0.2);
            %ud1.xy1 = 
            ud1.xy1 = [];
            set(ha1,'userdata',ud1);
            set(h.figure1,'userdata',ud);
%             [  xmax_new - xmin_new]
%             [  ymax_new - ymin_new]
            %axisnew = [0.9*xmin_new  1.1*xmax_new   0.9*ymin_new    1.1*ymax_new   ];
            %axisnew = [xmin_new  max(xmax_new,xmin_new+1/ud.Fs)   ymin_new  max(ymax_new, (xmax-xmin)/100)];
            axisnew = [xmin_new  max(xmax_new, xmin+(xmax-xmin)/100)   ymin_new  max(ymax_new, ymin+(ymax-ymin)/100)];
            Update_axes1(axisnew)
            
          
        elseif xy2(1)>pos1(1) && xy2(1)<pos1(1)+pos1(3) && xy2(2)>pos1(2) && xy2(2)<pos1(2)+pos1(4) && ~isempty(ud.tR)
            %if double click then find and add/remove on local Rpeaks
            %delete the square
            figure(h.figure1)
            fprintf('\n Double click \n');
            if ~isempty(ud1.hPatch)
                delete(ud1.hPatch); ud1.hPatch = [];
            end
            ud = get(h.figure1,'userdata');
            Dt = 1/ud.Fs;
            ECGsig = ud.ECGsig;
            tsig = ud.tsig;
            m = length(tsig);
            nR = ud.nR;
            tR = ud.tsig(ud.nR);
            ECG_R = ud.ECGsig(ud.nR);
            tR1 = [];
            nR1 = [];
            axes(ha1); axis1 = axis(ha1);
            tclick = axis1(1) + x2*(axis1(2)-axis1(1));       
            
            %try first to find if there is any existing Rpeak close within the
            %display window
            ud.RRmin = 0.3;
            nR1 = find(abs(tclick-tR)<min(ud.RRmin/2,axis1(2)-axis1(1))  ); 
            % if several values selected, select the closest one to the click
            % location
            ns = find(abs(tclick-tR(nR1)) == min(abs(tclick-tR(nR1))));
            nR1 = nR1(ns);
            m1 = length(tR);
            if ~isempty(nR1) % found one close, remove it
                fprintf('one close\n')
                ud.tR = tR([1:nR1-1  nR1+1:m1]);
                ud.nR = nR([1:nR1-1 nR1+1:m1]);
                set(h.savebutton,'Enable','on','BackgroundColor',ud.orange,'ForegroundColor',[1 1 1])
                
            else %no close and existing peak found
                % try first to find a maximum +/- RRmin/2 distance away of click
                fprintf('find a new maximum\n')
                nw = floor(min(ud.RRmin/2,axis1(2)-axis1(1))*ud.Fs); %do not look beyond axis window
                %nw
                i1 = max(1 , max(ceil((tclick-ud.tsig(1))/Dt - nw),min(find(ud.tsig>=axis1(1)))) );
                i2 = min(m, min(floor((tclick-ud.tsig(1))/Dt + nw),max(find(ud.tsig<=axis1(2)))) );
                rg = i1:i2;
                nf = i1 - 1 + find(ECGsig(rg) == max(ECGsig(rg)));
                m_nf = length(nf);
                %             fprintf('nf = %d  ECGsig=%2.2g t=%2.2g\n',nf,ECGsig(nf),ud.tsig(nf));
                
                %             nf(m_nf)
                %             nf(1)+m_nf-1 
                if (length(nf) == 1  | nf(m_nf)==nf(1)+m_nf - 1 ) & nf(1)~=i1 & max(nf) ~= i2
                    %ECGsig(nf)
                    nw = 5; nf1 = nf(1);
                    if ECGsig(nf) > axis1(3) & ECGsig(nf) < axis1(4) %make sure that the peak is in the zoom window
                        %'looking'
                        ECGsig_interp = interp(ECGsig(nf1-nw:nf1+nw),10);
                        nRi = min(find(ECGsig_interp == max(ECGsig_interp)));
                        tR1 = tsig(nf1) + (nRi-nw*10-1)/10/ud.Fs;
                        nR1 = nf(find(ud.tsig(nf) - tR1 == min(ud.tsig(nf) - tR1)));
                        
                        %Add tR1 to the list of RRpos
                        in = max(find(nR<=nR1));
                        if isempty(in)
                            ud.nR = [nR1 ; nR]; 
                            ud.tR = [tR1 ; tR];                
                        elseif isempty(find(nR1 == nR))
                            ud.nR = [nR(1:in); nR1; nR(in+1:m1)];
                            ud.tR = [tR(1:in); tR1; tR(in+1:m1)];
                        end
                        set(h.savebutton,'Enable','on','BackgroundColor',ud.orange,'ForegroundColor',[1 1 1])
                        
                    end
                    
                end
                
                
            end %add peak
            
            set(ha1,'userdata',ud1);
            set(h.figure1,'userdata',ud);
            UpdateFinalSignal
            % Update IBI related plots
            
            Update_IBIplot('axes1')
            Update_axes1(axis(h.axes1))
            %Update_axes1(axis(h.axes1))
            %Update_SamplePatchesMeasures %done already in Update_IBIplot

            
            
            
        end %for double click
        
        
        ud1 = get(ha1,'userdata');
        ud = get(h.figure1,'userdata');
       
        
        
        %------------ Didier v4.0 --------------------


        
        
        
        
        
        %if get(h.SignalEditing,'Value') == 1 | get(h.SampleEditing,'Value') == 1
    % cursor within axes3
    elseif ((xyout(1)>pos3(1) && xyout(1)<pos3(1)+pos3(3) && xyout(2)>pos3(2) && xyout(2)<pos3(2)+pos3(4))) 
        figure(h.figure1)
        ud.cursor.axes = 3;
        ud1 = get(ha1,'userdata');
        Ratio = 1/100;
        xyout(1) = (xyout(1) - pos3(1))/pos3(3);
        xyout(2) = (xyout(2) - pos3(2))/pos3(4);
        ud1.xy3 = [xyout(1)  xyout(2)];
        ud1.xy1 = [];
        xc = xyout(1);
        axes3  = axis(ha3);
        
        xmin = axes3(1); xmax = axes3(2); xamp = xmax-xmin;
        xct = xmin + xc*xamp; 
        ud.cursor.xct1 = xct;
        %xct1 = ud.Signalt1;
        
        if get(h.SignalEditing,'Value') == 1  %Editing Signal
            % find the closest Signal sample left edge to cursor
            nt1 = find(abs(ud.Signalt1 - xct ) == min(abs(ud.Signalt1-xct) ));
            % find the closest Signal sample left edge to cursor
            nt2 = find(abs(ud.Signalt2 - xct ) == min(abs(ud.Signalt2-xct) ));
            % find the closest edge
            if abs(ud.Signalt1(nt1) - xct )<abs(ud.Signalt2(nt2) - xct )
                nt3 = nt1; nt4 = [];
            else
                nt3 = []; nt4 =nt2;
            end
            
            figure(h.figure1)
            if abs(ud.Signalt1(nt1)-xct)<Ratio*xamp %control left edge
                ud.cursor.action = 'LeftSignal ';
                ud.cursor.nS = nt1;
                ud.cursor.tS1 = ud.Signalt1(nt1); ud.cursor.tS2 = ud.Signalt2(nt1);
                set(h.figure1,'pointer','custom','PointerShapeCData',ud.CursorRightLeft,'PointerShapeHotSpot',[8 9])
                ud.Signal_Nber = ud.cursor.nS;
            elseif abs(ud.Signalt2(nt2)-xct)<Ratio*xamp %control right edge
                ud.cursor.action = 'RightSignal';
                ud.cursor.nS = nt2;
                ud.cursor.tS1 = ud.Signalt1(nt2); ud.cursor.tS2 = ud.Signalt2(nt2);
                set(h.figure1,'pointer','custom','PointerShapeCData',ud.CursorRightLeft,'PointerShapeHotSpot',[8 9])
                ud.Signal_Nber = ud.cursor.nS;
            elseif xct>=ud.Signalt1(nt1) & xct<=ud.Signalt2(nt1)  %slide nt1 Sample
                ud.cursor.action = 'SlideSignal';
                ud.cursor.nS = nt1;
                ud.cursor.tS1 = ud.Signalt1(nt1); ud.cursor.tS2 = ud.Signalt2(nt1);
                set(h.figure1,'pointer','fleur','PointerShapeHotSpot',[8 9]);
                ud.Signal_Nber = ud.cursor.nS;
                
            elseif xct>=ud.Signalt1(nt2) & xct<=ud.Signalt2(nt2)  %slide nt2 Sample
                ud.cursor.action = 'SlideSignal';            
                ud.cursor.nS = nt2;
                ud.cursor.tS1 = ud.Signalt1(nt2); ud.cursor.tS2 = ud.Signalt2(nt2);
                set(h.figure1,'pointer','fleur','PointerShapeHotSpot',[8 9]);
                ud.Signal_Nber = ud.cursor.nS;
                
            else  %new sample region
                ud.cursor.action = 'NewSignal  '; 
                ud.cursor.nS = ud.Nber_of_Signals + 1;
                ud.Nber_of_Signals = ud.Nber_of_Signals + 1;
                ud.Signal_Nber =  ud.Nber_of_Signals;
                ud.Signalt1(ud.Signal_Nber) = xct; ud.Signalt2(ud.Signal_Nber)  = xct;
                
            end
        else
            %if get(h.SignalEditing,'Value') == 0  %Editing Sample by default
            % find the closest Sample sample left edge to cursor
            nt1 = find(abs(ud.Samplet1 - xct ) == min(abs(ud.Samplet1-xct) ));
            % find the closest Sample sample left edge to cursor
            nt2 = find(abs(ud.Samplet2 - xct ) == min(abs(ud.Samplet2-xct) ));
            % find the closest edge
            if abs(ud.Samplet1(nt1) - xct )<abs(ud.Samplet2(nt2) - xct )
                nt3 = nt1; nt4 = [];
            else
                nt3 = []; nt4 =nt2;
            end
            
            figure(h.figure1)
            if abs(ud.Samplet1(nt1)-xct)<Ratio*xamp %control left edge
                ud.cursor.action = 'LeftSample ';
                ud.cursor.nS = nt1;
                ud.cursor.tS1 = ud.Samplet1(nt1); ud.cursor.tS2 = ud.Samplet2(nt1);
                set(h.figure1,'pointer','custom','PointerShapeCData',ud.CursorRightLeft,'PointerShapeHotSpot',[8 9])
                ud.Sample_Nber = ud.cursor.nS;
            elseif abs(ud.Samplet2(nt2)-xct)<Ratio*xamp %control right edge
                ud.cursor.action = 'RightSample';
                ud.cursor.nS = nt2;
                ud.cursor.tS1 = ud.Samplet1(nt2); ud.cursor.tS2 = ud.Samplet2(nt2);
                set(h.figure1,'pointer','custom','PointerShapeCData',ud.CursorRightLeft,'PointerShapeHotSpot',[8 9])
                ud.Sample_Nber = ud.cursor.nS;
            elseif xct>=ud.Samplet1(nt1) & xct<=ud.Samplet2(nt1)  %slide nt1 Sample
                fprintf('Slideclick \n')
                ud.cursor.action = 'SlideSample';
                ud.cursor.nS = nt1;
                ud.cursor.tS1 = ud.Samplet1(nt1); ud.cursor.tS2 = ud.Samplet2(nt1);
                set(h.figure1,'pointer','fleur','PointerShapeHotSpot',[8 9]);
                ud.Sample_Nber = ud.cursor.nS;
            elseif xct>=ud.Samplet1(nt2) & xct<=ud.Samplet2(nt2)  %slide nt2 Sample
                fprintf('Slideclick \n')
                ud.cursor.action = 'SlideSample';
                ud.cursor.nS = nt2;
                ud.cursor.tS1 = ud.Samplet1(nt2); ud.cursor.tS2 = ud.Samplet2(nt2);
                set(h.figure1,'pointer','fleur','PointerShapeHotSpot',[8 9]);
                ud.Sample_Nber = ud.cursor.nS;
            else
                ud.cursor.action = 'NewSample  '; 
                ud.cursor.nS = ud.Nber_of_Samples + 1;
                ud.Nber_of_Samples = ud.Nber_of_Samples + 1;
                ud.Sample_Nber =  ud.Nber_of_Samples;
                ud.Samplet1(ud.Sample_Nber) = xct; ud.Samplet2(ud.Sample_Nber)  = xct;
                %ud.cursor.tS1 = ud.Samplet1(nt2); ud.cursor.tS2 = ud.Samplet2(nt2);
            end
 
            
        end 
        set(h.figure1,'userdata',ud);
        set(ha1,'userdata',ud1);
        figure(h.figure1)
        Update_SamplePatches;
        
        ud = get(h.figure1,'userdata');
        ud1 = get(ha1,'userdata');
        
        pos3 = get(ha3,'position'); axes3  = axis(ha3);
        if get(h.SignalEditing,'Value') == 1
            hPatch = ud1.hPatchSignal(ud.Signal_Nber);
        else
            hPatch = ud.hPatchSample(ud.Sample_Nber);
        end
        set(h.figure1,'WindowButtonMotionFcn' ,...
            {@figure1_WindowButtonMotionFcn_SampleSignal,hPatch, ud.cursor,pos3, axes3});
        set(h.figure1,'WindowButtonUpFcn' , @figure1_WindowButtonUpFcn);
        

    end
    
    ud.tcpu1 = cputime;

    
    
    
    %Update_CurrentSampleEdit;%(nS);
    %ud.cursor
% cursor within axesSpec
elseif ((xyout(1)>posSpec(1) && xyout(1)<posSpec(1)+posSpec(3) && xyout(2)>posSpec(2) && xyout(2)<posSpec(2)+posSpec(4))) 
     ud.cursor.axes = 4;
    xyout(1) = (xyout(1) - posSpec(1))/posSpec(3);

    xc = xyout(1);
    axisSpec  = axis(h.Spectrogram_axes);
    xmin = axisSpec(1); xmax = axisSpec(2); xamp = xmax-xmin;
    xct = xmin + xc*xamp; 
    ud.cursor.xct1 = xct;
    ud.tcpu1 = cputime;

    set(h.figure1,'userdata',ud);    
    
    %update cursor spectrum
    axes(h.Spectrogram_axes_cursor);
    axis([xmin xmax 0 1]);
    Update_CursorSpectrum
    
    set(h.figure1,'WindowButtonMotionFcn' , @figure1_WindowButtonMotionFcn);
    set(h.figure1,'WindowButtonUpFcn' , @figure1_WindowButtonUpFcn);
    
%cursor within axes 3
elseif Editing_View == 0 && ((xyout(1)>pos3(1) && xyout(1)<pos3(1)+pos3(3) && xyout(2)>pos3(2) && xyout(2)<pos3(2)+pos3(4))) 
    ud.cursor.axes = 3;
    xyout(1) = (xyout(1) - pos3(1))/pos3(3);
    xc = xyout(1);
    axis3  = axis(h.axes3);
    xmin = axis3(1); xmax = axis3(2); xamp = xmax-xmin;
    xct = xmin + xc*xamp; 
    ud.cursor.xct1 = xct;
    ud.cursor.xct2 = xct;
    ud.tcpu1 = cputime;
    set(h.figure1,'userdata',ud);    

    set(h.figure1,'pointer','custom','PointerShapeCData',ud.CursorRightLeft,'PointerShapeHotSpot',[8 9])

    %update cursor spectrum
    axes(h.cursor_axes3);
    axis([xmin xmax 0 1]);
    Update_cursor_axes3
    
    set(h.figure1,'WindowButtonMotionFcn' , @figure1_WindowButtonMotionFcn);
    set(h.figure1,'WindowButtonUpFcn' , @figure1_WindowButtonUpFcn);
    
    
end
%get(h.figure1,'WindowButtonMotionFcn')




function figure1_WindowButtonMotionFcn_SampleSignal(hfigure1, eventdata, hPatch, udcursor, pos3, axes3)
% hObject    handle to figure1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)


xy2 = get(hfigure1,'CurrentPoint');

xmin = axes3(1); xmax = axes3(2); ymin = axes3(3); ymax = axes3(4);
xc = ( min(max(pos3(1),xy2(1)),pos3(1)+pos3(3)) - pos3(1) )/pos3(3);
xct2 = xmin + xc*(xmax-xmin);

if ~isfield(udcursor,'action')  %%%%|| isempty(udcursor.action)
    set(hfigure1,'WindowButtonMotionFcn' , '')
    set(hfigure1,'WindowButtonUpFcn' , '')
    set(hfigure1,'pointer','arrow','PointerShapeHotSpot',[1 1]);
else
    if udcursor.action(1:5) == 'LeftS'
        x1 = udcursor.tS2;
        x2 = xct2;
    elseif udcursor.action(1:5) == 'Right'
        x1 = udcursor.tS1;
        x2 = xct2;
    elseif udcursor.action(1:5) == 'Slide'
        xtshift = xct2 - udcursor.xct1;
        x1 = udcursor.tS1+xtshift;
        x2 = udcursor.tS2+xtshift;
    else %ud.cursor.action == 'NewSample  '
        x1 = udcursor.xct1;
        x2 = xct2; min(xmax+ 0.02*(xmax-xmin),max(xct2,xmin- 0.02*(xmax-xmin)));
    end
set(hPatch, 'XData',[x1 x1 x2 x2 x1]);

end




% --- Executes on mouse motion over figure - except title and menu.
function figure1_WindowButtonMotionFcn(hObject, eventdata, handles)
% hObject    handle to figure1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
h = guidata(gcf);
figure(h.figure1)
ud = get(h.figure1,'userdata');
%fprintf('\n time_next = %0.3f \n',cputime-ud.tcpu1) 
ha1 = h.axes1;
ha3 = h.axes3;

pos = get(ha1,'position');
pos3 = get(ha3,'position');
posSpec = get(h.Spectrogram_axes,'position');
xy2 = get(h.figure1,'CurrentPoint');
ud1 = get(ha1,'userdata');
Editing_View = get(h.RR_Editing_View,'value');
 

%ud.cursor.slide = ud.cursor.slide+1;
% if ud.cursor.slide > 3
%      set(h.figure1,'WindowButtonMotionFcn' , '')
%      set(h.figure1,'WindowButtonUpFcn' , '')
% end
%set(h.figure1,'WindowButtonMotionFcn' , '')
%       set(h.figure1,'WindowButtonMotionFcn' , '')
%       set(h.figure1,'WindowButtonUpFcn' , '')

ud.tcpu1 = cputime;
%fprintf('WindowButtonMotion\n');

if Editing_View == 1
    %Do Nothing
   
elseif ud.cursor.axes == 4
    disp('SpecCursor OK' )
    xc = (xy2(1) - posSpec(1))/posSpec(3);

    axisSpec  = axis(h.Spectrogram_axes);
    xmin = axisSpec(1); xmax = axisSpec(2); xamp = xmax-xmin;
    xct = xmin + xc*xamp; 
    
    %   xc = ( min(max(pos3(1),xy2(1)),pos3(1)+pos3(3)) - pos3(1) )/pos3(3);
    xct = xmin + xc*(xmax-xmin);
    
    
    ud.cursor.xct1 = xct;
    set(h.figure1,'userdata',ud);
    Update_CursorSpectrum
else
    disp('Cursor axes3 OK' )
    xc = (xy2(1) - pos3(1))/pos3(3);

    axes3  = axis(h.axes3);
    xmin = axes3(1); xmax = axes3(2); xamp = xmax-xmin;
    xct = xmin + xc*xamp; 
    
    %   xc = ( min(max(pos3(1),xy2(1)),pos3(1)+pos3(3)) - pos3(1) )/pos3(3);
    xct = xmin + xc*(xmax-xmin);

    
    ud.cursor.xct2 = xct;
    set(h.figure1,'userdata',ud);  
    figure(h.figure1)
    Update_cursor_axes3

end
%pause(0.05)

%set(h.figure1,'WindowButtonMotionFcn' , @figure1_WindowButtonMotionFcn);
    
    
    
    
% --- Executes on mouse press over figure background, over a disabled or
% --- inactive control, or over an axes background.
function figure1_WindowButtonUpFcn(hObject, eventdata, handles)
% hObject    handle to figure1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
%'Up1'


h = guidata(gcf);
figure(h.figure1)
set(h.figure1,'WindowButtonMotionFcn' , '')
set(h.figure1,'WindowButtonUpFcn' , '')
set(h.figure1,'pointer','arrow','PointerShapeHotSpot',[1 1]);
ha1 = h.axes1;
ha3 = h.axes3;
val = get(h.RRmarkerstogglebutton,'Value');
ud = get(h.figure1,'userdata');
ud1 = get(ha1,'userdata');
xy2 = get(h.figure1,'CurrentPoint');
xy1 = ud1.xy1;
xy3 = ud1.xy3;
Editing_View = get(h.RR_Editing_View,'Value');
if Editing_View == 1
    if ~isempty(xy1) 
        pos = get(ha1,'position');
        
        x2 = ( min(max(pos(1),xy2(1)),pos(1)+pos(3)) - pos(1) )/pos(3);
        y2 = ( min(max(pos(2),xy2(2)),pos(2)+pos(4)) - pos(2) )/pos(4);
        
        subplot(ha1); axes1  = axis(ha1);
        xmin = axes1(1); xmax = axes1(2); ymin = axes1(3); ymax = axes1(4);
        
        %fprintf('norm = %f',sqrt(([x2 y2]-xy1)*([x2 y2]-xy1)')  )
        if sqrt(([x2 y2]-xy1)*([x2 y2]-xy1)') > 0.0001 && abs(x2-xy1(1))*(xmax-xmin)>1/ud.Fs %Zoom function (when is not double click)
            % Do Nothing
            
        elseif xy2(1)>pos(1) && xy2(1)<pos(1)+pos(3) && xy2(2)>pos(2) && xy2(2)<pos(2)+pos(4) && ~isempty(ud.tR)
            %if double click then find and add/remove on local Rpeaks
            %delete the square
            fprintf('\n Double click \n');
            if ~isempty(ud1.hPatch)
                delete(ud1.hPatch); ud1.hPatch = [];
            end
            ud = get(h.figure1,'userdata');
            Dt = 1/ud.Fs;
            ECGsig = ud.ECGsig;
            tsig = ud.tsig;
            m = length(tsig);
            nR = ud.nR;
            tR = ud.tsig(ud.nR);
            ECG_R = ud.ECGsig(ud.nR);
            tR1 = [];
            nR1 = [];
            axes(ha1); axis1 = axis(ha1);
            tclick = axis1(1) + x2*(axis1(2)-axis1(1));       
            
            %try first to find if there is any existing Rpeak close within the
            %display window
            ud.RRmin = 0.3;
            nR1 = find(abs(tclick-tR)<min(ud.RRmin/2,axis1(2)-axis1(1))  ); 
            % if several values selected, select the closest one to the click
            % location
            ns = find(abs(tclick-tR(nR1)) == min(abs(tclick-tR(nR1))));
            nR1 = nR1(ns);
            m1 = length(tR);
            if ~isempty(nR1) % found one close, remove it
                fprintf('one close\n')
                ud.tR = tR([1:nR1-1  nR1+1:m1]);
                ud.nR = nR([1:nR1-1 nR1+1:m1]);
                set(h.savebutton,'Enable','on','BackgroundColor',ud.orange,'ForegroundColor',[1 1 1])
                
            else %no close and existing peak found
                % try first to find a maximum +/- RRmin/2 distance away of click
                fprintf('find a new maximum\n')
                nw = floor(min(ud.RRmin/2,axis1(2)-axis1(1))*ud.Fs); %do not look beyond axis window
                %nw
                i1 = max(1 , max(ceil((tclick-ud.tsig(1))/Dt - nw),min(find(ud.tsig>=axis1(1)))) );
                i2 = min(m, min(floor((tclick-ud.tsig(1))/Dt + nw),max(find(ud.tsig<=axis1(2)))) );
                rg = i1:i2;
                nf = i1 - 1 + find(ECGsig(rg) == max(ECGsig(rg)));
                m_nf = length(nf);
                %             fprintf('nf = %d  ECGsig=%2.2g t=%2.2g\n',nf,ECGsig(nf),ud.tsig(nf));
                
                %             nf(m_nf)
                %             nf(1)+m_nf-1 
                if (length(nf) == 1  || nf(m_nf)==nf(1)+m_nf - 1 ) && nf(1)~=i1 && max(nf) ~= i2
                    %ECGsig(nf)
                    nw = 5; nf1 = nf(1);
                    if ECGsig(nf) > axis1(3) && ECGsig(nf) < axis1(4) %make sure that the peak is in the zoom window
                        %'looking'
                        ECGsig_interp = interp(ECGsig(nf1-nw:nf1+nw),10);
                        nRi = min(find(ECGsig_interp == max(ECGsig_interp)));
                        tR1 = tsig(nf1) + (nRi-nw*10-1)/10/ud.Fs;
                        nR1 = nf(find(ud.tsig(nf) - tR1 == min(ud.tsig(nf) - tR1)));
                        
                        %Add tR1 to the list of RRpos
                        in = max(find(nR<=nR1));
                        if isempty(in)
                            ud.nR = [nR1 ; nR]; 
                            ud.tR = [tR1 ; tR];                
                        elseif isempty(find(nR1 == nR))
                            ud.nR = [nR(1:in); nR1; nR(in+1:m1)];
                            ud.tR = [tR(1:in); tR1; tR(in+1:m1)];
                        end
                        set(h.savebutton,'Enable','on','BackgroundColor',ud.orange,'ForegroundColor',[1 1 1])
                        
                    end
                    
                end
                
                
            end %add peak
            
            set(h.figure1,'userdata',ud);
            figure(h.figure1)
            UpdateFinalSignal
            % Update IBI related plots
            
            Update_IBIplot('axes1')
            
            %Update_axes1(axis(h.axes1))
            %Update_SamplePatchesMeasures %done already in Update_IBIplot
            
            
            
        end %for double click
        
        
        
    elseif ~isempty(xy3)
        
        pos3 = get(ha3,'position');
        
        axes3  = axis(ha3);
        xmin = axes3(1); xmax = axes3(2); 
        xc = ( min(max(pos3(1),xy2(1)),pos3(1)+pos3(3)) - pos3(1) )/pos3(3);
        xct = xmin + xc*(xmax-xmin);
        
        xcold = ud1.xy3;
        xctold = ud.cursor.xct1;
        
        fprintf('norm = %f \n', abs(xc - xcold)  )
        
        %if abs(xct - xctold) > 0.0001 & abs(xct-xctold)>0.01; %1/ud.Fs % Release
        if  abs(xct - xctold) >= 0.1  % Release
            if ~isempty(findstr(ud.cursor.action , 'Signal'))
                nS = ud.cursor.nS;
                ud.Signal_Nber = nS;
                %disp('not here')
                
                if ud.cursor.action == 'LeftSignal '
                    ud.Signalt1(nS) = min(ud.tmax, max(round(xct*10)/10,ud.tmin));
                elseif ud.cursor.action == 'RightSignal'
                    ud.Signalt2(nS) = min(ud.tmax, max(round(xct*10)/10,ud.tmin));
                elseif ud.cursor.action == 'SlideSignal'
                    xtshift = xct - ud.cursor.xct1;
                    %fprintf('Slide %0.1fs (%0.1f-%0.1f)\n',xtshift,ud.cursor.tS1,ud.cursor.tS2)
                    ud.Signalt1(nS) = min(ud.tmax-1, max(round((ud.cursor.tS1 + xtshift)*10)/10,ud.tmin));
                    ud.Signalt2(nS) = min(ud.tmax, max(round((ud.cursor.tS2 + xtshift)*10)/10,ud.tmin+1));
                else %ud.cursor.action == 'NewSignal  '
                    %disp('NewSignal motion OK' )
                    t2 = min(ud.tmax, max(round(xct*10)/10,ud.tmin));
                    t1 = min(ud.tmax-1, max(round(ud.cursor.xct1*10)/10,ud.tmin+1));
                    ud.Signalt1(nS) = min(t1,t2);
                    ud.Signalt2(nS) = max(t1,t2);
                    
                    %ud.Nber_of_Signals = ud.Nber_of_Signals + 1;
                    ud.SignalLabel{nS} = sprintf('%d',nS);
                end
                
                
            elseif  ~isempty(findstr(ud.cursor.action , 'Sample'))
                
                
                nS = ud.cursor.nS;
                ud.Sample_Nber = nS;
                %disp('not here')
                
                if ud.cursor.action == 'LeftSample '
                    ud.Samplet1(nS) = min(ud.tmax, max(round(xct*10)/10,ud.tmin));
                elseif ud.cursor.action == 'RightSample'
                    ud.Samplet2(nS) = min(ud.tmax, max(round(xct*10)/10,ud.tmin));
                elseif ud.cursor.action == 'SlideSample'
                    xtshift = xct - ud.cursor.xct1;
                    %fprintf('Slide %0.1fs (%0.1f-%0.1f)\n',xtshift,ud.cursor.tS1,ud.cursor.tS2)
                    ud.Samplet1(nS) = min(ud.tmax-1, max(round((ud.cursor.tS1 + xtshift)*10)/10,ud.tmin));
                    ud.Samplet2(nS) = min(ud.tmax, max(round((ud.cursor.tS2 + xtshift)*10)/10,ud.tmin+1));
                else %ud.cursor.action == 'NewSample  '
                    %disp('NewSample motion OK' )
                    t2 = min(ud.tmax, max(round(xct*10)/10,ud.tmin));
                    t1 = min(ud.tmax-1, max(round(ud.cursor.xct1*10)/10,ud.tmin+1));
                    ud.Samplet1(nS) = min(t1,t2);
                    ud.Samplet2(nS) = max(t1,t2);
                    
                    %ud.Nber_of_Samples = ud.Nber_of_Samples + 1;
                    ud.SampleLabel{nS} = 'New Sample';
                end
            end
            
            
        elseif (xy2(1)>pos3(1) && xy2(1)<pos3(1)+pos3(3) && xy2(2)>pos3(2) && xy2(2)<pos3(2)+pos3(4)) % double click
            fprintf('\n Double click \n');
            %            rg = [1:ud.Sample_Nber-1 ud.Sample_Nber+1:ud.Nber_of_Samples];
            %          dist = abs(mean([ud.Samplet1(rg);ud.Samplet2(rg)]-mean([ud.Samplet1(ud.Sample_Nber) ud.Samplet2(ud.Sample_Nber)])));
            %           ud.Sample_Nber = find(dist == min(dist));
            % 
            %          Update_SamplePatches
            %for now do not do anything
            % will be excluding R points for SignalSample 
        end
        ud1.xy1 = [];
        ud1.xy3 = [];
        set(ha1,'userdata',ud1);
        set(h.figure1,'userdata',ud);
        %Update_SamplePatches(nS)
        
        if Editing_View == 1
            if ~isempty(findstr(ud.cursor.action , 'Signal')) 
                Clean_SignalSample
            elseif  ~isempty(findstr(ud.cursor.action , 'Sample'))
                Clean_HRVSample
            end
        end
        Update_IBIplot
        ud = get(h.figure1,'userdata');
        
        ud.cursor = [];
        set(h.figure1,'userdata',ud);
        
        
        
    end 
    
elseif ud.cursor.axes == 3
        axes(h.cursor_axes3); cla; hold off;
        
        pos3 = get(ha3,'position');
        axes1 = axis(ha1);
        axes3  = axis(ha3);
        xmin = axes3(1); xmax = axes3(2); 
        xc = ( min(max(pos3(1),xy2(1)),pos3(1)+pos3(3)) - pos3(1) )/pos3(3);
        xct = xmin + xc*(xmax-xmin);
        
        xctold = ud.cursor.xct1;
        
        if  abs(xct - xctold) >= max(0.02*(xmax-xmin),2) % making sure that the window is not too small
            xmin_new = max(xmin, min(xmax,min(xct,xctold)));
            xmax_new = max(xmin, min(xmax,max(xct,xctold)));
            axisnew = [xmin_new  xmax_new  axes1(3:4)];
            set(h.RRzoomtogglebutton,'Value', 1);
            Update_axes1(axisnew)
        end
        ud.cursor = [];
        set(h.figure1,'userdata',ud);
 
            
else
    
    
    % Update cursor graph
    %axes(h.Spectrogram_axes_cursor); cla; hold off;
    
    %update FFT plot
    
    %axes(h.Spec_cursor_FFTaxes); cla
    ud.cursor = [];
    set(h.figure1,'userdata',ud);

end



function Update_CursorSpectrum

fprintf('Update Cursor Spectrum')
%periodogram for EDR
h = guidata(gcf);
figure(h.figure1);
ud = get(h.figure1,'userdata');

nS = ud.Sample_Nber;


dxt = abs(ud.Spectrogram(nS).xt - ud.cursor.xct1);
nt = find(dxt == min(dxt));
xtmax = max(ud.Spectrogram(nS).xt);
xtmin = min(ud.Spectrogram(nS).xt);

%plot cursor line
set(h.figure1,'pointer','custom','PointerShapeCData',ud.CursorRightLeft,'PointerShapeHotSpot',[8 9])

axes(h.Spectrogram_axes_cursor); cla; hold off;

xtline = min(max(ud.cursor.xct1,xtmin),xtmax);
hcursor = line([xtline;xtline],[0 1]);
set(hcursor,'Color','b')

%update FFT plot
axes(h.Spec_cursor_FFTaxes); cla

Fp = ud.Spectrogram(nS).xf_pwr;
%rgf = find(Fp>ud.LFmin & Fp<ud.HFmax); %limit to LF-HF region for calculation and axis limits
rgf = find(Fp<ud.HFmax); %limit to LF-HF region for calculation and axis limits

%as = ud.Spectrogram(nS).scale;
% as = 1;
% y_SpecPwr = abs(ud.Spectrogram(nS).y(:,rgf)).^2./as; % transform to spectral density (deviding by as)
y_SpecPwr = ud.Spectrogram(nS).ypwr(:,rgf);

hx = line(Fp(rgf),y_SpecPwr(nt,:)); set(hx,'Color','b')
%axis off
hold on
Spec_pwrmean = mean(y_SpecPwr,1);
%Spec_pwrmean = mean(abs(ud.Spectrogram(nS).y(:,rgf)).^2,1).*ud.Spectrogram(nS).scale(rgf);
hx = line(Fp(rgf),Spec_pwrmean); set(hx,'Color','b','LineStyle','--')

% %patch for VLF
% DFp = Fp(2)-Fp(1);
% 
% rg = find(Fp-ud.VLFmin >= DFp/2 & Fp-ud.VLFmax < DFp/2 ); rg1 = rg(1); rg2 = rg(length(rg));
% 
% patch([Fp(rg1);Fp(rg);Fp(rg2);Fp(rg1)],[0;Spec_pwr(rg);0;0],magenta_fill);
% 
% rg = find(Fp-ud.LFmin >= DFp/2 & Fp-ud.LFmax < DFp/2); rg1 = rg2; rg(1); rg2 = rg(length(rg));
% patch([Fp(rg1);Fp([rg1;rg]);Fp(rg2);Fp(rg1)],[0;Spec_pwr([rg1;rg]);0;0],yellow_fill);
% 
% rg = find(Fp- ud.HFmin >= DFp/2 & Fp - ud.HFmax < DFp/2); rg1 = rg2; rg(1); rg2 = rg(length(rg));
% patch([Fp(rg1);Fp([rg1;rg]);Fp(rg2);Fp(rg1)],[0;Spec_pwr([rg1;rg]);0;0],blue_fill);

%axisFFT = axes(h.FFT_axes)
%set(h.Spec_cursor_FFTaxes,'YTickLabelMode','auto','YTickLabel','auto','YAxisLocation','right','Ycolor','blue')
rgf = find((Fp(rgf)<=ud.HFmax).*(Fp(rgf)>=ud.LFmin));
axis([0 ud.HFmax 0 max([y_SpecPwr(nt,rgf) Spec_pwrmean(rgf) ])])
%axis(axis(h.FFT_axes));


function Update_cursor_axes3
h = guidata(gcf);
ud = get(h.figure1,'userdata');
axes3 = axis(h.axes3);

axes(h.cursor_axes3); cla; hold off;


xtline1 = min(max(ud.cursor.xct1,axes3(1)),axes3(2));
xtline2 = min(max(ud.cursor.xct2,axes3(1)),axes3(2));
hpatch = patch([xtline1; xtline1; xtline2 ;xtline2; xtline1],[0; 1; 1; 0; 0],0.7*[1 1 1]); set(hpatch,'FaceAlpha',0.5);
hcursor = line([xtline1;xtline1],[0 1]);
set(hcursor,'Color','k','LineWidth',1,'LineStyle','--');
hcursor = line([xtline2;xtline2],[0 1]);
set(hcursor,'Color','k','LineWidth',1,'LineStyle','--');






  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  %%%%%%%%%%                                                        %%%%%%%%%%
  %%%%%%%%%%                Mouse Slider Control                    %%%%%%%%%%
  %%%%%%%%%%                                                        %%%%%%%%%%
  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%




% --- Executes on slider movement.
function slider1_Callback(hObject, eventdata, handles)
% hObject    handle to slider1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'Value') returns position of slider
%        get(hObject,'Min') and get(hObject,'Max') to determine range of slider
fprintf('slider1 \n');
v1 = get(hObject,'Value');

h = guidata(gcf);
axisold = axis(h.axes1);
ud = get(h.figure1,'userdata');
tamp = ud.tmax - ud.tmin;
dx = axisold(2)-axisold(1);
xmin = ud.tmin + (tamp - dx)*(v1 - ud.tmin)/tamp;
xmax = xmin + dx; 

Update_axes1([xmin xmax axisold(3) axisold(4)]);





% --- Executes on slider movement.
function slider2_Callback(hObject, eventdata, handles)
% hObject    handle to slider2 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'Value') returns position of slider
%        get(hObject,'Min') and get(hObject,'Max') to determine range of slider

v1 = get(hObject,'Value');
h = guidata(gcf);
axisold = axis(h.axes1);
ud1 = get(h.axes1,'userdata');
ECGamp = ud1.ECGmax - ud1.ECGmin;
dy = axisold(4)-axisold(3);
ymin = ud1.ECGmin + (ECGamp - dy)*(v1 - ud1.ECGmin)/ECGamp;
ymax = ymin + dy; 

Update_axes1([axisold(1) axisold(2) ymin ymax]);



  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  %%%%%%%%%%                                                        %%%%%%%%%%
  %%%%%%%%%%                Find and Edit RR peaks                  %%%%%%%%%%
  %%%%%%%%%%                                                        %%%%%%%%%%
  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%



% --- Executes on button press in pushbutton1.
function Del_Rpeak_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)


% --- Executes on button press in pushbutton2.
function Add_Rpeak_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton2 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)




% --- Executes on button press in RRmarkerstogglebutton.
function Find_Rpeaks_Callback(hObject, eventdata, handles)
% hObject    handle to RRmarkerstogglebutton (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of RRmarkerstogglebutton


val = get(hObject,'Value');
h = guidata(gcf);
ud = get(h.figure1,'userdata');
set(h.RRmarkerstogglebutton,'BackgroundColor',ud.blue1) 

if val == 1 %toggle push down
    if isempty(ud.tR) %find R peaks and plot results
        set(h.figure1,'pointer','watch')
        pause(0.03)
        %Launch Rpeaks detection
        [ud.nR, RRout, ud.tR] = findRpeaks(ud.ECGsig, ud.tsig, ud.Fs, ud.RRmin, 3);
        if ud.ECGfiltered ~= 'yes'
            [ud.nRfil, RRoutfil, ud.tRfil] = findRpeaks(ud.ECGfil, ud.tsig, ud.Fs, ud.RRmin, 3);
        end
        figure(h.figure1);
        set(h.figure1,'userdata',ud);

        % Update IBI related plots
        Update_IBIplot

        set(h.figure1,'pointer','arrow')
             
        
        set(h.savebutton,'Enable','on','BackgroundColor',ud.orange,'ForegroundColor',[1 1 1])

    else %make handle of peaks visible
        ud1 = get(h.axes1,'userdata');
        set([ud1.hIBI3; h.axes3; ud1.hPatch3] ,'Visible','on');
        if isfield(ud,'save')
            if ud.save == 1
                set(h.savebutton,'Enable','on','BackgroundColor',ud.orange,'ForegroundColor',[1 1 1])
            end
        end
    end
%     for idx = [ 4 ud.idxRR]
%          set(ud.filemenu_handles(idx),'Enable','on');
%     end     
    set(ud.file_saveClearRR_handles,'Enable','on');
    set(h.RRzoomtogglebutton,'Enable','on','Value',0);
else
    if ~isempty(ud.tR) %make handle of peaks not visible
        ud1 = get(h.axes1,'userdata');
        set([ud1.hIBI; ud1.hIBI3; h.axes3; ud1.hPatch3] ,'Visible','off');
        ud.save = strcmp(get(h.savebutton,'Enable'), 'on');
        set(h.figure1,'userdata',ud);

     set(ud.file_saveClearRR_handles,'Enable','off');

%         for idx = ud.idxRR
%             set(ud.filemenu_handles(idx),'Enable','off');
%         end  
        set(h.savebutton,'Enable','off','BackgroundColor',ud.blue_enable_back,'ForegroundColor',ud.blue_enable_for)
        
        set(h.RRzoomtogglebutton,'Enable','off','Value',0);
    end

end
Update_axes1(axis(h.axes1));

%if ~isempty(find(tR>=ud.Samplet1 & tR<=ud.Samplet2))
%Update_TimeFreqMeasure
   



  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  %%%%%%%%%%                                                        %%%%%%%%%%
  %%%%%%%%%%                Mouse Button Control                    %%%%%%%%%%
  %%%%%%%%%%                                                        %%%%%%%%%%
  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%



% --- Executes on button press in togglebutton2.
function Scroll_right_Callback(hObject, eventdata, handles)
% hObject    handle to togglebutton2 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of togglebutton2






% --------------------------------------------------------------------
function AddRpeak_Callback(hObject, eventdata, handles)
% hObject    handle to AddRpeak (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
% h = guihandles(gcf);
% ud = get(gcf,'userdata');
% RRmin = 0.3;
% if ud.ECG
% [RRpos, RRout,tpos] = findRpeaks(ud.ECGsig, ud.Fs, RRmin, 3);

% --------------------------------------------------------------------
function DelRpeak_Callback(hObject, eventdata, handles)
% hObject    handle to DelRpeak (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)



  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  %%%%%%%%%%                                                        %%%%%%%%%%
  %%%%%%%%%%               Zoomout Function                         %%%%%%%%%%
  %%%%%%%%%%                                                        %%%%%%%%%%
  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%



% --- Executes on button press in pushzoomout.
function pushzoomout_Callback(hObject, eventdata, handles)
% hObject    handle to pushzoomout (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)



h = guidata(gcf);
fig = figure(h.figure1);
ud = get(h.figure1,'userdata');

set(h.pushzoomout,'BackgroundColor',ud.blue1);
axisold = axis(h.axes1);
ud1 = get(h.axes1,'userdata');
dx = axisold(2)-axisold(1);
dy = axisold(4)-axisold(3);
x1new = axisold(1)-dx/2; x2new = axisold(2)+dx/2;
ij = find(ud.tsig>x1new & ud.tsig<x2new);
%y1lim = min(ud.ECGsig(ij));
%y2lim = max(ud.ECGsig(ij));
y1lim = min(ud.ECGsig(ij));
y2lim = max(ud.ECGsig(ij));
% y1limmax = min(ud.ECGsig);
% y2limmax = max(ud.ECGsig);
y_amp = y2lim-y1lim;

try
    ECGamp = ud1.ECGmax - ud1.ECGmin;
catch
    ampECG = max(ud.ECGsig) - min(ud.ECGsig);
    ud1.ECGmin = min(ud.ECGsig)-0.1*ampECG;
    ud1.ECGmax = max(ud.ECGsig)+0.1*ampECG;
    ECGamp = ud1.ECGmax - ud1.ECGmin;
    set(h.axes1,'userdata',ud1);
end


y1lim = max(y1lim-y_amp*0.1,ud1.ECGmin); y2lim = min(y2lim+y_amp*0.1,ud1.ECGmax); %extending upper/lower limits a little bit
y1 = max(axisold(3)-dy/2,y1lim );
y2 = min(axisold(4)+dy/2,y2lim );

if y2 < y1lim
    y2 = y2lim;
elseif y1 > y2lim
    y1 = y1lim;
end

% if y2lim<axisold(3)-dy/2
%     %y2 = min(axisold(4)+dy/2,ud1.ECGmax);
%     y2 = min(y2,ud1.ECGmax);
% elseif y1lim>axisold(4)+dy/2
%     %y1 = max(axisold(3)-dy/2,ud1.ECGmin);
%     y1 = max(y1,ud1.ECGmin);
% end
    
%DA----------
if or(isempty(y1), isempty(y2))
    y1 = 0;
    y2 = 1;
end
%DA-------
Update_axes1([ max(x1new,ud.tmin)  min(x2new,ud.tmax)  ...
            y1   y2  ]);


% --- Executes on button press in RRzoomtogglebutton.
function RRzoomtogglebutton_Callback(hObject, eventdata, handles)
% hObject    handle to RRzoomtogglebutton (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of RRzoomtogglebutton
 
h = guidata(gcf);
Update_axes1(axis(h.axes1));
ud = get(h.figure1,'userdata');
Update_PatchSignal;

% --- Executes on button press in invertEKGpushbutton.
function invertEKGpushbutton_Callback(hObject, eventdata, handles)
% hObject    handle to invertEKGpushbutton (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of invertEKGpushbutton
h = guidata(gcf);
ha1 = h.axes1;
ud = get(h.figure1,'userdata');
ud1 =  get(ha1,'userdata');
val = get(hObject,'Value');


ud.ECGsig = -ud.ECGsig; 
ud.tR= [];
ud.nR= [];

set(h.figure1,'userdata',ud);

if ~isempty(ud1.hIBI3)
    delete(ud1.hIBI3); ud1.hIBI3 = [];
end
if ~isempty(ud1.hIBI)
    delete(ud1.hIBI); ud1.hIBI = [];
end
%  Since ud.tR is empty make handle of peaks not visible and Value
%  of RR toggle off
axes(h.axes3); axis off; set(h.axes3,'visible','off')
if ~isempty(ud1.hPatch3)
    delete(ud1.hPatch3); ud1.hPatch3 = [];
end
if ~isempty(ud1.hPatch)
    delete(ud1.hPatch); ud1.hPatch = [];
end

%set(ud.filemenu_handles(4),'Enable','off');
% for idx = ud.idxRR
%     set(ud.filemenu_handles(idx),'Enable','off');
% end  
set(ud.file_saveClearRR_handles,'Enable','on');


set(h.RRmarkerstogglebutton,'Value',0); 
set(h.RRzoomtogglebutton,'Enable','off','Value',0);

ampECG = [max(ud.ECGsig)-min(ud.ECGsig)];
ud1.ECGmin = min(ud.ECGsig)-0.1*ampECG;
ud1.ECGmax = max(ud.ECGsig)+0.1*ampECG;

ud2 = get(h.axes2,'userdata');
if ~isempty(ud2.hPatch2)
    delete(ud2.hPatch2); ud2.hPatch2 = [];
end
hold off
axes(h.axes2); cla; 
m = length(ud.tsig);
if m>100000
    di = floor(m/100000);
    h2 = line(ud.tsig(1:di:m),ud.ECGsig(1:di:m)); %set(h2,'FaceAlpha',0.5);
else
    h2 = line(ud.tsig,ud.ECGsig); %set(h2,'FaceAlpha',0.5);
end
%set(h.axes2,'userdata',ud2,'Ytick',[],'xtick',[])
set(h.axes2,'userdata',ud2); %,'YtickMode','auto','xtickMode','auto')
axisnew = [ud.tmin ud.tmax ud1.ECGmin ud1.ECGmax];
axis(axisnew); 
set(h.axes2, 'XAxisLocation','top','YtickMode','auto','xtickMode','auto')

%plot graph on axes1
axes(h.axes1); hold off;

%rg = find(ud.ECGsig == 0);
%ysig = ud.ECGsig; ysig(rg)= NaN;


if m>100000
    di = floor(m/100000);
    line(ud.tsig(1:di:m),ud.ECGsig(1:di:m)); %set(h2,'FaceAlpha',0.5);
    %line(ud.tsig(1:di:m),ysig(1:di:m)); %set(h2,'FaceAlpha',0.5);
else
    line(ud.tsig,ud.ECGsig); %set(h2,'FaceAlpha',0.5);
    %line(ud.tsig,ysig); %set(h2,'FaceAlpha',0.5);
end
set(h.axes1,'userdata',ud1);
        
Update_axes1(axisnew);


% --- Executes during object creation, after setting all properties.
function Fs_edit_CreateFcn(hObject, eventdata, handles)
% hObject    handle to edit3 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
blue2 = [202 232 255]/255; %light blue
if ispc
    set(hObject,'BackgroundColor',blue2); %'white');
else
    set(hObject,'BackgroundColor',get(0,'defaultUicontrolBackgroundColor'));
end



function Fs_edit_Callback(hObject, eventdata, handles)
% hObject    handle to edit3 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of edit3 as text
%        str2double(get(hObject,'String')) returns contents of edit3 as a double
orange = [255 128 128]/255;



h = guidata(gcf);
ha1 = h.axes1;
ud = get(h.figure1,'userdata');

Fs_tmp = str2double(get(hObject,'String'))

if Fs_tmp >= 1 & Fs_tmp <=2000 
    Fsold = ud.Fs;
    ud.Fs = Fs_tmp;
    m = length(ud.ECGsig);
    
    %ud.tsig = (0:m-1)/ud.Fs;
    ud.tsig = ud.tsig*Fsold/ud.Fs;
    set(h.figure1,'userdata',ud);

    
    
    ud1 =  get(ha1,'userdata');
    if ~isempty(ud1.hIBI3)
        delete(ud1.hIBI3); ud1.hIBI3 = [];
    end
    if ~isempty(ud1.hIBI)
        delete(ud1.hIBI); ud1.hIBI = [];
    end
    
    ud.tmin = min(ud.tsig);
    ud.tmax = max(ud.tsig);
    ampECG = [max(ud.ECGsig)-min(ud.ECGsig)];
    ud1.ECGmin = min(ud.ECGsig)-0.1*ampECG;
    ud1.ECGmax = max(ud.ECGsig)+0.1*ampECG;
    set(h.axes1,'userdata',ud1);
    
    %Update Axes1
    Update_axes2
    
    %plot graph on axes1
    axis1 = axis(h.axes1);
    axisnew = [axis1(1)*Fsold/ud.Fs axis1(2)*Fsold/ud.Fs axis1(3) axis1(4)];
    Update_axes1(axisnew);
    
    axis(axisnew);  

    
    
    %%%%%%%%%%%%%% AFFECT RR data if THEY EXIST 
    
    if isempty(ud.tR)==0 & isempty(ud.nR)==0  
        ud.tR = ud.tR*Fsold/ud.Fs; 
        ud.tRfil = ud.tRfil*Fsold/ud.Fs; 
        
        set(h.figure1,'userdata',ud);
        
        %------ plot RR results
        figure(h.figure1);
        % plot Rpeaks in axes 1
        Update_IBIplot
        
        %Update_axes1(axis1); 
        
        set(h.savebutton,'Enable','on','BackgroundColor',ud.orange,'ForegroundColor',[1 1 1])


        
    end
    
    
    
else
    set(hObject,'String','Error')
end





%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%                                                        %%%%%%%%%%
%%%%%%%%%%               Update Axis Function                     %%%%%%%%%%
%%%%%%%%%%                                                        %%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%




% --------------------------------------------------------------------
function Update_axes1(axisnew)
fprintf('Update axis\n')
h = guidata(gcf);
fig = figure(h.figure1);

ha1 = h.axes1;
axisold = axis(ha1); 
ud1 = get(ha1,'userdata');
ud = get(h.figure1,'userdata');
axisnew;
val_RRzoom = get(h.RRzoomtogglebutton,'Value');
val_RRmarkers = get(h.RRmarkerstogglebutton,'Value');

%%%%%%%%%%%%%%%%%%%%%%%%% Calculate final axes limits for axes1  %%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%           and slider values            %%%%%%%%%%%%%%%%%%%%%%%


dx0 = (axisnew(2)-axisnew(1));
dy0 = (axisnew(4)-axisnew(3));

% set slider1 values
if ud.tmax <= axisnew(2) & ud.tmin >= axisnew(1)
    vs = get(h.slider1,'value');
    set([h.slider1;h.slider1b],'min',ud.tmin,'max',ud.tmax);
    set([h.slider1;h.slider1b],'Enable','off','SliderStep',[1 inf]);
    set([h.slider1;h.slider1b],'Value',max(min(vs,ud.tmax),ud.tmin));
    xmin = ud.tmin;
    xmax = ud.tmax;
else
    xmin = max(axisnew(1),ud.tmin);
    xmax = min(axisnew(2),ud.tmax);
    dx = (xmax-xmin);
    set(h.slider1,'min',ud.tmin,'max',ud.tmax);
    tamp = (ud.tmax-ud.tmin);
    dxs = min(dx/(tamp-dx),1);
    vx = ud.tmin + (xmin-ud.tmin)*tamp/(tamp-dx);
    set([h.slider1;h.slider1b],'Enable','on','Value',vx,'SliderStep',[dxs*0.1 dxs*0.5])
end
% set slider2 values

try
    ECGamp = ud1.ECGmax - ud1.ECGmin;
catch
    ud.tmin = min(ud.tsig);
    ud.tmax = max(ud.tsig);
    ampECG = [max(ud.ECGsig)-min(ud.ECGsig)];
    ud1.ECGmin = min(ud.ECGsig)-0.1*ampECG;
    ud1.ECGmax = max(ud.ECGsig)+0.1*ampECG;
end


if axisnew(3) <= ud1.ECGmin + 0.1*ECGamp & axisnew(4) >= ud1.ECGmax - 0.1*ECGamp
    vs = get(h.slider1,'value');
    set(h.slider2,'min',ud1.ECGmin,'max',ud1.ECGmax);
    set(h.slider2,'Enable','off','SliderStep',[1 inf]);
    set([h.slider1;h.slider1b],'Value',max(min(vs,ud.tmax),ud.tmin));
    ymin = ud1.ECGmin;
    ymax = ud1.ECGmax;
else
    ymin = min(max(axisnew(3),ud1.ECGmin),ud1.ECGmax);
    ymax = max(min(axisnew(4),ud1.ECGmax),ud1.ECGmin);
    dy = (ymax-ymin);
    set(h.slider2,'min',ud1.ECGmin,'max',ud1.ECGmax);
    dys = min(dy/(ECGamp-dy),1);
    vy = ud1.ECGmin + (ymin-ud1.ECGmin)*ECGamp/(ECGamp-dy);
    set(h.slider2,'Enable','on','Value',vy,'SliderStep',[dys*0.1 dys*0.5])
end
axis1final = [xmin xmax ymin ymax]; 


if get(h.RR_Editing_View,'Value') == 1
    %%%%%%%%%%%%%%%%%%%%% Updating axes1  %%%%%%%%%%%%%%%%%
    
    axes(h.axes1); cla; 
%     rg = find(ud.ECGsig == 0);
%     ysig = ud.ECGsig; ysig(rg)= NaN;


    rg = find(ud.tsig > xmin & ud.tsig<xmax);
    
    mg = length(rg);
    if mg>100000
        di = floor(mg/100000);
        %line(ud.tsig(rg(1):di:rg(mg)),ysig(rg(1):di:rg(mg)));
        line(ud.tsig(rg(1):di:rg(mg)),ud.ECGsig(rg(1):di:rg(mg)));
        if strcmp(ud.ECGfiltered,'yes')==0 && length(ud.ECGfil) == length(ud.tsig)
            hold on; h1 = line(ud.tsig(rg(1):di:rg(mg)),ud.ECGfil(rg(1):di:rg(mg)),'color',[1 0 0]);
        end
    else
        line(ud.tsig(rg),ud.ECGsig(rg)); 
        %line(ud.tsig(rg),ysig(rg)); 
        if strcmp(ud.ECGfiltered,'yes')==0 && length(ud.ECGfil) == length(ud.tsig)
        %if ud.ECGfiltered ~= 'yes' & size(ud.ECGfil) == size(ud.tsig)
            hold on; h1 = line(ud.tsig(rg),ud.ECGfil(rg),'color',[1 0 0]);
        end
    end
    %fprintf('val %d',val_RRmarkers);
    if ~isempty(ud.nR) && (val_RRmarkers == 1)
        fprintf('hIBIold = %2.6g (Update axis1)\n',ud1.hIBI)

        rg = find(ud.tsig(ud.nR) > xmin & ud.tsig(ud.nR) < xmax);
        rg=[find(ud.tsig(ud.nR) < xmin,1,'last'); rg; find(ud.tsig(ud.nR) > xmax,1,'first')];

        ud1.hIBI = line(ud.tsig(ud.nR(rg)),ud.ECGsig(ud.nR(rg)));
        fprintf('hIBI = %2.6g (Update axis1)\n',ud1.hIBI)
        
        if (xmax-xmin)<ud.RRmin*60
            set(ud1.hIBI,'Marker','.','MarkerSize',20,'Color',[1 0 0],'Linestyle','none');
        else
            set(ud1.hIBI,'Marker','.','MarkerSize',15,'Color',[1 0 0],'Linestyle','none');
        end
    end  
    if ~isempty(ud.tR2) && (val_RRmarkers == 1)
        rg = find(ud.tsig(ud.nR2) > xmin & ud.tsig(ud.nR2) < xmax);
        ud1.hIBI2 = line(ud.tsig(ud.nR2(rg)),ud.ECGsig(ud.nR2(rg)));
        ud1.hIBI2b = line(ud.tR2(rg)+ud.tR2offset,ud.ECGsig(ud.nR2(rg)));
        if (xmax-xmin)<ud.RRmin*60
            set(ud1.hIBI2,'Marker','x','MarkerSize',15,'Color',[1 0 0],'Linestyle','none');
            set(ud1.hIBI2b,'Marker','+','MarkerSize',15,'Color',[1 0 0],'Linestyle','none');
        else
            set(ud1.hIBI2,'Marker','x','MarkerSize',15,'Color',[1 0 0],'Linestyle','none');
            set(ud1.hIBI2b,'Marker','+','MarkerSize',15,'Color',[1 0 0],'Linestyle','none');
        end
    end
    
    
    axes(h.axes1);
    axis(axis1final);
    % pause
    % figure(fig)
    set(ha1,'userdata',ud1);
    
    
    %%%%%%%%%%%%%%%%%%%%% Update square on axes2 %%%%%%%%%%%%%%%%%%%%%%%%%%
    axes(h.axes2);
    
    ud2 = get(h.axes2,'userdata');
    hold on
    try
        if ~isempty(ud2.hPatch2)
            delete(ud2.hPatch2); ud2.hPatch2 = [];
        end
    catch
    end
    axes(h.axes2);
    ud2.hPatch2 = patch([xmin xmin xmax xmax xmin],[ymin ymax ymax ymin ymin],[255 128 128]/255); set(ud2.hPatch2,'FaceAlpha',0.5);
    
    set(h.axes2,'userdata',ud2);
    hold off; 
    
    
else
    axes(h.axes1);
    axis(axis1final);

end

%%%%%%%%%%%%%%%%%%%% Update square on axes3 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%
if ~isempty(ud1.hIBI3) & (val_RRmarkers==1);
    axis1 = axis(h.axes1);
    axis3 = axis(h.axes3);
    m = length(ud.tR);
    tIBI = 1000*(ud.tR(2:m)-ud.tR(1:m-1));
    
    axes(h.axes3);
    
    if val_RRzoom == 1
        if ~isempty(ud1.hPatch3)
            %delete(ud1.hPatch3); ud1.hPatch3 = [];
            try %try to delete ud1.hPatch3 but if it got deleted by mistake, 
                %set as empty to avoid stopping the program and issuing an error
                if ~isempty(ud1.hPatch3)
                    delete(ud1.hPatch3); ud1.hPatch3 = [];
                end
            catch
                hall = allchild(h.axes3);
                nh = find(strcmp(get(hall,'Type'),'patch')); beep; pause(0.2);beep; fprintf('Beep on line 4402\n') %pause 
                delete(hall(nh)); 
                ud1.hPatch3 = [];
            end
        end
        

        rg = find(ud.tR>=xmin & ud.tR<=xmax);
        
        if isempty(rg)
            rg = min([length(tIBI);find(ud.tR>=xmin)]);
        end
        mrg = length(rg);
        rg = max(1,rg(1)-1):min(rg(mrg)+1,m);
        rg = rg(rg<=length(tIBI)); %make sure that rg is less than length(tIBI)

        axis3(1) = axis1(1); %ud.tR(rg1); 
        axis3(2) = axis1(2); %ud.tR(rg2);
        %------------ Didier v3.2 12/16/2009 --------------------
        % Limiting how high/low IBI axis 
%         axis3(3) = 0.98*min(tIBI(rg)) ;
%         axis3(4) = 1.02*max(tIBI(rg));
        tIBImin = 300; tIBImax = 3000;
        axis3(3) = 0.98*max(tIBImin, min(tIBI(rg))); 
        axis3(4) = 1.02*min(tIBImax, max(tIBI(rg)));
        %------------ Didier -----------------------
  
    else
        ymin = 0.98*min(tIBI);
        ymax = 1.02*max(tIBI);
        axis3(1) = ud.tsig(1); axis3(2) = ud.tsig(length(ud.tsig)); 
        %------------ Didier v3.2 12/16/2009 --------------------
        % Limiting how high/low IBI axis 
        %axis3(3) = ymin; axis3(4) = ymax;
        tIBImin = 300; tIBImax = 3000;
        axis3(3) = max(tIBImin, ymin); 
        axis3(4) = min(tIBImax, ymax);
        %------------ Didier -----------------------

        hold on;
        try %try to delete ud1.hPatch3 but if it got deleted by mistake, 
            %set as empty to avoid stopping the program and issuing an error
            if ~isempty(ud1.hPatch3)
                delete(ud1.hPatch3); ud1.hPatch3 = [];
            end
        catch
            ud1.hPatch3 = [];
            hall = allchild(h.axes3);
            nh = find(strcmp(get(hall,'Type'),'patch')); beep; pause(0.2);beep; fprintf('Beep on line 4450\n')
            delete(hall(nh)); 
            ud1.hPatch3 = [];
        end
        %ud1.hPatch3 = plot([xmin xmin xmax xmax xmin],[ymin ymax ymax ymin ymin],':r')
        ud1.hPatch3 = patch([xmin xmin xmax xmax xmin],[ymin ymax ymax ymin ymin],[255 128 128]/255); 
        set(ud1.hPatch3,'FaceAlpha',0.5,'EdgeColor',[255 128 128]/255,'LineWidth',2)
    end
    set(ha1,'userdata',ud1);
    axis(axis3);

    hold off;
    
    %set(ha1,'userdata',ud1);
else
    axes(h.axes3);
    axis1 = axis(h.axes1);
    axis([axis1(1) axis1(2) 0 1 ]);
end

ud = get(h.figure1,'userdata');
axis3 = axis(h.axes3);
Update_axislimit('ALL')


if  isempty(ud.EDRsig)
    hall = allchild(h.EDRaxes3);
    nh = find(strcmp(get(hall,'Type'),'line'));
    delete(hall(nh));
end
if  isempty(ud.RESPsig) 
    hall = allchild(h.RESPaxes3);
    nh = find(strcmp(get(hall,'Type'),'line'));
    delete(hall(nh));
end

if  isempty(ud.SCLsig)  
    hall = allchild(h.SCLaxes3);
    nh = find(strcmp(get(hall,'Type'),'line'));
    delete(hall(nh));
end

if ud.Nber_of_Signals~=0
    Update_PatchSignal
end
Update_SamplePatches 


% 
% if ud.tmax <= axisnew(2) & ud.tmin >= axisnew(1)
%     set(h.slider1,Enable,'off','Value',(axisnew(3) + dy/2),'SliderStep',[dy dy/10])
% end
% 
% set(h.slider1,'Value',(axisnew(1) + dx/2),'SliderStep',[dx dx/10]);
% set(h.slider2,'Value',(axisnew(3) + dy/2),'SliderStep',[dy dy/10]);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%                              %%%%%%%%%%%%%%%
%%%%%%%%%%%%%%       UPdate SamplePatches   %%%%%%%%%%%%%%%
%%%%%%%%%%%%%%                              %%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function Update_SamplePatches(nS_vec)
h = guidata(gcf);
ud = get(h.figure1,'userdata');

if nargin == 0
    nS_vec =[];
%     if get(h.SignalEditing,'Value') == 0 
%         nS_vec = ud.Sample_Nber;
%     elseif get(h.SignalEditing,'Value') == 1
%         nS_vec = ud.Signal_Nber;
%     end
end

if get(h.SignalEditing,'Value') == 0 
   Update_PatchSample(nS_vec)
   axis3 = axis(h.axes3);
    axes(h.SignalEditaxes)
    xlim([axis3(1) axis3(2)]);

elseif get(h.SignalEditing,'Value') == 1
   Update_PatchSignal(nS_vec)
   axis3 = axis(h.axes3);
    axes(h.SampleEditaxes)
    xlim([axis3(1) axis3(2)]);

end
if isempty(ud.cursor)
    Update_CurrentSampleEdit 
%     if isempty(ud.cursor.action)
%         Update_CurrentSampleEdit 
%     end
end



function Update_SamplePatchesMeasures(nS_vec)
h = guidata(gcf);
ud = get(h.figure1,'userdata');

if nargin == 0
    nS_vec = [];
%     if get(h.SignalEditing,'Value') == 0 
%         nS_vec = ud.Sample_Nber;
%     elseif get(h.SignalEditing,'Value') == 1
%         nS_vec = ud.Signal_Nber;
%     end
end

if get(h.SignalEditing,'Value') == 0 | get(h.SampleZoom_pushbutton(1),'Value') == 1
    Update_PatchSample(nS_vec)
end
if get(h.SignalEditing,'Value') == 1 | get(h.SampleZoom_pushbutton(1),'Value') == 1
    Update_PatchSignal(nS_vec)
end
Update_CurrentSampleEdit
Update_TimeFreqMeasure %(nS_vec)

%***********************************************************
%****************   Update_PatchSample   ***************
%***********************************************************

function Update_PatchSample(nS_vec)

%fprintf('Update hPatchSample %d\n',nargin)
h = guidata(gcf);
figure(h.figure1)
ha1 = h.axes1;
axisold = axis(ha1); 
ud1 = get(ha1,'userdata');
ud = get(h.figure1,'userdata');

% if nargin == 0 | isempty(nS_vec)
%     ;
% end

axes(h.SampleEditaxes);

axis3 = axis(h.axes3);
x1 = axis3(1); x2 = axis3(2); y1 = axis3(3); y2 = axis3(4);
%ud.hPatchSample
if nargin == 0 | isempty(nS_vec)
    nS_vec = 1:ud.Nber_of_Samples; %length(ud.Samplet1)
    %fprintf('Delete all\n')
    hall = allchild(h.SampleEditaxes);
    nh = find(strcmp(get(hall,'Type'),'patch'));
    delete(hall(nh))
    ud.hPatchSample  = [];
else
    ns=find(nS_vec <= length(ud.hPatchSample));
        try
            delete(ud.hPatchSample(nS_vec(ns)))    
            ud.hPatchSample(nS_vec)  = [];
        catch 
            %fprintf('can''t delete patch\n')
            hall = allchild(h.SampleEditaxes);
            nh = find(strcmp(get(hall,'Type'),'patch'));
            delete(hall(nh));
            nS_vec = 1:ud.Nber_of_Samples;
        end
    
end
%m = length(ud.HRVtmin); 
%nS_vec = find(~isempty(ud.Samplet1)); 
nS_vec;
%fprintf('patch');
for i = nS_vec
    %fprintf(' %d',i)
    xt1 = ud.Samplet1(i); xt2 = ud.Samplet2(i);
    if xt1 <= x2  & xt2 >= x1
        %fprintf('plotting hPatchSample\n')
        xmin = max(x1- 0.02*(x2-x1),xt1);
        xmax = min(x2+ 0.02*(x2-x1),xt2);
        ymin = y1-0.01*(y2-y1);
        ymax = y2+0.01*(y2-y1);
        %ud.hPatchSample(i)  = patch([xmin xmin xmax xmax xmin],[ymin ymax ymax ymin ymin],[225 255 225]/255); 
        ud.hPatchSample(i)  = patch([xmin xmin xmax xmax xmin],[ymin ymax ymax ymin ymin],[140 255 140]/255); 
        set(ud.hPatchSample(i), 'FaceAlpha',0.4, 'LineWidth',1.5, 'EdgeColor',[70 255 70]/255)
        if i == ud.Sample_Nber 
            set(ud.hPatchSample(i), 'FaceColor', [50 255 60]/255 );%'LineStyle','--')
        end
%     else
%         ud.hPatchSample(i)  = [];
    end
end
%fprintf('patch \n');
axis(axis3)
set(h.figure1,'userdata',ud);
set(ha1,'userdata',ud1);
 


%********************************************************************************************************* 
%****************   Update_PatchSignal   ***************
%***********************************************************
function Update_PatchSignal(nS_vec)


fprintf('Update hPatchSignal \n')
h = guidata(gcf);
ha1 = h.axes1;
axisold = axis(ha1); 
ud1 = get(ha1,'userdata');
ud = get(h.figure1,'userdata');

% if nargin == 0  | isempty(nS_vec)
%         nS_vec = 1:ud.Nber_of_Signals; %length(ud.Samplet1);
% end

axes(h.SignalEditaxes)

axis3 = axis(h.axes3);
x1 = axis3(1); x2 = axis3(2); y1 = axis3(3); y2 = axis3(4);
%ud.hPatchSample
if nargin == 0 | isempty(nS_vec)
    nS_vec = 1:ud.Nber_of_Signals; %length(ud.Samplet1);
    hall = allchild(h.SignalEditaxes);
    nh = find(strcmp(get(hall,'Type'),'patch'));
    delete(hall(nh))
    ud1.hPatchSignal  = [];
else
    ns=find(nS_vec <= length(ud1.hPatchSignal));
        try
            delete(ud1.hPatchSignal(nS_vec(ns)))    
            ud1.hPatchSignal(nS_vec)  = [];
        catch 
            fprintf('can''t delete patch\n')
            hall = allchild(h.SignalEditaxes);
            nh = find(strcmp(get(hall,'Type'),'patch'));
            delete(hall(nh))
            nS_vec = 1:ud.Nber_of_Signals;
        end
end
%m = length(ud.HRVtmin); 
%nS_vec = find(~isempty(ud.Samplet1)); 
for i = nS_vec
    xt1 = ud.Signalt1(i); xt2 = ud.Signalt2(i);
    if xt1 < x2 + 0.02*(x2-x1) & xt2 > x1-0.02*(x2-x1)
        %fprintf('plotting hPatchSignalSample\n')
        xmin = max(x1- 0.02*(x2-x1),xt1);
        xmax = min(x2+ 0.02*(x2-x1),xt2);
        ymin = y1-0.01*(y2-y1);
        ymax = y2+0.01*(y2-y1);
        %ud1.hPatchSignal(i)  = patch([xmin xmin xmax xmax xmin],[ymin ymax ymax ymin ymin],[225 255 225]/255);
        ud1.hPatchSignal(i)  = patch([xmin xmin xmax xmax xmin],[ymin ymax ymax ymin ymin], [170 120 170]/255);

        set(ud1.hPatchSignal(i), 'FaceAlpha',0.5, 'LineWidth',1, 'EdgeColor',ud.magenta_dark)

        if i == ud.Signal_Nber & get(h.SignalEditing,'Value') == 1
            set(ud1.hPatchSignal(i), 'FaceColor', [255 40 255]/255)
        end
%     else
%         ud.hPatchSample(i)  = [];
    end
end

axis(axis3)

%set(h.figure1,'userdata',ud);
set(ha1,'userdata',ud1);




%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%                              %%%%%%%%%%%%%%%
%%%%%%%%%%%%%%       UPdate axes           %%%%%%%%%%%%%%%
%%%%%%%%%%%%%%                              %%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


% 
% %%%%%%%%%%%%%%       Update axes1           %%%%%%%%%%%%%%%
% function Update_axes1
% fprintf('Update axes1')
% 
% h = guidata(gcf);
% fig = gcf;
% ha1 = h.axes1;
% ud1 = get(ha1,'userdata');
% ud = get(h.figure1,'userdata');
% 
% %plot graph on axes1
% axes(h.axes1); hold off;
% m = length(ud.tsig);
% 
% if m>100000
%     di = floor(m/100000);
%     line(ud.tsig(1:di:m),ud.ECGsig(1:di:m)); 
%     hold on; line(ud.tsig(1:di:m),ud.ECGfil(1:di:m),'color',[1 0 0]); 
% else
%     line(ud.tsig,ud.ECGsig); hold on; line(ud.tsig,ud.ECGfil,'color',[1 0 0]);
% end
% hold off
% set(h.axes1,'userdata',ud1);
% set(h.figure1,'userdata',ud);


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%       Update axes2           %%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function Update_axes2
fprintf('Update axes2')

h = guidata(gcf);
ha1 = h.axes1;
ud1 = get(ha1,'userdata');
ud = get(h.figure1,'userdata');



% delete square plot on axes2
ud2 = get(h.axes2,'userdata');
if ~isempty(ud2.hPatch2)
    delete(ud2.hPatch2); ud2.hPatch2 = [];
end
hold off

%plot graph on axes2
axes(h.axes2); hold off; %cla 
m = length(ud.tsig);
if m>100000
    di = floor(m/100000);
    h2 = line(ud.tsig(1:di:m),ud.ECGsig(1:di:m));%set(h2,'FaceAlpha',0.5);
else
    h2 = line(ud.tsig,ud.ECGsig); %set(h2,'FaceAlpha',0.5);
end
set(h.axes2,'userdata',ud2);
axisnew = [ud.tmin ud.tmax ud1.ECGmin ud1.ECGmax];
axis(axisnew); set(h.axes2, 'XAxisLocation','top','XTickMode','auto','YTickMode','auto')

set(h.axes1,'userdata',ud1);
set(h.figure1,'userdata',ud);


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%       UPdate axes3           %%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function Update_axes3
fprintf('Update axes3')

h = guidata(gcf);
ha1 = h.axes1;
ud1 = get(ha1,'userdata');
ud = get(h.figure1,'userdata');

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%       Update IBIplot           %%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function Update_IBIplot(var1)
fprintf('Update IBIplot\n')

if nargin == 0
    var1 = [];
elseif var1 ~= 'axes1'
    var1 = [];
end

h = guidata(gcf);
ha1 = h.axes1;
ud1 = get(ha1,'userdata');
ud = get(h.figure1,'userdata');

% ------------------------------------------------------------
%-------------------  plot Rpeaks in axes 1  -----------------
% ------------------------------------------------------------
axes(h.axes1);
ud1 = get(h.axes1,'userdata');
hold on;
%save axis values before update axes1
axis1 = axis(h.axes1);
xmin = axis1(1); xmax = axis1(2);


% if ~isempty(ud.nR) & val == 1
rg = find(ud.tsig(ud.nR) >= xmin & ud.tsig(ud.nR) <= xmax);
rg = [max(find(ud.tsig(ud.nR) < xmin)); rg; min(find(ud.tsig(ud.nR) > xmax))];


if get(h.RR_Editing_View,'Value') == 1
    
    %delete(ud1.hIBI); ud1.hIBI = [];
    fprintf('hIBIold = %2.6g (IBI plot)\n',ud1.hIBI)
    try %try to delete ud1.hIBI & hIBI3 but if it got deleted by mistake, 
        %set as empty to avoid stopping the program and issuing an error
        if ~isempty(ud1.hIBI)
            delete(ud1.hIBI); ud1.hIBI = [];
        end
        if ~isempty(ud1.hIBI2)
            delete(ud1.hIBI2); ud1.hIBI2 = [];
            if ~isempty(ud.tR2)
                delete(ud1.hIBI2b); ud1.hIBI2b = [];
            end
        end
        
    catch
        ud1.hIBI = [];
        hall = allchild(h.axes1);
        nh = find(strcmp(get(hall,'Type'),'line')); 
        %delete(hall(nh)); 
        
        %nh2 = []; for i=1:length(nh); if sum(get(hall(nh(i)),'Color')  == [1 0 0]) == 3; nh2 = [nh2;nh(i)]; end ; end;
        if ~isempty(nh) && length(nh)>1
            nh2 =  find( sum(cell2mat(get(hall(nh),'Color'))==ones(length(nh),1)*ud.blue,2)  ==3 );
        else
            nh2 =  find( sum(get(hall(nh),'Color')==ones(length(nh),1)*ud.blue,2)  ==3 );
        end
        beep; pause(0.2);beep; fprintf('Beep on line 4857\n')
        delete(hall(nh2)); 
    end
    
    
    ud1.hIBI = line(ud.tsig(ud.nR(rg)),ud.ECGsig(ud.nR(rg)) );
    fprintf('hIBI = %2.6g (IBI plot)\n',ud1.hIBI)

    if (xmax-xmin)<ud.RRmin*60
        set(ud1.hIBI,'Marker','.','MarkerSize',20,'Color',[1 0 0],'Linestyle','none');
    else
        set(ud1.hIBI,'Marker','.','MarkerSize',15,'Color',[1 0 0],'Linestyle','none');
    end
    
    
    if ~isempty(ud.tR2) 
        ud1.hIBI2 = line(ud.tsig(ud.nR2(rg)),ud.ECGsig(ud.nR2(rg)));
        ud1.hIBI2b = line(ud.tR2(rg)+ud.tR2offset,ud.ECGsig(ud.nR2(rg)));
        if (xmax-xmin)<ud.RRmin*60
            set(ud1.hIBI2,'Marker','x','MarkerSize',15,'Color',[1 0 0],'Linestyle','none');
            set(ud1.hIBI2b,'Marker','+','MarkerSize',15,'Color',[1 0 0],'Linestyle','none');
        else
            set(ud1.hIBI2,'Marker','x','MarkerSize',15,'Color',[1 0 0],'Linestyle','none');
            set(ud1.hIBI2b,'Marker','+','MarkerSize',15,'Color',[1 0 0],'Linestyle','none');
        end
        
        
    end
    % end
    
    % 
    % 
    % ud1.hIBI = plot(ud.tsig(ud.nR),ud.ECGsig(ud.nR),'.r');
    % if (axis1(2)-axis1(1))<ud.RRmin*60
    %     set(ud1.hIBI,'MarkerSize',20);
    % end
    axis(axis1);
    hold off;
end


    % ------------------------------------------------------------
    %-------------  plot IBI profile in ms in axes 3  ------------
    % ------------------------------------------------------------
    % plot IBI profile in ms in axes 3
    %remember axis values
    
    %save axis values before update axes3
    axis3 = axis(h.axes3);
    
    
    axes(h.axes3); hold on
    set(h.axes3,'XTickMode','auto','YTickMode','auto','XTickLabelMode','auto', 'YTickLabelMode','auto')
    m = length(ud.tR);
    mfil = length(ud.tRfil);
    %m2 = length(ud.tsig);
    tIBI = 1000*(ud.tR(2:m)-ud.tR(1:m-1));
    tIBIfil = 1000*(ud.tRfil(2:mfil)-ud.tRfil(1:mfil-1));
    % ud.tR2 is for the IBI retrieve 
    m2 = length(ud.tR2);
    tIBI2 = 1000*(ud.tR2(2:m2)-ud.tR2(1:m2-1));
    
    
    hall = allchild(h.axes3);
    nh = find(strcmp(get(hall,'Type'),'line'));
    delete(hall(nh))
    ud1.hIBI3 = [];
    
    %ud1.hIBI3 = plot(ud.tR(2:m),tIBI,'-b', ud.tR(2:m),tIBI,'.b',ud.tRfil(2:mfil),tIBIfil,'-r', ud.tRfil(2:mfil),tIBIfil,'.r')
    if ~isempty(ud.tR2)
        ud1.hIBI3 = plot(ud.tR(2:m),tIBI,'-b',ud.tRfil(2:mfil),tIBIfil,'-r',ud.tR2(2:m2)+ud.tR2offset,tIBI2,'--b');
    else
        %ud1.hIBI3 = plot(ud.tR(2:m),tIBI,'-b');%,ud.tRfil(2:mfil),tIBIfil,'-r')
        %         ud.tIBI_final2 = ud.tIBI_final(1); for i = 2:length(ud.tIBI_final); ud.tIBI_final2(i) = ud.tIBI_final2(i-1) + ud.IBI_final(i)/1000; end
        %         ud.tIBI_final2 = ud.tIBI_final2';
        if get(h.PlotFinal,'Value')==1
            %ud1.hIBI3 = plot( ud.tIBI_final ,ud.IBI_final,'-k', ud.tIBI_finalshift ,ud.IBI_final,'-r',ud.tR(2:m),tIBI,'-b');
            ud1.hIBI3 = plot( ud.tIBI_final ,ud.IBI_final,'-k',ud.tR(2:m),tIBI,'-b');
        else
            ud1.hIBI3 = plot(ud.tR(2:m),tIBI,'-b');
        end
    end
    set(ud1.hIBI3,'Marker','.')
    
    ylabel('IBI (ms)'); 
    
    
    axes(h.axes3)
    xmin = axis3(1); xmax = axis3(2);
    rg = find(ud.tR(1:m-1) >= xmin & ud.tR(1:m-1) <= xmax);
    %rg = [max(find(ud.tR(1:m-1) < xmin)); rg; min(find(ud.tR(1:m-1) > xmax))];
    rg = [find(ud.tR(1:m-1) < xmin,1,'last'); rg; find(ud.tR(1:m-1) > xmax,1)];
    
    %------------ Didier v3.2 12/16/2009 --------------------
    % Limiting how high/low IBI axis go
    %axis([xmin xmax 0.9*min(tIBI(rg)) 1.1*max(tIBI(rg))])
    tIBImin = 300; tIBImax = 3000;
    if isempty(rg)
        axis([xmin xmax 0.98*tIBImin 1.02*tIBImax])
    else
        axis([xmin xmax 0.98*max(tIBImin, min(tIBI(rg))) 1.02*min(tIBImax, max(tIBI(rg)))])
    end
    
    %------------ Didier -----------------------
    
    hold off;
    
    % m = length(ud.tR);
    % tIBI = 1000*(ud.tR(2:m)-ud.tR(1:m-1));
    % [ud.IBI_final, ud.tIBI_final, ud.tIBI_finalshift] = ExtractSignal(tIBI,ud.tR(1:m-1), ud.Signalt1, ud.Signalt2, [], []);
    
    
    set(h.figure1,'userdata',ud);
    set(h.axes1,'userdata',ud1);
    
    UpdateFinalSignal
    
    
    Update_axislimit('ALL')
    
    if isempty(ud.EDRsig) 
        hall = allchild(h.EDRaxes3);
        nh = find(strcmp(get(hall,'Type'),'line'));
        delete(hall(nh));
    end
    
    if isempty(ud.RESPsig) 
        hall = allchild(h.RESPaxes3);
        nh = find(strcmp(get(hall,'Type'),'line'));
        delete(hall(nh));
    end
    
    if  isempty(ud.SCLsig)  
        hall = allchild(h.SCLaxes3);
        nh = find(strcmp(get(hall,'Type'),'line'));
        delete(hall(nh));
    end
    set([h.axes3 h.EDRaxes3 h.RESPaxes3 h.SCLaxes3],'color','none')
    
if isempty(var1) |  (xmin<= ud.Samplet2(ud.Sample_Nber) & xmax>= ud.Samplet1(ud.Sample_Nber) ) | (xmin<= ud.Signalt2(ud.Signal_Nber) & xmax>= ud.Signalt1(ud.Signal_Nber) )
        Update_SamplePatchesMeasures
    %Update_axes1(axis1); 
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%       Update EDRplot           %%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function Update_EDRplot
fprintf('Update EDR plot \n')

h = guidata(gcf);
ha1 = h.axes1;
ud1 = get(ha1,'userdata');
ud = get(h.figure1,'userdata');

if ~isempty(ud.EDRsig) & (get(h.EDR_togglebutton(1),'Value') | get(h.All_Signals_View,'Value'))
    
    m = length(ud.tR);
    tIBI = 1000*(ud.tR(2:m)-ud.tR(1:m-1));
    
    
    axis3 = axis(h.axes3);
    
    axes(h.axes3);
    
    axes(h.EDRaxes3);
    %clear plot 
    hall = allchild(h.EDRaxes3);
    nh = find(strcmp(get(hall,'Type'),'line')); delete(hall(nh)); 
    ud.hEDRsig = [];
    
    
    
    hold on
    %EDRsigplot = mean(tIBI) + (ud.EDRsig-mean(ud.EDRsig))/std(ud.EDRsig)*std(tIBI);
    %ud.hEDRsig = plot(ud.tEDRsig,EDRsigplot); set(ud.hEDRsig, 'Color',ud.green);
    %ud.hEDRsig = plot(ud.tEDRsig,ud.EDRsig); set(ud.hEDRsig, 'Color',ud.green,'linewidth',1);
    if get(h.PlotFinal,'Value')==1
        ud.hEDRsig = plot(ud.tEDR_final,ud.EDR_final,'k',ud.tEDR_finalshift,ud.EDR_final,'r',ud.tEDRsig,ud.EDRsig,'g'); 
        %set(ud.hEDRsig(3),'Color','g')
    else
        ud.hEDRsig = plot(ud.tEDRsig,ud.EDRsig,'g');
    end
    set(ud.hEDRsig, 'linewidth',1);
    Update_axislimit('EDR')
   
    axes(h.EDRaxes3);
    
    set([h.axes3 h.RESPaxes3 h.EDRaxes3 h.SCLaxes3],'color','none')
    set(h.axes1,'userdata',ud1);
    set(h.figure1,'userdata',ud);
end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%       UPdate RESPplot           %%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function Update_RESPplot
fprintf('Update RESP plot \n')

h = guidata(gcf);
ha1 = h.axes1;
ud1 = get(ha1,'userdata');
ud = get(h.figure1,'userdata');

if ~isempty(ud.RESPsig) & (get(h.RESP_togglebutton,'Value') == 1 | get(h.All_Signals_View,'Value'))
    
    axis3 = axis(h.axes3);
    
    axes(h.axes3);
    axes(h.RESPaxes3);
    
    %clear plot 
    hall = allchild(h.RESPaxes3);
    nh = find(strcmp(get(hall,'Type'),'line'));
    delete(hall(nh)); 
    ud.hRESPsig = [];
    
    
    
    
    hold on
    rg = find(ud.RESPsig == 0);
    ysig = ud.RESPsig; ysig(rg)= NaN;

    %ud.hRESPsig = plot(ud.tRESPsig,ud.RESPsig);set(ud.hRESPsig, 'Color',ud.magenta,'linewidth',1);
    %ud.hRESPsig = plot(ud.tRESPsig,ysig);
    if get(h.PlotFinal,'Value')==1
        ud.hRESPsig = plot(ud.tRESP_final,ud.RESP_final,'k',ud.tRESP_finalshift,ud.RESP_final,'r',ud.tRESPsig,ysig,'m');
        set(ud.hRESPsig(3),'Color',ud.magenta)
    else
        ud.hRESPsig = plot(ud.tRESPsig,ysig,'Color',ud.magenta);
    end
    set(ud.hRESPsig, 'linewidth',1);
   
    %set(ud.hRESPsig, 'Color',ud.magenta,'linewidth',1);
    Update_axislimit('RESP')

    set([h.axes3 h.EDRaxes3 h.RESPaxes3 h.SCLaxes3],'color','none')
    
    set(h.axes1,'userdata',ud1);
    set(h.figure1,'userdata',ud);
    
end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%       UPdate SCLplot           %%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function Update_SCLplot
fprintf('Update SCL plot \n')

h = guidata(gcf);
ha1 = h.axes1;
ud1 = get(ha1,'userdata');
ud = get(h.figure1,'userdata');
ud.orange = [255 102 0]/255;

if ~isempty(ud.SCLsig) && (get(h.SCL_togglebutton,'Value') == 1 || get(h.All_Signals_View,'Value'))
    axis3 = axis(h.axes3);
    
    %axes(h.axes3);
    
    axes(h.SCLaxes3)
    
    % clear plot
    hall = allchild(h.SCLaxes3);
    nh = find(strcmp(get(hall,'Type'),'line'));
    delete(hall(nh)); 
    ud.hSCLsig = [];
    
%     %--------------- Didier v3.3 --------------
%     nSCR = [];
%     for i = 1:ud.Nber_of_Samples
%         try
%             nSCR = [nSCR;ud.SCLsig_nSCR{i}];
%         catch
%         end
%     end
    rg = find(ud.SCLsig == 0 | ud.SCLsig == 50);
    ysig = ud.SCLsig; ysig(rg)= NaN;
    ud.hSCLsig = plot(ud.tSCLsig,ysig,ud.tSCLsig(ud.SCLsig_nSCR),ud.SCLsig(ud.SCLsig_nSCR),'.r'); 
    set(ud.hSCLsig, 'Color',ud.orange,'linewidth',1,'MarkerSize',15);
    %plot(ud.tSCLsig(SCLsig_nSCR),ud.SCLsig(SCLsig_nSCR),'or');

    %set(ud1.hIBI,'Marker','.','MarkerSize',20,'Color',[1 0 0],'Linestyle','none');
        
    Update_axislimit('SCL')
    
    axes(h.axes3); axes(h.EDRaxes3)
    set(h.axes1,'userdata',ud1);
    set(h.figure1,'userdata',ud);
    set([h.axes3 h.RESPaxes3 h.EDRaxes3 h.SCLaxes3],'color','none');
    

end




% --- Executes on button press in PlotFinal.
function PlotFinal_Callback(hObject, eventdata, handles)
% hObject    handle to PlotFinal (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of PlotFinal
h = guidata(gcf);
ha1 = h.axes1;
ud = get(h.figure1,'userdata');

if ~isempty(ud.ECGsig)
    Update_RESPplot
    Update_EDRplot
    Update_IBIplot

end







%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%       UPdate axislimit         %%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function Update_axislimit(SIGNAL)
fprintf('Update all axis limit \n')

h = guidata(gcf);
ha1 = h.axes1;
ud = get(h.figure1,'userdata');

axis3 = axis(h.axes3);

if (strcmp(SIGNAL,'RESP') == 1 | strcmp(SIGNAL,'ALL') ==1) & ~isempty(ud.RESPsig)
    rg = 1 + max(1,floor(axis3(1)*ud.Fs_interp)) : min(length(ud.tRESPsig), ceil(axis3(2)*ud.Fs_interp));
    axes(h.RESPaxes3);
    if get(h.RR_Editing_View,'Value') == 1
        set(h.RESPaxes3,'YAxisLocation','right','YColor',ud.magenta,'YTickMode','auto','YTickLabelMode','auto')
        ylabel('RESP ','FontWeight','demi','Color',ud.magenta,'units','normalized','position',[1.05 0.5 0]); 
    else
        set(h.RESPaxes3,'YAxisLocation','left','YColor','k','YTickMode','auto','YTickLabelMode','auto')
        %set(h.RESPaxes3,'YAxisLocation','left','YColor',ud.magenta,'YTickMode','auto','YTickLabelMode','auto')
        ylabel('RESP','FontWeight','demi','Color',ud.magenta,'units','normalized','position',[-0.03 0.5 0]); 
    end
    xlim([axis3(1) axis3(2)]);
    
    if ~isempty(ud.RESPsig) & length(rg)>1
        %'OK'
        %ylim([min(ud.RESPsig(rg)) max(ud.RESPsig(rg))]);
        ymin =  min(ud.RESPsig(rg));
        ymax = max(ud.RESPsig(rg));
%         if ~isempty(ud.EDRsig)
%             ylim2 = ylim(h.EDRaxes3);
%             ymin = min(ylim2(1),ymin);
%             ymax = max(ylim2(2),ymax);
%         end

        amp = max(0.01, abs(ymax - ymin));
        ylim([ymin- 0.02*amp ymax + 0.02*amp]); 
    end
end
if (strcmp(SIGNAL,'EDR') ==1 | strcmp(SIGNAL,'ALL') ==1) & ~isempty(ud.EDRsig)
    rg = 1 + max(1,floor(axis3(1)*ud.Fs_interp)) : min(length(ud.tEDRsig), ceil(axis3(2)*ud.Fs_interp));
    axes(h.EDRaxes3);
    if get(h.RR_Editing_View,'Value') == 1
        set(h.EDRaxes3,'YAxisLocation','right', 'YColor',ud.green,'YTickMode','auto','YTickLabelMode','auto')
        h3 = ylabel('EDR','FontWeight','demi','Color',ud.green,'units','normalized','position',[1.05 0.75 0]); %pos = get(h3,'position');
    else 
        %set(h.EDRaxes3,'YAxisLocation','left', 'YColor','k','YTickMode','auto','YTickLabelMode','auto')
        set(h.EDRaxes3,'YAxisLocation','right', 'YColor',ud.green,'YTickMode','auto','YTickLabelMode','auto')
        ylabel('EDR','FontWeight','demi','Color',ud.green,'units','normalized','position',[1.025 0.5 0]);
    end
    xlim([axis3(1) axis3(2)]);
    if ~isempty(ud.EDRsig)
        %ylim([min(ud.EDRsig(rg)) max(ud.EDRsig(rg))]); 
        ymin =  min(ud.EDRsig(rg));
        ymax = max(ud.EDRsig(rg));
%         if ~isempty(ud.RESPsig)
%             ylim2 = ylim(h.RESPaxes3);
%             ymin = min(ylim2(1),ymin);
%             ymax = max(ylim2(2),ymax);
%         end

        amp = max(0.01, abs(ymax - ymin));
        ylim([ymin - 0.02*amp ymax + 0.02*amp]); 

    end
end


if (strcmp(SIGNAL,'SCL') ==1 | strcmp(SIGNAL,'ALL') ==1) & ~isempty(ud.SCLsig)
    rg = 1 + max(1,floor(axis3(1)*ud.Fs_interp)) : min(length(ud.tSCLsig), ceil(axis3(2)*ud.Fs_interp));
    axes(h.SCLaxes3);
    if get(h.RR_Editing_View,'Value') == 1
        set(h.SCLaxes3,'YAxisLocation','right','YColor',ud.orange,'YTickMode','auto','YTickLabelMode','auto')
        ylabel('SCL (uF) ','FontWeight','demi','Color',ud.orange,'units','normalized','position',[1.05 0.2 0]); 
    else
        %set(h.SCLaxes3,'YAxisLocation','left','YColor','k','YTickMode','auto','YTickLabelMode','auto')
        set(h.SCLaxes3,'YAxisLocation','left','YColor',ud.orange,'YTickMode','auto','YTickLabelMode','auto')
        ylabel('SCL (uF)','FontWeight','demi','Color',ud.orange,'units','normalized','position',[-0.03 0.5 0]); 
    end
    xlim([axis3(1) axis3(2)]);
    if ~isempty(ud.SCLsig) & length(rg)>1
        %%%%%% Didier 8/10/09 %%%%%%
        
        %% In case of NaN values
        %rg2 = find(~isnan(ud.SCLsig(rg))); 
        rg2 = rg(find(~isnan(ud.SCLsig(rg)))); % corrected Didier v3.2
        %OLD: ylim([min(ud.SCLsig(rg)) max(ud.SCLsig(rg))]);  
        ymin =  min(ud.SCLsig(rg2));
        ymax = max(ud.SCLsig(rg2));
        amp = max(0.01, abs(ymax - ymin));
        ylim([ymin - 0.02*amp ymax + 0.02*amp]); 
        %ylim([min(ud.SCLsig(rg2)) max(ud.SCLsig(rg2))]);  
        %%%%%%%% Didier %%%%%%%%%%%%%%%%%%%%

    end
end
if strcmp(SIGNAL,'ALL') ==1
    if get(h.All_Signals_View,'Value') == 1
        axes(h.Spectrogram_axes); xlim([axis3(1) axis3(2)]);
        axes(h.Spectrogram_axes_contour); xlim([axis3(1) axis3(2)]);
        axes(h.ANSTime_axes); xlim([axis3(1) axis3(2)]);
        axes(h.ANSTime_HFLF_axes); xlim([axis3(1) axis3(2)]);
    end
    %     
    %         axis([axis3(1) axis3(2) 0 round(ud.HFmax*110)/100])


end       
axes(h.axes3);
axes(h.axes1);


% --- Executes on button press in IBI_togglebutton.
function IBI_togglebutton_Callback(hObject, eventdata, handles)
% hObject    handle to IBI_togglebutton (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of IBI_togglebutton

%Update_HRV
h = guidata(gcf);
ud = get(h.figure1,'userdata');
% m = length(ud.tR);
% tIBI = 1000*(ud.tR(2:m)-ud.tR(1:m-1));
% [ud.IBI_final, ud.tIBI_final, ud.tIBI_finalshift] = ExtractSignal(tIBI,ud.tR(1:m-1), ud.Signalt1, ud.Signalt2, [], []);
set(h.figure1,'userdata',ud);

UpdateFinalSignal('IBI')

Update_TimeFreqMeasure    

% --- Executes on button press in RESP_togglebutton.
function RESP_togglebutton_Callback(hObject, eventdata, handles)
% hObject    handle to RESP_togglebutton (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of RESP_togglebutton
h = guidata(gcf);
ud = get(h.figure1,'userdata');

hall = allchild(h.RESPaxes3);

UpdateFinalSignal('RESP')
%[ud.RESP_final, ud.tRESP_final, ud.tRESP_finalshift] = ExtractSignal(ud.RESPsig,ud.tRESPsig, ud.Signalt1, ud.Signalt2, [], []);

if get(hObject,'Value') == 1
    set(hall, 'visible','on')
else
    set(hall, 'visible','off')
end


Update_HRV
Update_RESPplot
%Update_FreqMeasure    

% --- Executes on button press in SCL_togglebutton.
function SCL_togglebutton_Callback(hObject, eventdata, handles)
% hObject    handle to SCL_togglebutton (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
% --- Executes on button press in togglebutton17.
% Hint: get(hObject,'Value') returns toggle state of SCL_togglebutton
h = guidata(gcf);
ud = get(h.figure1,'userdata');

hall = allchild(h.SCLaxes3);
get(hall,'type');
if get(h.SCL_togglebutton,'Value') == 1
    set(hall, 'visible','on')
else
    set(hall, 'visible','off')
end
Update_SCLplot


function All_pushbutton_Callback(hObject, eventdata, handles)
% hObject    handle to All_pushbutton (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of All_pushbutton
h = guidata(gcf);
ud = get(h.figure1,'userdata');

hall = allchild([h.EDRaxes3;h.RESPaxes3;h.axes3;h.RESPaxes3]);
hall = cat(1,hall{:});
set(hall, 'visible','on')
if ~isempty(ud.SCLsig)
    set(h.SCL_togglebutton,'Value',1);
end
if ~isempty(ud.EDRsig)
    set(h.EDR_togglebutton,'Value',1);
end
if ~isempty(ud.nR)
    set(h.IBI_togglebutton,'Value',1);
end
if ~isempty(ud.RESPsig)
    set(h.RESP_togglebutton,'Value',1);
end

% --- Executes on button press in EDR_togglebutton.
function EDR_togglebutton_Callback(hObject, eventdata, handles)
% hObject    handle to EDR_togglebutton (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of EDR_togglebutton
% hObject    handle to pushzoomout (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

%val = get(hObject,'Value');
disp('EDR Toggle Button')

h = guidata(gcf);
hEDR = h.EDR_togglebutton;

ud = get(h.figure1,'userdata');
% if ud.EDRval == 1
%     set(hEDR,'Value',0) ;  ud.EDRval = 0;
%     else
%     set(hEDR,'Value',1);  ud.EDRval = 1;
% end
% set(h.figure1,'userdata',ud);


set(h.EDR_togglebutton,'BackgroundColor',ud.blue1) 
ud.EDRval = ~ud.EDRval;
set(h.figure1,'userdata',ud);

Compute_EDR(ud.EDRval)

function Compute_EDR(EDRval)    
h = guidata(gcf);
ha1 = h.axes1;
hEDR = h.EDR_togglebutton;

ud = get(h.figure1,'userdata');
ud1 =  get(ha1,'userdata');

set(hEDR,'Value',EDRval);  ud.EDRval = EDRval;
set(h.figure1,'userdata',ud);

if ud.EDRval == 1 %toggle push down
    %'OK'
    isempty(ud.tR);
    if isempty(ud.EDRsig) %|| (~isempty(ud.EDRsig) && ~ishandle(ud.hEDRsig))  
       
        
        % plot hEDR
       %'Ok2'
       % calculate EDR
       if isempty(ud.nQR) || isempty(ud.nRS)
           dn_QR = 43; dn_RS = 34; % 80 ms
       else
           dn_QR = ud.nQR;
           dn_RS = ud.nRS;
       end
       if ud.ECGfiltered == 'yes'
           [ud.tEDRsig, ud.EDRsig] = EDR(ud.tsig, ud.ECGsig, ud.nR, dn_QR, dn_RS, ud.Fs_interp);
       elseif ~isempty(ud.ECGfil) 
           [ud.tEDRsig, ud.EDRsig] = EDR(ud.tsig, ud.ECGfil, ud.nRfil, dn_QR, dn_RS, ud.Fs_interp);
       end
       figure(h.figure1)
       set(ha1,'userdata',ud1);
       set(h.figure1,'userdata',ud);
       
       %Update_EDRplot
       
       
    else ~isempty(ud.EDRsig) & ~isempty(ud.hEDRsig); %make handle of FFT(IBI) visible
        if ~ishandle(ud.hEDRsig)
            Update_EDRplot
            ud = get(h.figure1,'userdata');
        end
        set(ud.hEDRsig,'Visible','on');
       
    end
elseif ~isempty(ud.hEDRsig) %make handle of FFT(IBI)  not visible
    if ~ishandle(ud.hEDRsig)
        Update_EDRplot
        ud = get(h.figure1,'userdata');
    end
    set(ud.hEDRsig ,'Visible','off');
        %         delete([ud.hRsig; ud.hEDRsig]); ud.hRsig = []; ud.hEDRsig = [];
    

end 
UpdateFinalSignal('EDR')


Update_EDRplot

Update_FreqMeasure

Update_axes1(axis(h.axes1));


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%                                                            %%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%                      UPdate HRV                            %%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%                                                            %%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


function Update_HRV(nS, EXPORTDATA)
fprintf('Update HRV\n')
%periodogram for EDR
h = guidata(gcf);
ha1 = h.axes1;
ud1 = get(ha1,'userdata');
ud = get(h.figure1,'userdata');
if nargin <2
    EXPORTDATA = 0;
end
if nargin == 0 
    nS = ud.Sample_Nber;
end



axes(h.FFT_axes); 

Norder = ud.detrend-1; %2;
set(h.detrend_menu,'Value',Norder+1);

Nfft = ud.NFFT; %1024*ud.Fs_interp/2;
Nwindow = ud.Nwindow; %512/2*ud.Fs_interp/2;
Noverlap = ud.Noverlap; %256/2*ud.Fs_interp/2;
Filter = ud.WindowFilter; % Filter = 2; %Hamming


magenta_fill = [255 210 255]/255;
yellow_fill = [250 255 180]/255;
blue_fill = [200 215 255]/255;

t1 = ud.Samplet1(nS);
t2 = ud.Samplet2(nS);


%fprintf('Sample = %d \n ', min(nS));

%nS

if (get(h.IBI_togglebutton,'Value') == 1  | EXPORTDATA) & ~isempty(nS); 
    fprintf('Update IBI FFT , ')
    %     ud.tRi = (ud.tR(1):1/ud.Fs_interp:ud.tR(m))';
    %     tIBI2 = interp1(ud.tR(1:m-1), tIBI,ud.tRi,'spline');
    
    rg = find(ud.tIBI_final>=t1 & ud.tIBI_final<=t2);
    if ~isempty(rg)
        
        t_finalshift = ud.tIBI_finalshift(rg);
        m2 = length(t_finalshift);
        IBI_final = ud.IBI_final(rg);
        %if ud.FreqMethod == 6 & get(h.RR_Editing_View,'Value') == 0  % wavelet
        % Changed to ud.FreqMethod == 5 with new FreqSpectrum.m function 
        if ud.FreqMethod == 5 & get(h.RR_Editing_View,'Value') == 0  % wavelet
            if ud.Compute_Spectrogram == 0
                Compute_Spectrogram(nS)
            end
            %as = ud.Spectrogram(nS).scale; 
            %as = 1;
            %y_SpecPwr = abs(ud.Spectrogram(nS).y).^2;
            %ud.IBI_FFT(:,nS) = (mean(y_SpecPwr,1)./as)'; % /as to transform to spectral density
            IBI_FFT = mean(ud.Spectrogram(nS).ypwr,1)'; % average accross time
            if length(IBI_FFT) ~= length(ud.IBI_FFT(:,nS))
                ud.IBI_FFT=[];
            end
            ud.IBI_FFT(:,nS) = IBI_FFT; 
            
            ud.IBI_Fp = ud.Spectrogram(nS).xf_pwr';
            ud.SampleAnalyzedHRVSec(nS) = ud.SampleAnalyzedSec(nS);
        else
            [IBI_FFT, IBI_Fp, ud.SampleAnalyzedHRVSec(nS), Nwindow_out, Noverlap_out] = ...
                       FreqSpectrum(t_finalshift, IBI_final/1000, Nwindow ,Noverlap , Nfft ,ud.Fs_interp,[Norder ud.smoothN], ud.ARorder, Filter, ud.FreqMethod); 
                   
            if length(IBI_FFT) ~= length(ud.IBI_FFT)
                ud.IBI_FFT = [];
            end
            ud.IBI_FFT(:,nS) = IBI_FFT; 
            ud.IBI_Fp = IBI_Fp;
            ud.Nwindow = Nwindow_out;
            ud.Noverlap = Noverlap_out;
            set(h.WindowLength_edit,'String',sprintf('%d',ud.Nwindow));
            set(h.WindowOverlap_edit,'String',sprintf('%d',ud.Noverlap));
             %---------Didier v4.6 -------------
            %if ud.FreqMethod == 8
            if ud.FreqMethod >= 6
                % compute the simple FFT spectrum for comparison
                [IBI_FFT, IBI_Fp, SampleAnalyzedHRVSec, Nwindow_out, Noverlap_out] = ...
                        FreqSpectrum(t_finalshift, IBI_final/1000, Nwindow ,Noverlap , Nfft ,ud.Fs_interp,[Norder ud.smoothN], ud.ARorder, Filter, 5); 
                ud.IBI_FFT2(:,nS) = IBI_FFT; 
                ud.IBI_Fp2 = IBI_Fp;
            else
                ud.IBI_FFT2 = [];
                ud.IBI_Fp2 = [];
            end
            %--------- v4.4 -------------


        end
        set(h.SampleAnalyzedHRVSec,'string',sprintf('%0.1f',ud.SampleAnalyzedHRVSec(nS)));
        
        
        % plot results
        %plot(ud.tRi(rg), tIBI2(rg),'b',ud.tRi(rg), tIBI2(rg),'.b',ud.tRi(rg),polyval(P,ud.tRi(rg)),'r')
        if ~EXPORTDATA
            axes(h.FFT_axes); cla; hold off;
            set(h.EDR_FFTaxes, 'Color','none','YColor','b')
            
            %np = ud.Sample_Nber;
            np = nS;
            IBI_FFT_pwr = ud.IBI_FFT(:,nS);
            %---------Didier v4.4 -------------
            if ~isempty(ud.IBI_Fp2)
                hx = plot(ud.IBI_Fp,IBI_FFT_pwr,'-',ud.IBI_Fp2,ud.IBI_FFT2(:,nS),':');
            else
                hx = plot(ud.IBI_Fp,IBI_FFT_pwr);
            end
            set(hx,'Color',ud.blue);
            %-------------- v4.4 -------------
            %patch for VLF
            DFp = ud.IBI_Fp(2)-ud.IBI_Fp(1);
            
            rg = find(ud.IBI_Fp-ud.VLFmin >= DFp/2 & ud.IBI_Fp-ud.VLFmax < DFp/2 ); rg1 = rg(1); rg2 = rg(length(rg));
            hp = patch([ud.IBI_Fp(rg1);ud.IBI_Fp(rg);ud.IBI_Fp(rg2);ud.IBI_Fp(rg1)],[0;IBI_FFT_pwr(rg);0;0],magenta_fill);
            set(hp,'EdgeColor','blue','FaceAlpha',0.5)
            rg = find(ud.IBI_Fp-ud.LFmin >= DFp/2 & ud.IBI_Fp-ud.LFmax < DFp/2); rg1 = rg2; rg(1); rg2 = rg(length(rg));
            hp = patch([ud.IBI_Fp(rg1);ud.IBI_Fp([rg1;rg]);ud.IBI_Fp(rg2);ud.IBI_Fp(rg1)],[0;IBI_FFT_pwr([rg1;rg]);0;0],yellow_fill);
            set(hp,'EdgeColor','blue','FaceAlpha',0.5)
            rg = find(ud.IBI_Fp- ud.HFmin >= DFp/2 & ud.IBI_Fp - ud.HFmax < DFp/2); rg1 = rg2; rg(1); rg2 = rg(length(rg));
            hp = patch([ud.IBI_Fp(rg1);ud.IBI_Fp([rg1;rg]);ud.IBI_Fp(rg2);ud.IBI_Fp(rg1)],[0;IBI_FFT_pwr([rg1;rg]);0;0],blue_fill);
            set(hp,'EdgeColor','blue','FaceAlpha',0.5)
            rgf = find(ud.IBI_Fp>ud.LFmin & ud.IBI_Fp<ud.HFmax); %limit to LF-HF region for axis limits
            rgf2 = find(ud.IBI_Fp2>ud.LFmin & ud.IBI_Fp2<ud.HFmax);

            
            axis([0 ud.HFmax 0 max([IBI_FFT_pwr(rgf);ud.IBI_FFT2(rgf2)])])



        end
    else
        axes(h.FFT_axes); cla; hold off;
        set(h.EDR_FFTaxes, 'Color','none','YColor','b')
        ud.SampleAnalyzedHRVSec(nS) = 0;
        set(h.SampleAnalyzedHRVSec,'string',sprintf('%0.1f',ud.SampleAnalyzedHRVSec(nS)));
        ud.IBI_Fp = NaN;
        ud.IBI_FFT(:,nS) = NaN;
        axis([0 0.5 0 1])
    end
    xlabel('Frequency (Hz)'); ylabel('PSD (s^2/Hz)');    %periodogram for EDR
else
%     hall = allchild(h.FFT_axes);
%     nh = find(strcmp(get(hall,'Type'),'line'));
%     delete(hall(nh))
    delete(findobj(h.FFT_axes,'Type','line'))

end

%hEDR = h.EDR_togglebutton;
if  ~EXPORTDATA
%     hall = allchild(h.EDR_FFTaxes);
%     if ~isempty(hall)
%         hall = cat(1,hall{:});
%         nh = find(strcmp(get(hall,'Type'),'line'));
%         delete(hall(nh));
%     end
    delete(findobj(h.EDR_FFTaxes,'Type','line'))
end

if (ud.EDRval == 1  | EXPORTDATA) & ~isempty(ud.EDRsig) & ~isempty(nS);
    rg = find(ud.tEDRsig>t1 & ud.tEDRsig<t2);
    fprintf('Update EDR FFT, ') 
    % Detrending
    
    %     [P, S ] = polyfit(ud.tEDRsig(rg), ud.EDRsig(rg),Norder);
    %     EDR_detrend = ud.EDRsig(rg) - polyval(P,ud.tEDRsig(rg));
    %periodogram for EDR
    %Fs_interp = []; %no interpolation
    rg = find(ud.tEDR_final>=t1 & ud.tEDR_final<=t2);    
    t_finalshift = ud.tEDR_finalshift(rg);
    m2 = length(t_finalshift);
    if m2 > 0 & max(ud.EDR_final(rg)) ~= min(ud.EDR_final(rg))
        EDR_final = ud.EDR_final(rg);
        
        [EDR_FFT,ud.EDR_Fp, ud.SampleAnalyzedHRVSec(nS)] = ...
                FreqSpectrum(t_finalshift,EDR_final, Nwindow ,Noverlap , Nfft ,[],[0 0], ud.ARorder, Filter, ud.FreqMethod);
        %     [EDR_FFT,ud.EDR_Fp] = FreqSpectrum(ud.tEDRsig(rg), ud.EDRsig(rg), Nwindow ,Noverlap , Nfft ,[],[0 0], Filter, ud.FreqMethod);
        if length(EDR_FFT) ~= length(ud.EDR_FFT)
            ud.EDR_FFT = [];
        end
        ud.EDR_FFT(:,nS) = EDR_FFT;
        
        
        if ~EXPORTDATA | nS == ud.Sample_Nber
            
            % plotting results
            axes(h.EDR_FFTaxes); hold on
            hx = plot(ud.EDR_Fp,EDR_FFT); set(hx,'Color',ud.green);
            set(h.EDR_FFTaxes, 'YAxisLocation','right', 'Color','none','YColor',ud.green);
            axis([0 ud.HFmax 0 max(EDR_FFT)])
            %xlabel('Frequency (Hz)'); 
            ylabel('PSD (unit^2/Hz)');
        end
        
    else
        ud.EDR_FFT(:,nS) = NaN;
        ud.EDR_Fp = [];
    end
else
    ud.EDR_FFT = [];
end  

if (get(h.RESP_togglebutton,'Value') == 1  | EXPORTDATA) & ~isempty(ud.RESPsig)  & ~isempty(nS) ;
    rg = find(ud.tRESPsig>t1 & ud.tRESPsig<t2);
    fprintf('Update RESP FFT, ');
    %     % Detrending
    %     [P, S ] = polyfit(ud.tRESPsig(rg), ud.RESPsig(rg),Norder);
    %     RESP_detrend = ud.RESPsig(rg) - polyval(P,ud.tRESPsig(rg));
    
    %periodogram for EDR
    %Fs_interp = []; %no interpolation
    rg = find(ud.tRESP_final>=t1 & ud.tRESP_final<=t2);    
    t_finalshift = ud.tRESP_finalshift(rg);
    m2 = length(t_finalshift);
    if m2 > 0 & max(ud.RESP_final(rg)) ~= min(ud.RESP_final(rg))
        RESP_final = ud.RESP_final(rg);
        [RESP_FFT,ud.RESP_Fp, ud.SampleAnalyzedHRVSec(nS)] = ...
                FreqSpectrum(t_finalshift, RESP_final, Nwindow ,Noverlap , Nfft ,[],[0 0], ud.ARorder, Filter, ud.FreqMethod);
        
        %[RESP_FFT,ud.RESP_Fp] = FreqSpectrum(ud.tRESPsig(rg), ud.RESPsig(rg), Nwindow ,Noverlap , Nfft ,[],[0 0], Filter, ud.FreqMethod);
        if length(RESP_FFT) ~= length(ud.RESP_FFT)
            ud.RESP_FFT = [];
        end
        ud.RESP_FFT(:,nS) = RESP_FFT;
        
        
        if ~EXPORTDATA | nS == ud.Sample_Nber
            
            % plotting results
            axes(h.EDR_FFTaxes); hold on;
            RESP_FFT_pwr = ud.RESP_FFT(:,nS);
            if isempty(ud.EDR_FFT)
                RESP_FFT_plot = RESP_FFT_pwr;
            else
                RESP_FFT_plot = RESP_FFT_pwr/max(RESP_FFT_pwr)*max(ud.EDR_FFT(:,nS)); 
            end
            hx = plot(ud.RESP_Fp,RESP_FFT_plot); set(hx,'Color',ud.magenta);
            set(h.EDR_FFTaxes, 'YAxisLocation','right', 'Color','none','YColor',ud.magenta);
            %max(RESP_FFT_plot);
            axis([0 ud.HFmax 0 max(RESP_FFT_plot)])
            %xlabel('Frequency (Hz)'); 
            ylabel('PSD (unit^2/Hz)');
        end
    else
        ud.RESP_FFT(:,nS) = NaN;
        ud.RESP_Fp = [];
    end
else
    ud.RESP_FFT = [];

end  


set(ha1,'userdata',ud1);
set(h.figure1,'userdata',ud);





%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%       HRV parameters Update  %%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%



function VLFmin_Callback(hObject, eventdata, handles)
% hObject    handle to VLFmin (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of VLFmin as text
%        str2double(get(hObject,'String')) returns contents of VLFmin as a double

h = guidata(gcf);
ud = get(h.figure1,'userdata');

ud.VLFmin = str2double(get(hObject,'String'))

set(h.figure1,'userdata',ud)
%Update_HRV
Update_FreqMeasure    

function VLFmax_Callback(hObject, eventdata, handles)
% hObject    handle to VLFmax (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of VLFmax as text
%        str2double(get(hObject,'String')) returns contents of VLFmax as a double


h = guidata(gcf);
ud = get(h.figure1,'userdata');

ud.VLFmax = str2double(get(hObject,'String'))

set(h.figure1,'userdata',ud)
%Update_HRV
Update_FreqMeasure    



function LFmin_Callback(hObject, eventdata, handles)
% hObject    handle to LFmin (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of LFmin as text
%        str2double(get(hObject,'String')) returns contents of LFmin as a double
h = guidata(gcf);
ud = get(h.figure1,'userdata');

ud.LFmin = str2double(get(hObject,'String'))

set(h.figure1,'userdata',ud)
%Update_HRV
Update_FreqMeasure    

function LFmax_Callback(hObject, eventdata, handles)
% hObject    handle to LFmax (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of LFmax as text
%        str2double(get(hObject,'Stsamplenextring')) returns contents of LFmax as a double

h = guidata(gcf);
ud = get(h.figure1,'userdata');

ud.LFmax = str2double(get(hObject,'String'))

set(h.figure1,'userdata',ud)
%Update_HRV
Update_FreqMeasure    




function HFmin_Callback(hObject, eventdata, handles)
% hObject    handle to HFmin (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of HFmin as text
%        str2double(get(hObject,'String')) returns contents of HFmin as a double


h = guidata(gcf);
ud = get(h.figure1,'userdata');

ud.HFmin = str2double(get(hObject,'String'))

set(h.figure1,'userdata',ud)
%Update_HRV
Update_FreqMeasure    



function HFmax_Callback(hObject, eventdata, handles)
% hObject    handle to HFmax (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of HFmax as text
%        str2double(get(hObject,'String')) returns contents of HFmax as a double


h = guidata(gcf);
ud = get(h.figure1,'userdata');

ud.HFmax = str2double(get(hObject,'String'));

set(h.figure1,'userdata',ud)
%Update_HRV
Update_FreqMeasure    






% --- Executes on selection change in detrend_menu.
function detrend_menu_Callback(hObject, eventdata, handles)
% hObject    handle to detrend_menu (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: contents = get(hObject,'String') returns detrend_menu contents as cell array
%        contents{get(hObject,'Value')} returns selected item from detrend_menu

h = guidata(gcf);
ud = get(h.figure1,'userdata');

%value=0 no detrending, value =1; linear; value = 2 2nd order; value 3
%smoothing
ud.detrend = get(hObject,'Value'); %str2double(get(hObject,'String'))

set(h.figure1,'userdata',ud)
%Update_HRV
Update_TimeFreqMeasure    



function smoothN_edit_Callback(hObject, eventdata, handles)
% hObject    handle to smoothN_edit (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of smoothN_edit as text
%        str2double(get(hObject,'String')) returns contents of smoothN_edit as a double

h = guidata(gcf);
ud = get(h.figure1,'userdata');

%value=0 no detrending, value =1; linear; value = 2 2nd order
ud.smoothN = round(str2double(get(hObject,'String')));
set(hObject,'String',sprintf('%d',ud.smoothN));


set(h.figure1,'userdata',ud)
%Update_HRV
Update_TimeFreqMeasure    



%--------- Didier v4.4 ----------
 
function ARorder_edit_Callback(hObject, eventdata, handles)
% hObject    handle to ARorder_edit (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of ARorder_edit as text
%        str2double(get(hObject,'String')) returns contents of ARorder_edit as a double

h = guidata(gcf);
ud = get(h.figure1,'userdata');

ud.ARorder = round(str2double(get(hObject,'String')));
set(hObject,'String',sprintf('%d',ud.ARorder));
set(h.figure1,'userdata',ud)

if ud.FreqMethod >= 6  
    %Update_HRV
    Update_TimeFreqMeasure    
end
%--------- Didier v4.4 ----------
 

function interpol_edit_Callback(hObject, eventdata, handles)
% hObject    handle to interpol_edit (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of interpol_edit as text
%        str2double(get(hObject,'String')) returns contents of interpol_edit as a double

h = guidata(gcf);
ud = get(h.figure1,'userdata');

Fs_intold = ud.Fs_interp;

ud.Fs_interp = round(str2double(get(hObject,'String')));
set(h.interpol_edit,'String',sprintf('%d',ud.Fs_interp));

% keep the same Nwindow ratio
Nold = ud.Nwindow;
ud.Nwindow = round(ud.Nwindow/Fs_intold*ud.Fs_interp);
set(h.WindowLength_edit,'String',sprintf('%d',ud.Nwindow));

if ud.Nwindow == Inf
    ud.Noverlap = 0
else
    ud.Noverlap = round(ud.Noverlap/Nold*ud.Nwindow);
end
set(h.WindowOverlap_edit,'String',sprintf('%d',ud.Noverlap));

set(h.figure1,'userdata',ud)
%Update_HRV
Update_TimeFreqMeasure    




% --- Executes during object creation, after setting all properties.
function NFFT_edit_Callback(hObject, eventdata, handles)
% hObject    handle to NFFT_edit (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hints: get(hObject,'String') returns contents of SampleAnalyzedSec as text
%        str2double(get(hObject,'String')) returns contents of SampleAnalyzedSec as a double

h = guidata(gcf);
ud = get(h.figure1,'userdata');


ud.NFFT = round(str2double(get(hObject,'String')));
set(h.NFFT_edit,'String',sprintf('%d',ud.NFFT));
set(h.figure1,'userdata',ud)
Update_TimeFreqMeasure    


% --- Executes during object creation, after setting all properties.
function WindowLength_edit_Callback(hObject, eventdata, handles)
% hObject    handle to WindowLength_edit (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hints: get(hObject,'String') returns contents of SampleAnalyzedSec as text
%        str2double(get(hObject,'String')) returns contents of SampleAnalyzedSec as a double

h = guidata(gcf);
ud = get(h.figure1,'userdata');

Nold = ud.Nwindow;

ud.Nwindow = round(str2double(get(hObject,'String')));
if ud.Nwindow == Inf || Nold == Inf
    ud.Noverlap = 0
else
    ud.Noverlap = round(ud.Noverlap/Nold*ud.Nwindow);
end

t1 = ud.Samplet1(ud.Sample_Nber);
t2 = ud.Samplet2(ud.Sample_Nber);

rg = find(ud.tIBI_final>=t1 & ud.tIBI_final<=t2);
if ~isempty(rg)
    xt = ud.tIBI_final(rg);
    Nxt = length(xt);
    Ns = floor( ( xt(Nxt)- xt(1) )*ud.Fs_interp);
    if ud.Nwindow == 0
        ud.Nwindow = fix(Ns./4.5);
        ud.Noverlap = fix(0.5.*ud.Nwindow);
    elseif Ns<ud.Nwindow %Ns<(ud.Nwindow*2 - ud.Noverlap)
        ud.Nwindow = Inf ;[];%length(rg);
        ud.Noverlap = 0;[];%Nwindow - 1;
    end
    
end

set(h.WindowLength_edit,'String',sprintf('%d',ud.Nwindow));

% ud.Noverlap = round(ud.Noverlap/Nold*ud.Nwindow);
set(h.WindowOverlap_edit,'String',sprintf('%d',ud.Noverlap));

set(h.figure1,'userdata',ud)
%Update_HRV
Update_TimeFreqMeasure    


% --- Executes during object creation, after setting all properties.
function WindowOverlap_edit_Callback(hObject, eventdata, handles)
% hObject    handle to WindowOverlap_edit (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hints: get(hObject,'String') returns contents of SampleAnalyzedSec as text
%        str2double(get(hObject,'String')) returns contents of SampleAnalyzedSec as a double

h = guidata(gcf);
ud = get(h.figure1,'userdata');

ud.Noverlap = round(str2double(get(hObject,'String')));
set(h.WindowOverlap_edit,'String',sprintf('%d',ud.Noverlap));

set(h.figure1,'userdata',ud)
%Update_HRV
Update_TimeFreqMeasure    



% --- Executes on selection change in popupmenu2.
function FreqMethod_menu_Callback(hObject, eventdata, handles)
% hObject    handle to popupmenu2 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: contents = get(hObject,'String') returns popupmenu2 contents as cell array
%        contents{get(hObject,'Value')} returns selected item from popupmenu2

h = guidata(gcf);
ud = get(h.figure1,'userdata');

if get(hObject,'Value') == 5 & get(h.RR_Editing_View,'Value') == 1
    set(hObject,'Value', ud.FreqMethod); % set value to old freqMethod
    uiwait(msgbox(sprintf('\n        Must be in "All_Signals" View to choose \n Wavelet Transform as the Power Spectrum method \n'),'modal'),3)
    figure(h.figure1)
end


ud.FreqMethod = get(hObject,'Value');
    
% switch Method_text 
%     case Welch
%         ud.FreqMethod = 1;
%     case Welch2
%         ud.FreqMethod = 2;
%     case Welch3
%         ud.FreqMethod = 3;
%     otherwise 
%         ud.FreqMethod = 1;
% end
set(h.figure1,'userdata',ud)
Update_TimeFreqMeasure    
  


% --- Executes during object creation, after setting all properties.
function WindowFilter_menu_CreateFcn(hObject, eventdata, handles)
% hObject    handle to WindowFilter_menu (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: popupmenu controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc
    set(hObject,'BackgroundColor','white');
else
    set(hObject,'BackgroundColor',get(0,'defaultUicontrolBackgroundColor'));
end


% --- Executes on selection change in WindowFilter_menu.
function WindowFilter_menu_Callback(hObject, eventdata, handles)
% hObject    handle to WindowFilter_menu (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: contents = get(hObject,'String') returns WindowFilter_menu contents as cell array
%        contents{get(hObject,'Value')} returns selected item from WindowFilter_menu

h = guidata(gcf);
ud = get(h.figure1,'userdata');


ud.WindowFilter = get(hObject,'Value');
  
set(h.figure1,'userdata',ud)
Update_TimeFreqMeasure    


function HRVtmin_Callback(hObject, eventdata, handles)
% hObject    handle to HRVtmin (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of HRVtmin as text
%        str2double(get(hObject,'String')) returns contents of HRVtmin as a double
h = guidata(gcf);
ud = get(h.figure1,'userdata');

HRVtmin_old = ud.HRVtmin;

ud.HRVtmin = min(str2double(get(hObject,'String')) , ud.tmax);
if (ud.HRVtmin - ud.HRVtmax)> -1 
    ud.HRVtmax = min(ud.HRVtmin +  (ud.HRVtmax - HRVtmin_old) , ud.tmax);
end

set(h.figure1,'userdata',ud)
set(h.HRVtmax,'String',sprintf('%0.1f',ud.HRVtmax));
set(h.HRVtmin,'String',sprintf('%0.1f',ud.HRVtmin));

%Update_HRV
Update_FreqMeasure    
Update_TimeMeasure
Update_PatchSample



function HRVtmax_Callback(hObject, eventdata, handles)
% hObject    handle to HRVtmax (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of HRVtmax as text
%        str2double(get(hObject,'String')) returns contents of HRVtmax as a double

h = guidata(gcf);
ud = get(h.figure1,'userdata');

HRVtmax_old = ud.HRVtmax;
ud.HRVtmax = str2double(get(hObject,'String'))

ud.HRVtmax = max(str2double(get(hObject,'String')) , ud.tmin);
if ud.HRVtmin - ud.HRVtmax> -1  
    ud.HRVtmax = max(ud.HRVtmax -  (HRVtmax_old - ud.HRVtmin) , ud.tmin);
end

set(h.figure1,'userdata',ud)
set(h.HRVtmax,'String',sprintf('%0.1f',ud.HRVtmax));
set(h.HRVtmin,'String',sprintf('%0.1f',ud.HRVtmin));



set(h.figure1,'userdata',ud)
%Update_HRV
Update_FreqMeasure    
Update_TimeMeasure
Update_PatchSample









% --- Executes on button press in MarkQRSpushbutton.
function MarkQRS_Callback(hObject, eventdata, handles)
% hObject    handle to invertEKGpushbutton (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of invertEKGpushbutton
% this function finds Q and S points

h = guidata(gcf);
ha1 = h.axes1;
ud = get(h.figure1,'userdata');
ud1 =  get(ha1,'userdata');

set(h.figure1,'pointer','watch')

axis1 = axis(h.axes1);
tmin = axis1(1);
tmax = axis1(2);

if ud.ECGfiltered == 'yes'
    nRsig = ud.nR;
    tRsig = ud.tR;
    ECGsig = ud.ECGsig;
    
else
    nRsig = ud.nRfil;
    tRsig = ud.tRfil;
    ECGsig = ud.ECGfil;
end

rg = find(tRsig>tmin & tRsig<tmax);
nR = min(find(tRsig>=tmin));
tR = tRsig(nR);
rg2 = find(ud.tsig>tmin & ud.tsig<tmax);
[ud.nQR, ud.nRS] = calc_QRS(ud.tsig(rg2),ECGsig(rg2),tR,1);
figure(h.figure1)

%plotting results
x1 = tR - 0.2;
x2 = tR + 0.2;
rg12 = find(ud.tsig>=x1 & ud.tsig<=x2);
Amp = max(ECGsig(rg12) - min(ECGsig(rg12)));
y1 = min(ECGsig(rg12)) - 0.1*Amp;
y2 = max(ECGsig(rg12)) + 0.1*Amp;

set(h.figure1,'userdata',ud)
Update_axes1([x1 x2 y1 y2])

h = guidata(gcf);
ha1 = h.axes1;
axes(ha1); 

  nR
%  ud.nQR
%  ud.nRS
%  tR

nR2 = nRsig(nR); hold on
hQRS = plot(ud.tsig(nR2 - ud.nQR),ECGsig(nR2 - ud.nQR),...
     ud.tsig(nR2),ECGsig(nR2),...
     ud.tsig(nR2 + ud.nRS),ECGsig(nR2 + ud.nRS))
 hold off
%axis auto
set(hQRS,'Marker','.','MarkerSize',20,'Color',[0 0 0]);
%pause
%figure(h.figure1)
       
% plot(ud.tsig(nR - ud.nQR),ECGsig(nR - ud.nQR),'xk',...
%      ud.tsig(nR),ECGsig(nR),'xk',...
%      ud.tsig(nR + ud.nRS),ECGsig(nR + ud.nRS),'xk')
 
set(h.figure1,'pointer','arrow')



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%                                                            %%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%                   Retrieve RR from IBI data                %%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%                                                            %%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%





% --------------------------------------------------------------------
function RR_fromIBI_Callback(hObject, eventdata, handles)
% hObject    handle to RR_fromIBI (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)


% --------------------------------------------------------------------
function ImportIBI_Callback %(hObject, eventdata, handles)
% hObject    handle to ImportIBI (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
  
    
    
    h = guidata(gcf);
    ha1 = h.axes1;
    matlab_wd = pwd;
    ud = get(h.figure1,'userdata');

%%%%%%%%%%%%%% LOAD IBI data if THEY EXIST 
  cd(ud.PathNameLoad);
  [f,p]=uigetfile({'*_RR.txt','IBI Data File (*_RR.txt)';...
          '*.txt;*.dat','Text or Data File (*.txt,*.dat)'});
  cd(matlab_wd)
  set(h.figure1,'pointer','watch')
  
  if ~isequal(f,0)
      fullFileNameIBI = fullfile(p,f);
      fileNameStringIBI = f;
      
      %set(h.text2,'string',sprintf('File Name: %s',fullfile(p,f) ));
      set(h.figure1,'userdata',ud);
      
      filename = fullFileNameIBI; calc_Fs = 0;
      [x_sig, y_sig, Fs] = getContentsOfFile(filename,calc_Fs);
      %Retrieve current working directory
      cd(ud.wd)   
      m2 = length(y_sig); 
      ud.tR2 = zeros(m2,1); ud.nR2 = zeros(m2,1); 
      for i = 1:m2
          ud.tR2(i+1) = ud.tR2(i) + y_sig(i);
          %rg = find((ud.tsig>ud.tR2(i+1)-0.1) & (ud.tsig<ud.tR2(i+1)+0.1));
          %Dtsig = abs(ud.tsig(rg)-ud.tR2(i+1));
          %ud.nR2(i+1) = rg(1) -1 + find(Dtsig == min(Dtsig));
          if rem(i,100)==0; fprintf('%d ',i); end
      end
      ud.tR2offset = 0;  ud.nR2offset = 0;
      set(h.figure1,'userdata',ud);

      %%%%%%%%%%%%%%% find Rpeaks for first 1min  %%%%%%%%%%%%%%%%%%%%
      rg = find(ud.tsig <= 600);
      %Launch Rpeaks detection
      
      [ud.nR, RRout, ud.tR] = findRpeaks(ud.ECGsig(rg), ud.tsig(rg), ud.Fs, ud.RRmin, 3);
      if ud.ECGfiltered ~= 'yes'
          [ud.nRfil, RRoutfil, ud.tRfil] = findRpeaks(ud.ECGfil, ud.tsig, ud.Fs, ud.RRmin, 3);
      end
      set(h.RRmarkerstogglebutton,'Value',1); % RRmarkertoggle button is pushed
      set(h.RRzoomtogglebutton,'Enable','on','Value',1);

      ud.tR2offset = ud.tR(1);
      m = length(ud.tsig);
      set(h.figure1,'userdata',ud);
      for i = 1:m2+1
          rg1 = max(1,floor((ud.tR2(i)+ud.tR2offset-0.1)*ud.Fs));
          rg2 = min(floor((ud.tR2(i)+ud.tR2offset+0.1)*ud.Fs),m);
          rg = rg1:rg2;
          %rg = find((ud.tsig>ud.tR2(i)+ud.tR2offset-0.1) & (ud.tsig<ud.tR2(i)+ud.tR2offset+0.1));
          Dtsig = abs(ud.tsig(rg) -  (ud.tR2(i)+ud.tR2offset)  );
          %fprintf('%d:%d \n ',rg1,rg2); pause(0.01)
          nR2t = rg1 - 1 + min(find(Dtsig == min(Dtsig)));
          rg2b = nR2t + [-2:2]; rg2b = rg2b(1) - 1 + find(rg2b>=1 & rg2b<=m);
          ud.nR2(i) = rg2b(1) - 1 + min(find(ud.ECGsig(rg2b) == max(ud.ECGsig(rg2b)) ) );
          if rem(i,100)==0; 
              fprintf('%d ',length(rg)); fprintf('%d ',i);
          end
      end
      ud.nR2offset = 0;

      figure(h.figure1);
      set(h.figure1,'userdata',ud);

      % Update IBI related plots
      Update_IBIplot;
      Update_axes1(axis(h.axes1));
      set(ud.SelectRRHandle,'Visible','on')

  end
  
  set(h.figure1,'pointer','arrow')   

 % Hint: get(hObject,'Value') returns toggle state of SelectRR_togglebutton
% --- Executes on button press in Dec_pushbutton.
function Dec_Callback(hObject, eventdata, handles)
% hObject    handle to Dec_pushbutton (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of Dec_pushbutton

h = guidata(gcf);
ha1 = h.axes1;
matlab_wd = pwd;
ud = get(h.figure1,'userdata');
ud.nR2offset = ud.nR2offset-1;
if nR2offset>0
     ud.tR2offset = ud.tR(nR2offset);   
else
     ud.tRoffset = ud.tR(1)-ud.tR2(-nR2offset+1);
end

ud.nR2 = ud.nR2 - (ud.nR(nR2offset+1)-ud.nR(nR2offset));
% if shift to negative values, set nR to 1
nR2_neg = find(ud.tR2<0);
ud.nR2(nR2_neg) = 1;
% find nR values that were set to length(ud.tsig) because
% ud.tR>max(ud.tsig) and find corresponding nR values
nR2_pos = find(ud.nR2==length(ud.tsig));

for i = nR2_pos %1:m2+1
    rg1 = max(1,floor((ud.tR2(i)+ud.tR2offset-0.1)*ud.Fs));
    rg2 = min(floor((ud.tR2(i)+ud.tR2offset+0.1)*ud.Fs),m);
    rg = rg1:rg2;
    Dtsig = abs(ud.tsig(rg) -  (ud.tR2(i)+ud.tR2offset)  );
    nR2t = rg1 - 1 + min(find(Dtsig == min(Dtsig)));
    rg2b = nR2t + [-2:2]; rg2b = rg2b(1) - 1 + find(rg2b>=1 & rg2b<=m);
    ud.nR2(i) = rg2b(1) - 1 + min(find(ud.ECGsig(rg2b) == max(ud.ECGsig(rg2b)) ) );
end


figure(h.figure1);
set(h.figure1,'userdata',ud);

% Update IBI related plots
Update_IBIplot


% --- Executes on button press in Inc_pushbutton.
function Inc_Callback(hObject, eventdata, handles)
% hObject    handle to Inc_pushbutton (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of Inc_pushbutton

h = guidata(gcf);
ha1 = h.axes1;
matlab_wd = pwd;
ud = get(h.figure1,'userdata');
ud.nR2offset = ud.nR2offset+1;
if nR2offset>0
     ud.tR2offset = ud.tR(nR2offset);   
else
     ud.tRoffset = ud.tR(1)-ud.tR2(-nR2offset+1);
end

ud.nR2 = ud.nR2 + (ud.nR(nR2offset+1)-ud.nR(nR2offset));
nR2_pos = find(ud.tR2>max(ud.tsig) );
ud.nR2(nR2_pos) = length(ud.tsig);
% find nR values that were set to 1 because
% ud.tR<0 and find corresponding nR values
nR2_neg = find(ud.nR2==1);

for i = nR2_neg %1:m2+1
    rg1 = max(1,floor((ud.tR2(i)+ud.tR2offset-0.1)*ud.Fs));
    rg2 = min(floor((ud.tR2(i)+ud.tR2offset+0.1)*ud.Fs),m);
    rg = rg1:rg2;
    Dtsig = abs(ud.tsig(rg) -  (ud.tR2(i)+ud.tR2offset)  );
    nR2t = rg1 - 1 + min(find(Dtsig == min(Dtsig)));
    rg2b = nR2t + [-2:2]; rg2b = rg2b(1) - 1 + find(rg2b>=1 & rg2b<=m);
    ud.nR2(i) = rg2b(1) - 1 + min(find(ud.ECGsig(rg2b) == max(ud.ECGsig(rg2b)) ) );
end


% 
% for i = 1:m2+1
%     rg = find((ud.tsig>ud.tR2(i)+ud.tR2offset-0.1) & (ud.tsig<ud.tR2(i)+ud.tR2offset+0.1));
%     Dtsig = abs(ud.tsig(rg) -  (ud.tR2(i)+ud.tR2offset)  );
%     ud.nR2(i) = rg(1) -1 + find(Dtsig == min(Dtsig));
% end

figure(h.figure1);
set(h.figure1,'userdata',ud);

% Update IBI related plots
Update_IBIplot


function ImportSignals_Callback %(hObject, eventdata, handles)
% hObject    handle to ImportSignals (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
  
     
    
    h = guidata(gcf);
    ha1 = h.axes1;
    matlab_wd = pwd;
    ud = get(h.figure1,'userdata');

%%%%%%%%%%%%%% LOAD time Signal data if THEY EXIST 
  cd(ud.PathNameLoad);
  [f,p]=uigetfile({'*_HRV*.txt','HRV Results Data File (*_HRV.txt)';...
          '*.txt;*.dat','Text or Data File (*.txt,*.dat)'});
  cd(matlab_wd)
  set(h.figure1,'pointer','watch')
  
  if ~isequal(f,0)
      fullFileNameHRV = fullfile(p,f);
      
      %set(h.text2,'string',sprintf('File Name: %s',fullfile(p,f) ));
      set(h.figure1,'userdata',ud);
      
      filename = fullFileNameHRV; 
      [tS1, tS2, Ns] = ImportSampleTime(filename,[ud.tsig(1) ud.tsig(length(ud.tsig))]);
      if ~isempty(Ns)
          ud.Signalt1 = floor(tS1*10)/10;
          ud.Signalt2 = ceil(tS2*10)/10;
          ud.Nber_of_Signals = Ns;
          ud.Signal_Nber = 1;
      end
      %Retrieve current working directory
      cd(ud.wd)   
      
      figure(h.figure1);
      set(h.figure1,'userdata',ud);
      % Update IBI and Sample patches related plots
      Update_PatchSignal
      Update_IBIplot;
      Update_axes1(axis(h.axes1));
  end
  
  set(h.figure1,'pointer','arrow') 


  
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%                                                            %%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%                   Rpeaks finder                            %%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%                                                            %%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  
% --------------------------------------------------------------------
function TurnOffRpeaksFinder %(hObject, eventdata, handles)
% hObject    handle to TurnOffRpeaksFinder (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)


h = guidata(gcf);
ha1 = h.axes1;
matlab_wd = pwd;
ud = get(h.figure1,'userdata');
ud.nR2 =[]; ud.tR2 = []; ud.tR2offset = []; ud.nR2offset = [];

set(h.figure1,'userdata',ud);
set(ud.SelectRRHandle,'Visible','off')
    


% --- Executes on button press in SelectRR_togglebutton.
function SelectRR_togglebutton_Callback(hObject, eventdata, handles)
% hObject    handle to SelectRR_togglebutton (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
button = questdlg('The R peak locations will be set to that of the crosses!','Saving Current R peaks location','Ok','Cancel','Cancel') 

if button == 'Ok'
    
    h = guidata(gcf);
    ha1 = h.axes1;
    matlab_wd = pwd;
    ud = get(h.figure1,'userdata');
    ud.nR = ud.nR2;
    ud.tR = ud.tR2 + ud.tR2offset;
    ud.nR2 =[]; ud.tR2 = []; ud.tR2offset = []; ud.nR2offset = [];
    
    set(h.figure1,'userdata',ud);
    % Update IBI related plots
    Update_IBIplot
    ud = get(h.figure1,'userdata');
    if ud.save == 1
        set(h.savebutton,'Enable','on','BackgroundColor',ud.orange,'ForegroundColor',[1 1 1])
    end
    %set(ud.filemenu_handles(15),'Enable','off')
    set(ud.filemenu_TurnOffRPeaks,'Enable','off')
    set(ud.SelectRRHandle,'Visible','off')
    %Update_TimeFreqMeasure
    
%     ud.nRfil = 
%     ud.tRfil = 
    
end
set(h.SelectRR_togglebutton, 'Value',0)


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%                                                            %%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%                   Sample Editing Parameters                %%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%                                                            %%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%



function Sample_Nber_Callback(hObject, eventdata, handles)
% hObject    handle to Sample_Nber (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of Sample_Nber as text
%        str2double(get(hObject,'String')) returns contents of Sample_Nber as a double

h = guidata(gcf);
ud = get(h.figure1,'userdata');

if get(h.SignalEditing,'value') == 0
    ud.Sample_Nber = round(str2double (get(h.Sample_Nber,'String')));
% Sample Nber should be less than Nber of Samples
ud.Sample_Nber = max(1,min(ud.Sample_Nber, ud.Nber_of_Samples));

elseif get(h.SignalEditing,'value') == 1
      ud.Signal_Nber = round(str2double (get(h.Signal_Nber,'String')));
% Signal Nber should be less than Nber of Signals
ud.Signal_Nber = max(1,min(ud.Signal_Nber, ud.Nber_of_Signals));
  
end



% set(h.SampleStart_edit,'String',sprintf('%.1f',ud.Samplet1(ud.Sample_Nber)));
% set(h.SampleEnd_edit,'String',sprintf('%.1f',ud.Samplet2(ud.Sample_Nber)));
% set(h.SampleLength_edit,'String',sprintf('%.1f',ud.Samplet2(ud.Sample_Nber) - ud.Samplet1(ud.Sample_Nber)));
% set(h.Sample_Nber,'String',sprintf('%d',ud.Sample_Nber));

set(h.figure1,'userdata',ud)
Update_SamplePatchesMeasures




function Nber_of_Samples_Callback(hObject, eventdata, handles)
% hObject    handle to Nber_of_Samples (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of Nber_of_Samples as text
%        str2double(get(hObject,'String')) returns contents of Nber_of_Samples as a double
 
h = guidata(gcf);
ud = get(h.figure1,'userdata');


 

function SampleStart_edit_Callback(hObject, eventdata, handles)
% hObject    handle to SampleStart_edit (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of SampleStart_edit as text
%        str2double(get(hObject,'String')) returns contents of SampleStart_edit as a double

h = guidata(gcf);
ud = get(h.figure1,'userdata');

if get(h.SignalEditing,'value') == 0
    nS = ud.Sample_Nber;
    t1old = ud.Samplet1(nS);
    ud.Samplet1(nS) = min(str2double(get(hObject,'String')) , ud.tmax);
    % ud.Samplet1 cannot be greater than ud.Samplet2
    if (ud.Samplet2(nS) - ud.Samplet1(nS))< 1 
        ud.Samplet2(nS) = min(ud.Samplet1(nS) +  (ud.Samplet2(nS) - t1old) , ud.tmax);
    end
    
elseif get(h.SignalEditing,'value') == 1
    nS = ud.Signal_Nber;
    t1old = ud.Signalt1(nS);
    ud.Signalt1(nS) = min(str2double(get(hObject,'String')) , ud.tmax);
    % ud.Samplet1 cannot be greater than ud.Samplet2
    if (ud.Signalt2(nS) - ud.Signalt1(nS))< 1 
        ud.Signalt2(nS) = min(ud.Signalt1(nS) +  (ud.Signalt2(nS) - t1old) , ud.tmax);
    end
    
end


set(h.figure1,'userdata',ud)

% set(h.SampleStart_edit,'String',sprintf('%.1f',ud.Samplet1(nS)));
% set(h.SampleEnd_edit,'String',sprintf('%.1f',ud.Samplet2(nS)));
% set(h.SampleLength_edit,'String',sprintf('%.1f',ud.Samplet2(nS) - ud.Samplet1(nS)));


Update_SamplePatchesMeasures


function SampleEnd_edit_Callback(hObject, eventdata, handles)
% hObject    handle to SampleEnd_edit (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of SampleEnd_edit as text
%        str2double(get(hObject,'String')) returns contents of SampleEnd_edit as a double

h = guidata(gcf);
ud = get(h.figure1,'userdata');



if get(h.SignalEditing,'value') == 0
    nS = ud.Sample_Nber;
    t2old = ud.Samplet2(nS);
    ud.Samplet2(nS) = max(str2double(get(hObject,'String')) , ud.tmin);
    % ud.Samplet1 cannot be greater than ud.Samplet2
    if (ud.Samplet2(nS) - ud.Samplet1(nS))< 1 
        ud.Samplet1(nS) = max(ud.Samplet2(nS) -  (t2old - ud.Samplet1(nS)) , ud.tmin);
    end
elseif get(h.SignalEditing,'value') == 1
    nS = ud.Signal_Nber;
    t2old = ud.Signalt2(nS);
    ud.Signalt2(nS) = max(str2double(get(hObject,'String')) , ud.tmin);
    % ud.Samplet1 cannot be greater than ud.Samplet2
    if (ud.Signalt2(nS) - ud.Signalt1(nS))< 1 
        ud.Signalt1(nS) = max(ud.Signalt2(nS) -  (t2old - ud.Signalt1(nS)) , ud.tmin);
    end
end
set(h.figure1,'userdata',ud)

% set(h.SampleStart_edit,'String',sprintf('%.1f',ud.Samplet1(nS)));
% set(h.SampleEnd_edit,'String',sprintf('%.1f',ud.Samplet2(nS)));
% set(h.SampleLength_edit,'String',sprintf('%.1f',ud.Samplet2(nS) - ud.Samplet1(nS)));

Update_SamplePatchesMeasures



function SampleLength_edit_Callback(hObject, eventdata, handles)
% hObject    handle to SampleLength_edit (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of SampleLength_edit as text
%        str2double(get(hObject,'String')) returns contents of SampleLength_edit as a double
h = guidata(gcf);
ud = get(h.figure1,'userdata');

if get(h.SignalEditing,'value') == 0
    nS = ud.Sample_Nber;
    ud.Samplet2(nS) = min(max(ud.Samplet1(nS) + max(str2double(get(hObject,'String')),1) , ud.tmin),ud.tmax);
elseif get(h.SignalEditing,'value') == 1
    nS = ud.Signal_Nber;
    ud.Signalt2(nS) = min(max(ud.Signalt1(nS) + max(str2double(get(hObject,'String')),1) , ud.tmin),ud.tmax);
end
nS = ud.Sample_Nber;



set(h.figure1,'userdata',ud)

% %set(h.SampleStart_edit,'String',sprintf('%.1f',ud.Samplet1(nS)));
% set(h.SampleEnd_edit,'String',sprintf('%.1f',ud.Samplet2(nS)));
% set(h.SampleLength_edit,'String',sprintf('%.1f',ud.Samplet2(nS) - ud.Samplet1(nS)));

Update_SamplePatchesMeasures



function SampleLabel_edit_Callback(hObject, eventdata, handles)
% hObject    handle to SampleLabel_edtit (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of SampleLabel_edtit as text
%        str2double(get(hObject,'String')) returns contents of SampleLabel_edtit as a double


h = guidata(gcf);
ud = get(h.figure1,'userdata');

ud.SampleLabel{ud.Sample_Nber} = get(hObject,'String');

set(h.figure1,'userdata',ud);



% --- Executes on button press in SampleNext_pushbutton.
function SampleNext_pushbutton_Callback(hObject, eventdata, handles)
% hObject    handle to SampleNext_pushbutton (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

h = guidata(gcf);
ud = get(h.figure1,'userdata');

if get(h.SignalEditing,'value') == 0
    ud.Sample_Nber = abs(rem(ud.Sample_Nber,ud.Nber_of_Samples))+1;
    nS = ud.Sample_Nber;
    tS1 = ud.Samplet1(nS); tS2 = ud.Samplet2(nS);
elseif get(h.SignalEditing,'value') == 1
    ud.Signal_Nber = abs(rem(ud.Signal_Nber,ud.Nber_of_Signals))+1;
    nS = ud.Signal_Nber;
    tS1 = ud.Signalt1(nS); tS2 = ud.Signalt2(nS);
end

if get(h.SampleZoom_pushbutton(1),'Value') == 1
    axis1 = axis(h.axes1);
    DtS = tS2 - tS1;
    x1 = max(ud.tmin,tS1-max(DtS/10,20));
    x2 = min(ud.tmax,tS2+max(DtS/10,20));
    set(h.RRzoomtogglebutton,'Value',1);
    Update_axes1([x1 x2 axis1(3) axis1(4)]);
end

set(h.figure1,'userdata',ud)

Update_SamplePatchesMeasures

% --- Executes on button press in SamplePrevious_pushbutton.
function SamplePrevious_pushbutton_Callback(hObject, eventdata, handles)
% hObject    handle to SamplePrevious_pushbutton (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

h = guidata(gcf);
ud = get(h.figure1,'userdata');

if get(h.SignalEditing,'value') == 0
    ud.Sample_Nber = abs(rem(ud.Nber_of_Samples+ud.Sample_Nber-2,ud.Nber_of_Samples))+1;
    nS = ud.Sample_Nber;
    tS1 = ud.Samplet1(nS); tS2 = ud.Samplet2(nS);
elseif get(h.SignalEditing,'value') == 1
    ud.Signal_Nber = abs(rem(ud.Nber_of_Signals+ud.Signal_Nber-2,ud.Nber_of_Signals))+1;
    nS = ud.Signal_Nber;
    tS1 = ud.Signalt1(nS); tS2 = ud.Signalt2(nS);
end

if get(h.SampleZoom_pushbutton(1),'Value') == 1
    axis1 = axis(h.axes1);
    DtS = tS2 - tS1;
    x1 = max(ud.tmin,tS1-max(DtS/10,20));
    x2 = min(ud.tmax,tS2+max(DtS/10,20));
    set(h.RRzoomtogglebutton,'Value',1);
    Update_axes1([x1 x2 axis1(3) axis1(4)]);
end
set(h.figure1,'userdata',ud)

Update_SamplePatchesMeasures

% --- Executes on button press in Sample_Zoom.
function SampleZoom_pushbutton_Callback(hObject, eventdata, handles)
% hObject    handle to Sample_Zoom (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of Sample_Zoom
h = guidata(gcf);
ud = get(h.figure1,'userdata');

if get(hObject,'Value') == 1
    set(h.SampleZoom_pushbutton,'value',1);
    axis3 = axis(h.axes3);
    axis1 = axis(h.axes1);
    if get(h.SignalEditing,'value') == 0
        nS = ud.Sample_Nber;
        tS1 = ud.Samplet1(nS); tS2 = ud.Samplet2(nS);
    elseif get(h.SignalEditing,'value') == 1
        nS = ud.Signal_Nber;
        tS1 = ud.Signalt1(nS); tS2 = ud.Signalt2(nS);
    end
    DtS = tS2 - tS1;
%     x1 = max(ud.tmin,tS1-max(DtS/10,10));
%     x2 = min(ud.tmax,tS2+max(DtS/10,10));
    x1 = max(ud.tmin,tS1-20);
    x2 = min(ud.tmax,tS2+20);
    set(h.RRzoomtogglebutton,'Value',1);
    Update_axes1([x1 x2 axis1(3) axis1(4)]);
    Update_PatchSignal;
else
    set(h.SampleZoom_pushbutton,'value',0);
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%           Quit Signal Editing          %%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function QuitSignalEditing(Signal)
h = guidata(gcf);
ha1 = h.axes1;
ud = get(h.figure1,'userdata');
ud1 = get(ha1,'userdata');

if nargin == 0
    Signal = 'IBI';
end

%Enter_SignalEditing;
set(h.SignalEditing,'value', 0); 
set(ud.SampleHandle,'BackgroundColor',ud.green_light);
set(ud.SamplePushbuttonHandle,'BackgroundColor',ud.greenPushbutton);
set(ud.SignalAnalyzedHandle,'BackgroundColor',ud.green_lightAnalyzed)
set([ud.SignalAnalyzedHandle;h.SampleLabel_edit],'enable','on');
set(h.RRsample_Select_Title,'string','Analysis Samples');
if ud.Nber_of_Samples ~= 0
    set([ud.SamplePushbuttonHandle;ud.SampleEditHandle],'Enable','on');
end
%axes(h.SignalEditaxes); 
%set(allchild(h.SignalEditaxes),'Visible','Off');
%set(ud1.hPatchSignal, 'FaceAlpha',0.2, 'LineWidth',1, 'EdgeColor',ud.magenta_light)
if ~isempty(ud1.hPatchSignal)
    try
        %set(ud1.hPatchSignal, 'FaceAlpha',0.5, 'LineWidth',1, 'FaceColor',[255 190 255]/255,'EdgeColor',[255 130 255]/255)
        set(ud1.hPatchSignal, 'FaceAlpha',0.5, 'LineWidth',1, 'FaceColor',[170 120 170]/255,'EdgeColor',[255 130 255]/255)
        %set(ud1.hPatchSignal, 'FaceAlpha',0.3, 'LineWidth',2, 'FaceColor',ud.magenta_light,'EdgeColor',ud.magenta_dark)

   catch
        Update_PatchSignal
    end
end
set(allchild(h.SampleEditaxes),'Visible','On');

UpdateFinalSignal(Signal)

% transfer Sample Info to appropriate Signal
% eval(['ud.' Signal '.Samplet1 = ud.Signalt1;']);
% eval(['ud.' Signal '.Samplet2 = ud.Signalt2;']);
% eval(['ud.' Signal '.Sample_Nber = ud.Signal_Nber;']);
% eval(['ud.' Signal '.Nber_of_Samples = ud.Nber_of_Signals;']);




%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%           Start Signal Editing          %%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function StartSignalEditing

h = guidata(gcf);
ud = get(h.figure1,'userdata');
ud1 = get(h.axes1,'userdata');

if nargin == 0
    Signal = 'IBI';
end

set(h.SampleEditing,'value', 0); 
set([ud.SampleHandle;ud.SignalAnalyzedHandle],'BackgroundColor',ud.magenta_light)
%set(ud.SampleHandle,'BackgroundColor',ud.magenta_light);
set(ud.SamplePushbuttonHandle,'BackgroundColor',ud.magenta);
set([ud.SignalAnalyzedHandle;h.SampleLabel_edit],'enable','off');
%axes(h.SampleEditaxes); cla;
set(allchild(h.SampleEditaxes),'Visible','Off')
set(allchild(h.SignalEditaxes),'Visible','On');
try
    set(ud1.hPatchSignal, 'FaceAlpha',0.5, 'LineWidth',1, 'FaceColor',ud.magenta_light,'EdgeColor',ud.magenta_dark)
catch
    Update_PatchSignal
end
set(h.RRsample_Select_Title,'string',sprintf('Editing %s Signal',Signal));


% transfer Signal Info to Temporary Sample 
% eval(['ud.Signalt1 = ud.' Signal '.Samplet1;']);
% eval(['ud.Signalt2 = ud.' Signal '.Samplet2;']);
% eval(['ud.Signal_Nber = ud.' Signal '.Sample_Nber;']);
% eval(['ud.Nber_of_Signals = ud.' Signal '.Nber_of_Samples;']);

if ud.Nber_of_Signals ~= 0
    set([ud.SamplePushbuttonHandle;ud.SampleEditHandle],'Enable','on');
end

set(h.figure1,'userdata',ud)



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%           Sample Editing Callback      %%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


% --- Executes on button press in SampleEditing.
function SampleEditing_Callback(hObject, eventdata, handles)
% hObject    handle to SampleEditing (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

h = guidata(gcf);
ud = get(h.figure1,'userdata');

val = get(hObject,'Value');
if val == 1
    if get(h.SignalEditing,'value') == 1;
        QuitSignalEditing;
    end
    Update_IBIplot
    ud = get(h.figure1,'userdata');
    %Update_SamplePatchesMeasures
    
    if ud.Nber_of_Samples ~= 0
        set([ud.SamplePushbuttonHandle;ud.SampleEditHandle],'Enable','on');
    end
    

elseif val == 0
    %do nothing
end




%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%           Signal Editing Callback      %%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% --- Executes on button press in SampleEditing.
function SignalEditing_Callback(hObject, eventdata, handles)
% hObject    handle to SampleEditing (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

h = guidata(gcf);
ud = get(h.figure1,'userdata');

val = get(hObject,'Value');
if val == 1
    StartSignalEditing;
elseif val == 0
    QuitSignalEditing;
 
%     set(ud.SampleHandle,'BackgroundColor',ud.green_light);
%     set(ud.SamplePushbuttonHandle,'BackgroundColor',ud.greenPushbutton);
%     set(ud.SignalAnalyzedHandle,'BackgroundColor',ud.green_lightAnalyzed)
%     set([ud.SignalAnalyzedHandle;h.SampleLabel_edit],'enable','on');
%     %axes(h.SignalEditaxes); 
%     set(allchild(h.SignalEditaxes),'Visible','Off')
%     set(allchild(h.SampleEditaxes),'Visible','On');
%     if ud.Nber_of_Samples ~= 0
%         set([ud.SamplePushbuttonHandle;ud.SampleEditHandle],'Enable','on');
%     end
end
Update_SamplePatchesMeasures 
%Update_SamplePatchesMeasures



% --- Executes on button press in SampleDelete_pushbutton.
function SampleDelete_pushbutton_Callback(hObject, eventdata, handles)
% hObject    handle to SampleDelete_pushbutton (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

h = guidata(gcf);
ud = get(h.figure1,'userdata');
ud1 = get(h.axes1,'userdata');

axis3 = axis(h.axes3);
xmin = axis3(1); xmax = axis3(2);
if get(h.SignalEditing,'value') == 0 
    t1Sold = ud.Samplet1;
    t2Sold = ud.Samplet2;
    Nold = ud.Nber_of_Samples;
    nSold = ud.Sample_Nber;

    nS = ud.Sample_Nber;
    if (ud.Samplet1(nS)>=xmin & ud.Samplet1(nS)<=xmax) & (ud.Samplet2(nS)>=xmin & ud.Samplet2(nS)<=xmax)
        % first delete sample
        ud.Samplet1(nS) = [];
        ud.Samplet2(nS) = [];
        %ud.hPatchSample(nS) = [];
        ud.SampleLabel = ud.SampleLabel([1:nS-1 nS+1:Nold]);
        
        % redefine NberofSamples and Sample_Nber
        ud.Nber_of_Samples = length(ud.Samplet1);
        if ud.Nber_of_Samples ~= 0
            dist = abs(mean([ud.Samplet1;ud.Samplet2]-mean([t1Sold(nSold) t2Sold(nSold)])));
            ud.Sample_Nber = find(dist == min(dist));
        else
            ud.Sample_Nber = []; ud.Nber_of_Samples = 0;
        end
        set(h.figure1,'userdata',ud)
        set(h.axes1,'userdata',ud1)
    end
elseif get(h.SignalEditing,'value') == 1
    t1Sold = ud.Signalt1;
    t2Sold = ud.Signalt2;
    Nold = ud.Nber_of_Signals;
    nSold = ud.Signal_Nber;

    nS = ud.Signal_Nber;
    if (ud.Signalt1(nS)>=xmin & ud.Signalt1(nS)<=xmax) & (ud.Signalt2(nS)>=xmin & ud.Signalt2(nS)<=xmax)
        % first delete sample
        ud.Signalt1(nS) = [];
        ud.Signalt2(nS) = [];

        %ud1.hPatchSignal(nS) = [];
        % redefine NberofSignals and Signal_Nber
        ud.Nber_of_Signals = length(ud.Signalt1);
        if ud.Nber_of_Signals ~= 0
            dist = abs(mean([ud.Signalt1;ud.Signalt2]-mean([t1Sold(nSold) t2Sold(nSold)])));
            ud.Signal_Nber = find(dist == min(dist));
        else
            ud.Signal_Nber = []; ud.Nber_of_Signals = 0;
        end
        set(h.figure1,'userdata',ud)
        set(h.axes1,'userdata',ud1)

    end
end

set(h.figure1,'userdata',ud)   
Update_SamplePatchesMeasures


function UpdateFinalSignal(Signal)
h = guidata(gcf);
ud = get(h.figure1,'userdata');

if nargin == 0
    Signal = 'ALL';
end
% if strncmp(Signal,'IBI',3)
%     [ud.RESP_final, ud.tRESP_final, ud.tRESP_finalshift] = ExtractSignal(ud.RESPsig,ud.tRESPsig, ud.Signalt1, ud.Signalt2, [], []);
%     [ud.EDR_final, ud.tEDR_final, ud.tEDR_finalshift] = ExtractSignal(ud.EDRsig,ud.tEDRsig, ud.Signalt1, ud.Signalt2, [], []);
% end
if strncmp(Signal,'IBI',3) |  strncmp(Signal,'ALL',3)
    %Extract Signal for IBI
    if ~isempty(ud.tR); m = length(ud.tR); else m=0; end
    tIBI = 1000*(ud.tR(2:m)-ud.tR(1:m-1));
    [ud.IBI_final, ud.tIBI_final, ud.tIBI_finalshift] = ExtractSignal(tIBI,ud.tR(2:m), ud.Signalt1, ud.Signalt2, [], []);
    %[ud.RESP_final, ud.tRESP_final, ud.tRESP_finalshift] = ExtractSignal(ud.RESPsig,ud.tRESPsig, ud.Signalt1, ud.Signalt2, [], []);
end

% redefine Edited Signal region close to IBI
Nt = length(ud.tIBI_final);
n1S = find(ud.tIBI_final(2:Nt)~=ud.tIBI_final(1:Nt-1)+ud.IBI_final(2:Nt)/1000)-1;
t1S =  [0 ud.tIBI_final(n1S+2)'-ud.IBI_final(n1S+2)'/1000 + 0.05];
t2S =  [(ud.tIBI_final(n1S+1)+0.05)' ud.tmax];

if strncmp(Signal,'RESP',3) ||  strncmp(Signal,'ALL',3)
    if ~isempty(ud.Signalt1) && ~isempty(ud.RESPsig)
%         t1S = [0 ud.Signalt2];
%         t2S = [ud.Signalt1 ud.tmax];
        Ns = length(t1S);
        rg = []; n1Sshift = []; n1S=[];
        for is = 1:Ns
            rg1 = find(ud.tRESPsig>=t1S(is) & ud.tRESPsig<=t2S(is));
            rg = [rg ; rg1];
            n1S(is) = rg1(length(rg1));
            n1Sshift(is) = length(rg);
        end
        nw = ud.Fs_interp;
        ud.RESP_final = ud.RESPsig(rg);
        ud.tRESP_final = ud.tRESPsig(rg);
        ud.tRESP_finalshift = ud.tRESPsig(1) + [0:1:length(rg)-1]'*1/ud.Fs_interp;
        Nmax = length(ud.tRESP_finalshift);
        %since there is discontinuity at edited Sample regions
        % we interpolate at -1/+1 seconds around the discontinuities
        try
            for is = 1:Ns-1
                rgw = max(n1Sshift(is)-nw,1):min(n1Sshift(is)+nw,Nmax);
                rgw2 = [max(n1Sshift(is)-nw*60,1):n1Sshift(is)-nw-1 n1Sshift(is)+nw+1:min(n1Sshift(is)+60*nw,Nmax)];
                 
                RESP_final_interp = interp1(ud.tRESP_finalshift(rgw2), ud.RESP_final(rgw2),ud.tRESP_finalshift(rgw),'spline');
                RESP_final_new  = ud.RESP_final;RESP_final_new(rgw) = RESP_final_interp;
                rgw2 = max(n1Sshift(is)-nw*20,1):min(n1Sshift(is)+nw*20,Nmax);
                rgw3 = max(n1S(is)-nw*20,1):min(n1S(is)+nw*20,length(ud.tRESPsig));
%                 figure(1); plot(ud.tRESPsig(rgw3)-ud.tRESPsig(n1S(is))+ud.tRESP_finalshift(n1Sshift(is)),ud.RESPsig(rgw3),'k.',ud.tRESP_finalshift(rgw2),RESP_final_new(rgw2),'r.',ud.tRESP_finalshift(rgw2),ud.RESP_final(rgw2),'b.',...
%                     ud.tRESPsig(rgw3)-ud.tRESPsig(n1S(is))+ud.tRESP_finalshift(n1Sshift(is)),ud.RESPsig(rgw3),'k',ud.tRESP_finalshift(rgw2),RESP_final_new(rgw2),'r',ud.tRESP_finalshift(rgw2),ud.RESP_final(rgw2),'b');
%                 title(sprintf('is = %d / %d',is,Ns-1)); pause(1)
                if abs(t2S(is)-t1S(is+1))>3
                    %fprintf('is = %d / %d - replaced (%1.2g)',is,Ns-1,abs(t2S(is)-t1S(is+1)));
                    ud.RESP_final(rgw) = RESP_final_interp;
                end
            end
        catch
            disp('Error with plotting')
        end
        figure(h.figure1)
    else
        ud.RESP_final=ud.RESPsig;
        ud.tRESP_final=ud.tRESPsig;
        ud.tRESP_finalshift=ud.tRESPsig;
    end 
    %[ud.RESP_final, ud.tRESP_final, ud.tRESP_finalshift] = ExtractSignal(ud.RESPsig,ud.tRESPsig, ud.Signalt1, ud.Signalt2, [], []);
end    

if strncmp(Signal,'EDR',3) ||  strncmp(Signal,'ALL',3)
    if ~isempty(ud.Signalt1) && ~isempty(ud.EDRsig)
        % building vector of time segments outside "Signal" segments
        t1S = [0 ud.Signalt2]; 
        t2S = [ud.Signalt1 ud.tmax];
        Ns = length(t1S);
        rg = [];
        for is = 1:Ns
            rg = [rg ; find(ud.tEDRsig>=t1S(is) & ud.tEDRsig<=t2S(is))];
        end
        ud.EDR_final = ud.EDRsig(rg);
        ud.tEDR_final = ud.tEDRsig(rg);
        ud.tEDR_finalshift = ud.tEDRsig(1) + [0:1:length(rg)-1]'*1/ud.Fs_interp;
    else
        ud.EDR_final=ud.EDRsig;
        ud.tEDR_final=ud.tEDRsig;
        ud.tEDR_finalshift=ud.tEDRsig;
    end
    %[ud.EDR_final, ud.tEDR_final, ud.tEDR_finalshift] = ExtractSignal(ud.EDRsig,ud.tEDRsig, ud.Signalt1, ud.Signalt2, [], []);
end
%     otherwise
%         if ~isempty(ud.tR); m = length(ud.tR); else m=0; end
%         m = length(ud.tR);
%         tIBI = 1000*(ud.tR(2:m)-ud.tR(1:m-1));
%         [ud.IBI_final, ud.tIBI_final, ud.tIBI_finalshift] = ExtractSignal(tIBI,ud.tR(1:m-1), ud.Signalt1, ud.Signalt2, [], []);
%     end
%         


set(h.figure1,'userdata',ud)



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%                                                            %%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%                   SignalEditing Functions                  %%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%                                                            %%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


function Update_CurrentSampleEdit
h = guidata(gcf);
ud = get(h.figure1,'userdata');
fprintf('CurrentSampleEdit \n')
if isempty(ud.Nber_of_Signals) || ud.Nber_of_Signals == 0
    ud.Signal_Nber= [];
end
if isempty(ud.Nber_of_Samples) || ud.Nber_of_Samples == 0
    ud.Sample_Nber= [];
end
if get(h.SignalEditing,'value') == 1
   nS = ud.Signal_Nber;
else
   nS = ud.Sample_Nber;
end
if get(h.SignalEditing,'value') == 1 && ~isempty(nS)
    
    nSmax = ud.Nber_of_Signals;
    set(h.SampleLength_edit,'String',sprintf('%0.1f',abs(ud.Signalt2(nS) - ud.Signalt1(nS))));
    set(h.SampleStart_edit,'String',sprintf('%0.1f',ud.Signalt1(nS)));
    set(h.SampleEnd_edit,'String',sprintf('%0.1f',ud.Signalt2(nS)));
    set(h.Sample_Nber,'String',sprintf('%d',ud.Signal_Nber));
    set(h.Nber_of_Samples,'String',sprintf('%d',ud.Nber_of_Signals));
    set(h.SampleLabel_edit,'String','');
    %Update_PatchSignal;
elseif ~isempty(nS) 
    
    nSmax = ud.Nber_of_Samples;
    set(h.SampleLength_edit,'String',sprintf('%0.1f',abs(ud.Samplet2(nS) - ud.Samplet1(nS))));
    set(h.SampleStart_edit,'String',sprintf('%0.1f',ud.Samplet1(nS)));
    set(h.SampleEnd_edit,'String',sprintf('%0.1f',ud.Samplet2(nS)));
    set(h.SampleLabel_edit,'String',sprintf('%s',ud.SampleLabel{nS}));
    set(h.Sample_Nber,'String',sprintf('%d',ud.Sample_Nber));
    set(h.Nber_of_Samples,'String',sprintf('%d',ud.Nber_of_Samples));
    %Update_PatchSample;
end 
if isempty(nS)
    set([ud.SamplePushbuttonHandle;ud.SampleEditHandle],'Enable','off');
    set(h.Nber_of_Samples,'Enable','on');
elseif nSmax == 1;
    set([ud.SamplePushbuttonHandle;ud.SampleEditHandle],'Enable','on');
end
    




function Clean_SignalSample
%reorder Signal Sample and delete unnecessary sample
disp('Clean_SignalSample')
h = guidata(gcf);
ud = get(h.figure1,'userdata');
t1Sold = ud.Signalt1;
t2Sold = ud.Signalt2;
Nold = ud.Nber_of_Signals;
nSold = ud.Signal_Nber;


% first delete unwanted samples (less than 0.1sec)
nS = find(abs(ud.Signalt1-ud.Signalt2) <0.1); 
ud.Signalt1(nS) = NaN; %replace by NaN so that I can retrieve SampleLabel later on
ud.Signalt2(nS) = NaN;

% make sure that t1sample<t2sample
nS = find(ud.Signalt1>ud.Signalt2);
ud.Signalt1(nS) = ud.Signalt2(nS);
ud.Signalt2(nS) = t1Sold(nS);

N = length(ud.Signalt1);
% % merge samples
% nSout = find(abs(ud.Signalt2(1:N-1) - ud.Signalt1(2:N))<0.1 );
% while ~isempty(nSout)
%      ud.Signalt2(nSout) = ud.Signalt2(nSout+1); %merge
%      %delete what has been merged
%      ud.Signalt1(nSout+1)=[]; 
%      ud.Signalt2(nSout+1)=[];
%      N = length(ud.Signalt1);
%      nSout = find(abs(ud.Signalt2(1:N-1) - ud.Signalt1(2:N))<0.1 );
% end
     
% reorder samples before deleting
[ud.Signalt1,nSsort] = sort(ud.Signalt1);
nSsort;
nSin = find(~isnan(ud.Signalt1));
ud.Signalt1 = ud.Signalt1(nSin);
ud.Signalt2 = ud.Signalt2(nSsort(nSin));

%merge overlapping or adjacent samples (if space in between less than 5s)
i = 2;
Tspace = 5;
while i<=length(ud.Signalt2)
    if ud.Signalt2(i-1)>ud.Signalt1(i)-Tspace
        ud.Signalt2(i-1) = max(ud.Signalt2(i),ud.Signalt2(i-1));
        ud.Signalt1(i) = [];
        ud.Signalt2(i) = [];
    else
        i = i+ 1;
    end
end
% Ns = length(ud.Signalt1);
% nSout = [];
% for i = 2:Ns
%     if ud.Signalt2(i-1)>ud.Signalt1(i)-0.2
%         ud.Signalt2(i-1) = ud.Signalt2(i);
%         nSout = [nSout i];
%     end
% end
% ud.Signalt1(nSout)=[];
% ud.Signalt2(nSout)=[];

% redefine NberofSamples and Sample_Nber
ud.Nber_of_Signals = length(ud.Signalt1);
if ud.Nber_of_Signals ~= 0
    dist = abs(mean([ud.Signalt1;ud.Signalt2]-mean([t1Sold(nSold) t2Sold(nSold)])));
    ud.Signal_Nber = find(dist == min(dist));
else
    ud.Signal_Nber = []; ud.Nber_of_Signals = 0;
end

set(h.figure1,'userdata',ud)

axes3  = axis(h.axes3);
xmin = axes3(1); xmax = axes3(2); xamp = xmax-xmin;
if (xmin<= ud.Samplet2(ud.Sample_Nber) & xmax>= ud.Samplet1(ud.Sample_Nber) )
        Update_SamplePatchesMeasures
    %Update_axes1(axis1); 
end

    set(ud.file_saveClearRR_handles,'Enable','on');




function  Clean_HRVSample
%reorder Signal Sample and delete unnecessary sample
disp('Clean_HRVSample')
h = guidata(gcf);
ud = get(h.figure1,'userdata');
t1Sold = ud.Samplet1;
t2Sold = ud.Samplet2;
Nold = ud.Nber_of_Samples;
nSold = ud.Sample_Nber;
SampleLabelold = ud.SampleLabel;
nSout = 0;

% first delete unwanted samples (less than 0.1sec)
nS = find(abs(ud.Samplet1-ud.Samplet2) <0.1);
ud.Samplet1(nS) = NaN; %replace by NaN so that I can retrieve SampleLabel later on
ud.Samplet2(nS) = NaN;
if ~isempty(nS)
    nSout = 1;
end

% make sure that t1sample<t2sample
nS = find(ud.Samplet1>ud.Samplet2);
ud.Samplet1(nS) = ud.Samplet2(nS);
ud.Samplet2(nS) = t1Sold(nS);

% reorder samples before deleting
[ud.Samplet1,nSsort] = sort(ud.Samplet1);
nSsort;
nSin = find(~isnan(ud.Samplet1));
ud.Samplet1 = ud.Samplet1(nSin);
ud.Samplet2 = ud.Samplet2(nSsort(nSin));
ud.SampleLabel = ud.SampleLabel(nSsort(nSin));


% redefine NberofSamples and Sample_Nber
ud.Nber_of_Samples = length(ud.Samplet1);
if ud.Nber_of_Samples ~= 0 | nSout == 1
    dist = abs(mean([ud.Samplet1;ud.Samplet2]-mean([t1Sold(nSold) t2Sold(nSold)])));
    ud.Sample_Nber = find(dist == min(dist));
else
    ud.Sample_Nber = []; ud.Nber_of_Samples = 0;
end
set(h.figure1,'userdata',ud)
Update_SamplePatchesMeasures
%Update_HRV



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%                                                            %%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%                   Update    Measure                       %%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%                                                            %%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%       UPdate TimeFreqMeasure %%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function Update_TimeFreqMeasure %(n_sample)

% if nargin == 0 
%     n_sample = ud.Sample_Nber;
% end

Update_TimeMeasure %(n_sample)
Update_FreqMeasure %(n_sample)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%       UPdate TimeMeasure     %%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function Update_TimeMeasure(n_sample, EXPORTDATA)

h = guidata(gcf);
ha1 = h.axes1;
ud1 = get(ha1,'userdata');
ud = get(h.figure1,'userdata');

if nargin <2
    EXPORTDATA = 0;
end
if nargin == 0 | isempty(n_sample)
    n_sample = ud.Sample_Nber;
end
fprintf('Update TimeMeasure %d \n',n_sample);

if isempty(ud.Sample_Nber)
    ud.TimeMeasure.MeanRR = [];
    ud.TimeMeasure.STDRR = [];
    ud.TimeMeasure.MeanHR = [];
    ud.TimeMeasure.STDHR = [];
    ud.TimeMeasure.RMSSD = [];
    ud.TimeMeasure.MeanSCL = [];
    ud.TimeMeasure.N_SCR = [];

else
    
    %m = length(ud.tIBI_final);
    %     tIBI = 1000*(ud.tR(2:m)-ud.tR(1:m-1));
    
    for i=n_sample
        %%%%%%%%%%%%%%%%%%%%%%%% ECG values   %%%%%%%%%%%%%%%%%%%%%%%% 
        %         rg = find(ud.tR>=ud.Samplet1(i) & ud.tR<=ud.Samplet2(i));
        %         rg = rg(find(rg<=length(tIBI)));
        rg = find(ud.tIBI_final>=ud.Samplet1(i) & ud.tIBI_final<=ud.Samplet2(i));
        tIBI_final = ud.tIBI_final(rg);
        tIBI_finalshift = ud.tIBI_finalshift(rg);
        IBI_final = ud.IBI_final(rg);
        
        %         % interpolating 
        %         ud.tRi = (t_final(1):1/ud.Fs_interp:t_final(m2))';
        %         tIBI2 = interp1(t_final(1:m-1), IBI_final,ud.tRi,'spline');
        %         
        %         rg = find(ud.tRi>t1 & ud.tRi<t2);
        %         % Detrending
        %         [P, S ] = polyfit(ud.tRi(rg), tIBI2(rg),Norder);
        %         tIBI_detrend = tIBI2(rg) - polyval(P,ud.tRi(rg));
        
        if ~isempty(rg) 
            ud.SampleAnalyzedSec(i) = max(tIBI_finalshift)-min(tIBI_finalshift);
            nl = length(tIBI_final);
            Dt = ud.Samplet2(i) - ud.Samplet1(i); 
            rg1 = find(ud.tR > ud.Samplet1(i) & ud.tR < tIBI_final(1));
            rg2 = find(ud.tR < ud.Samplet2(i) & ud.tR > tIBI_final(nl)   );
            DtA = ud.SampleAnalyzedSec(i);
            if isempty(rg1)
                DtA = DtA + tIBI_final(1) - ud.Samplet1(i);
            end
            if isempty(rg2)
                DtA = DtA + ud.Samplet2(i) - tIBI_final(nl);
            end
            ud.SampleAnalyzedPerc(i) = 100*DtA/Dt;
            set(h.SampleAnalyzedSec,'string',sprintf('%0.1f',ud.SampleAnalyzedSec(i)));
            set(h.SampleAnalyzedPerc,'string',sprintf('%0.1f',ud.SampleAnalyzedPerc(i)));
        else
            ud.SampleAnalyzedSec(i) = 0; 
            ud.SampleAnalyzedPerc(i) = NaN;
            set(h.SampleAnalyzedSec,'string',sprintf('%0.1f',ud.SampleAnalyzedSec(i)));
            set(h.SampleAnalyzedPerc,'string','NA');
        end
        
        %set(
        m2 = length(IBI_final);
        ud.TimeMeasure.MeanRR(i) = mean(IBI_final);
        
        ud.TimeMeasure.MeanRR(i) = mean(IBI_final);
        ud.TimeMeasure.STDRR(i) = std(IBI_final); % should be detrended??
        if isempty(IBI_final)
            ud.TimeMeasure.MeanHR(i) = NaN;  
            ud.TimeMeasure.STDHR(i) = NaN;  % should be detrended??
            ud.TimeMeasure.RMSSD(i) = NaN; % should be detrended??
        else
            ud.TimeMeasure.MeanHR(i) = mean(60*1000./IBI_final);
            ud.TimeMeasure.STDHR(i) = std(60*1000./IBI_final);  % should be detrended??
            ud.TimeMeasure.RMSSD(i) = sqrt(mean((IBI_final(2:m2)-IBI_final(1:m2-1)).^2));
        end
        %%%%%%%%%%%%%%%%%%%%%%%% SCL values   %%%%%%%%%%%%%%%%%%%%%%%% 
        if ~isempty(ud.SCLsig)
            rg = find(ud.tSCLsig>=ud.Samplet1(i) & ud.tSCLsig<=ud.Samplet2(i));
            %---------------- Didier 4.0 1/28/2010 ----------------
            rg = rg(1) - 1 + find((ud.SCLsig(rg) ~= 50) & (ud.SCLsig(rg) ~= 0) ); % exclude NaN SCL values which were set to 50;
            %check that the amount of data is at least more than 80% of the sample time length
            % before computing SCL TimeMeasure
            if ~isempty(rg) && length(rg)>= 0.8*(ud.Samplet2(i) - ud.Samplet1(i))*ud.Fs_interp
           %if ~isempty(rg) 
                rg1 = rg(1);
                rg2 = rg(length(rg));
           %---------------- Didier 4.0 -------------------------
            
                % mean SCL
                ud.TimeMeasure.MeanSCL(i) = mean(ud.SCLsig(rg));
                % number of EDR
                ud.TimeMeasure.N_SCR(i) = length(find(ud.SCLsig_nSCR>=rg1 & ud.SCLsig_nSCR<=rg2 ));
                
                [uN_SCR, SCLsig_nSCR] = Compute_SCR(ud.tSCLsig(rg),ud.SCLsig(rg));

            else
                ud.TimeMeasure.MeanSCL(i) = NaN;
                ud.TimeMeasure.N_SCR(i) = NaN;
            end
        else
            ud.TimeMeasure.MeanSCL(i) = NaN;
            ud.TimeMeasure.N_SCR(i) = NaN;
        end
    end
end %end for ud.Sample_Nber = [];
set(h.figure1,'userdata',ud);

if ~EXPORTDATA
    DispTimeMeasure
end



 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %%%%%%%%%%                DisplayTimeMeasure Function             %%%%%%%%%%
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function DispTimeMeasure                    
h = guidata(gcf);

%Update_TimeMeasure

ha1 = h.axes1;
ud1 = get(ha1,'userdata');
ud = get(h.figure1,'userdata');

%n = round(str2double(get(h.Sample_Nber,'String')));
n = ud.Sample_Nber;

if ~isnan(n) & ~isempty(n)
    if ~isnan(ud.TimeMeasure.MeanRR(n)) 
        text_disp = sprintf('%.0f\n%.1f\n%.2f\n%.2f\n%.2f',...
            ud.TimeMeasure.MeanRR(n),ud.TimeMeasure.STDRR(n),ud.TimeMeasure.MeanHR(n),ud.TimeMeasure.STDHR(n),ud.TimeMeasure.RMSSD(n));
    else
        text_disp = sprintf('%s\n%s\n%s\n%s\n%s','NA','NA','NA','NA','NA');
    end
    set(h.TimeMeasure_text,'string',text_disp);
    
    if  ~isempty(ud.SCLsig) & ~isnan(ud.TimeMeasure.MeanSCL(n))
        set(h.SCLMeasure_text,'string',sprintf('%0.2f \n %d',ud.TimeMeasure.MeanSCL(n),ud.TimeMeasure.N_SCR(n)))
    elseif isempty(ud.SCLsig)
        set(h.SCLMeasure_text,'string',[])
    else ~isnan(ud.TimeMeasure.MeanSCL)
        set(h.SCLMeasure_text,'string',sprintf('NA \n NA'))
    end
else
    set(h.SCLMeasure_text,'string',[]);
    set(h.TimeMeasure_text,'string',[])
end
if get(h.SignalEditing,'value') == 1
    set(h.SampleAnalyzedSec,'string','');
    set(h.SampleAnalyzedPerc,'string','');
    set(h.SampleAnalyzedHRVSec,'string','');
end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%       UPdate FreqMeasure     %%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function Update_FreqMeasure(n_sample,EXPORTDATA)

h = guidata(gcf);
ud = get(h.figure1,'userdata');



if nargin <2
    EXPORTDATA = 0;
end
if nargin == 0 
    n_sample = ud.Sample_Nber; 
end

if ~isempty(ud.Sample_Nber);
    Update_HRV(n_sample, EXPORTDATA)
end
ud = get(h.figure1,'userdata');

if ~isempty(ud.Sample_Nber) & ~isnan(ud.Sample_Nber) 
    
    fprintf('Update FreqMeasure\n')
    ha1 = h.axes1;
    ud1 = get(ha1,'userdata');
    COR = 1; % COR = 1 to adjust power estimate bias due discrete values (at extremities)
    
    
    if (get(h.IBI_togglebutton,'Value') == 1 | EXPORTDATA)
        if min(~isnan(ud.IBI_FFT(:,n_sample)))
            
            %Calculate VLF values
            [ud.FreqMeasure.VLFpwr(n_sample), ud.FreqMeasure.VLFmax(n_sample), ud.FreqMeasure.f_VLFmax(n_sample)] = ...
                HRV_measures(ud.IBI_Fp,1000^2*ud.IBI_FFT,n_sample,ud.VLFmin,ud.VLFmax,COR); %in ms^2
            
            %Calculate LF values
            [ud.FreqMeasure.LFpwr(n_sample), ud.FreqMeasure.LFmax(n_sample), ud.FreqMeasure.f_LFmax(n_sample)] = ...
                HRV_measures(ud.IBI_Fp,1000^2*ud.IBI_FFT,n_sample,ud.LFmin,ud.LFmax,COR);
            
            %Calculate HF values
            [ud.FreqMeasure.HFpwr(n_sample), ud.FreqMeasure.HFmax(n_sample), ud.FreqMeasure.f_HFmax(n_sample)] = ...
                HRV_measures(ud.IBI_Fp,1000^2*ud.IBI_FFT,n_sample,ud.HFmin,ud.HFmax,COR);
        else
            ud.FreqMeasure.VLFpwr(n_sample) = NaN;
            ud.FreqMeasure.VLFmax(n_sample) = NaN;
            ud.FreqMeasure.f_VLFmax(n_sample) = NaN;
            ud.FreqMeasure.LFpwr(n_sample) = NaN;
            ud.FreqMeasure.LFmax(n_sample) = NaN;
            ud.FreqMeasure.f_LFmax(n_sample) = NaN;
            ud.FreqMeasure.HFpwr(n_sample) = NaN;
            ud.FreqMeasure.HFmax(n_sample) = NaN;
            ud.FreqMeasure.f_HFmax(n_sample) = NaN;
        end
    end
    
    
    
    %Display Frequency Measure
    
    
    if (get(h.EDR_togglebutton(1),'Value') == 1 || EXPORTDATA)
        
        if  ~isempty(ud.EDRsig)  && min(~isnan(ud.EDR_FFT(:,n_sample)))
            %calculate how much is in LF
            [ud.FreqMeasure.EDRLFpwr(n_sample)] = ...
                HRV_measures(ud.EDR_Fp,ud.EDR_FFT,n_sample,ud.RESPfilter_freq(1),ud.LFmax,COR);
            %calculate how much is in HF
            [ud.FreqMeasure.EDRHFpwr(n_sample)] = ...
                HRV_measures(ud.EDR_Fp,ud.EDR_FFT,n_sample,ud.HFmin,ud.RESPfilter_freq(2),COR);
            %find mean, median, std, f_max, maximum value
 
            [EDRpwr, ud.FreqMeasure.EDRmax(n_sample), ud.FreqMeasure.f_EDRmax(n_sample),...
                    ud.FreqMeasure.f_EDRmean(n_sample), ud.FreqMeasure.f_EDRmedian(n_sample), ud.FreqMeasure.f_EDRstd(n_sample)] = ...
                HRV_measures(ud.EDR_Fp,ud.EDR_FFT,n_sample,ud.RESPfilter_freq(1),ud.RESPfilter_freq(2),COR);


        else
            ud.FreqMeasure.EDRpwr(n_sample) = NaN;
            ud.FreqMeasure.EDRmax(n_sample) = NaN;
            ud.FreqMeasure.f_EDRmean(n_sample) = NaN;
            ud.FreqMeasure.f_EDRmedian(n_sample) = NaN;
            ud.FreqMeasure.f_EDRstd(n_sample) = NaN;
            ud.FreqMeasure.f_EDRmax(n_sample) = NaN;
            
        end
    end
    
    if (get(h.RESP_togglebutton,'Value') == 1 | EXPORTDATA)
        if ~isempty(ud.RESPsig)    & min(~isnan(ud.RESP_FFT(:,n_sample)))
            
            %calculate how much is in LF
            [ud.FreqMeasure.RESPLFpwr(n_sample), RESPmax, f_RESPmax] = ...
                HRV_measures(ud.RESP_Fp,ud.RESP_FFT,n_sample,ud.RESPfilter_freq(1),ud.LFmax,COR);
            
            %calculate how much is in HF
            [ud.FreqMeasure.RESPHFpwr(n_sample), RESPmax, f_RESPmax] = ...
                HRV_measures(ud.RESP_Fp,ud.RESP_FFT,n_sample,ud.HFmin,ud.RESPfilter_freq(2),COR);
            
            %find mean, median, std, f_max, maximum value
           [RESPpwr, ud.FreqMeasure.RESPmax(n_sample), ud.FreqMeasure.f_RESPmax(n_sample),...
                    ud.FreqMeasure.f_RESPmean(n_sample), ud.FreqMeasure.f_RESPmedian(n_sample), ud.FreqMeasure.f_RESPstd(n_sample)] = ...
                HRV_measures(ud.RESP_Fp,ud.RESP_FFT,n_sample,ud.RESPfilter_freq(1),ud.RESPfilter_freq(2),COR);
        else
            ud.FreqMeasure.RESPLFpwr(n_sample) = NaN;
            ud.FreqMeasure.RESPHFpwr(n_sample) = NaN;
            ud.FreqMeasure.RESPmax(n_sample) = NaN;
            ud.FreqMeasure.f_RESPmean(n_sample) = NaN;
            ud.FreqMeasure.f_RESPmedian(n_sample) = NaN;
            ud.FreqMeasure.f_RESPstd(n_sample) = NaN;
           ud.FreqMeasure.f_RESPmax(n_sample) = NaN;
        end  
    end
    
else
    %ud.TimeMeasure.text = 'No Sample';
    %IBI
    ud.FreqMeasure.VLFpwr = [];
    ud.FreqMeasure.VLFmax = [];
    ud.FreqMeasure.f_VLFmax = [];
    ud.FreqMeasure.LFpwr = [];
    ud.FreqMeasure.LFmax = [];
    ud.FreqMeasure.f_LFmax = [];
    ud.FreqMeasure.HFpwr = [];
    ud.FreqMeasure.HFmax = [];
    ud.FreqMeasure.f_HFmax = [];
    
    %EDR
    ud.FreqMeasure.EDRLFpwr = [];
    ud.FreqMeasure.EDRHFpwr = [];
    ud.FreqMeasure.EDRmax = [];
    ud.FreqMeasure.f_EDRmax = [];
    ud.FreqMeasure.f_EDRmedian = [];
    ud.FreqMeasure.f_EDRmean = [];
    ud.FreqMeasure.f_EDRstd = [];

    %RESP
    ud.FreqMeasure.RESPLFpwr = [];
    ud.FreqMeasure.RESPHFpwr = [];
    ud.FreqMeasure.RESPmax = [];
    ud.FreqMeasure.f_RESPmax = [];
    ud.FreqMeasure.f_RESPmedian = [];
    ud.FreqMeasure.f_RESPmean = [];
    ud.FreqMeasure.f_RESPstd = [];
    
end



set(h.figure1,'userdata',ud);

if ~EXPORTDATA
    DispFreqMeasure   
end




                    
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %%%%%%%%%%                DisplayFreqMeasure Function             %%%%%%%%%%
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function DispFreqMeasure                    
h = guidata(gcf);
ha1 = h.axes1;
ud1 = get(ha1,'userdata');
ud = get(h.figure1,'userdata');

%n_SampDisp = round(str2double(get(h.Sample_Nber,'String')));
n_SampDisp = ud.Sample_Nber;

%if get(h.IBI_togglebutton,'Value') == 1 
%Update FreqMeasure first
%Update_FreqMeasure

if ~isnan(n_SampDisp) & ~isempty(n_SampDisp) & get(h.IBI_togglebutton,'Value') == 1 %& ud.SampleAnalyzedHRVSec(n_SampDisp) > 0
    VLFpwr = ud.FreqMeasure.VLFpwr(n_SampDisp);
    LFpwr = ud.FreqMeasure.LFpwr(n_SampDisp);
    HFpwr = ud.FreqMeasure.HFpwr(n_SampDisp);
    f_VLFmax = ud.FreqMeasure.f_VLFmax(n_SampDisp);
    f_LFmax = ud.FreqMeasure.f_LFmax(n_SampDisp);
    f_HFmax = ud.FreqMeasure.f_HFmax(n_SampDisp);
    
    totalpwr = VLFpwr + LFpwr + HFpwr;
    VLFpwr_perc = 100*VLFpwr./totalpwr;
    LFpwr_perc = 100*LFpwr./totalpwr;
    HFpwr_perc = 100*HFpwr./totalpwr;
    LFoverHF = LFpwr./HFpwr;
    LFpwr_nu = 100*LFpwr./(LFpwr + HFpwr);
    HFpwr_nu = 100*HFpwr./(LFpwr + HFpwr);
    
    text_f = sprintf('%.3f\n%.3f\n%.3f',f_VLFmax,f_LFmax,f_HFmax);
    text_pwr = sprintf('%.2f\n%.2f\n%.2f\n%.2f',VLFpwr,LFpwr,HFpwr,totalpwr);
    text_pwr_perc = sprintf('%.1f\n%.1f\n%.1f\n%.1f\n%.1f',VLFpwr_perc,LFpwr_perc,HFpwr_perc,100,LFoverHF);
    text_pwr_nu = sprintf('\n%.1f\n%.1f\n\n%.1f',LFpwr_nu,HFpwr_nu,LFoverHF);
    
    set(h.HRVMeasurePeak_text,'string',text_f);
    set(h.HRVMeasurePwr_ms_text,'string',text_pwr);
    set(h.HRVMeasurePwr_perc_text,'string',text_pwr_perc);
    set(h.HRVMeasurePwr_nu_text,'string',text_pwr_nu);
    
else
    set(h.HRVMeasurePeak_text,'string',[]);
    set(h.HRVMeasurePwr_ms_text,'string',[]);
    set(h.HRVMeasurePwr_perc_text,'string',[]);
    set(h.HRVMeasurePwr_nu_text,'string',[]);
end
%end


if ~isnan(n_SampDisp) & ~isempty(n_SampDisp) & ~isempty(ud.EDRsig) & get(h.EDR_togglebutton(1),'Value') == 1
    f_EDRmax = ud.FreqMeasure.f_EDRmax(n_SampDisp);
    EDRperc = 100*ud.FreqMeasure.EDRHFpwr(n_SampDisp)/(ud.FreqMeasure.EDRLFpwr(n_SampDisp) + ud.FreqMeasure.EDRHFpwr(n_SampDisp));
    f_EDRmedian = ud.FreqMeasure.f_EDRmedian(n_SampDisp);
    f_EDRstd = ud.FreqMeasure.f_EDRstd(n_SampDisp);
else
    f_EDRmax = [];
    EDRperc = [];
    f_EDRmedian = [];
    f_EDRstd = [];
end


if ~isnan(n_SampDisp) & ~isempty(n_SampDisp) & ~isempty(ud.RESPsig) & get(h.RESP_togglebutton,'Value') == 1 
    f_RESPmax = ud.FreqMeasure.f_RESPmax(n_SampDisp);
    RESPperc = 100*ud.FreqMeasure.RESPHFpwr(n_SampDisp)/(ud.FreqMeasure.RESPLFpwr(n_SampDisp) + ud.FreqMeasure.RESPHFpwr(n_SampDisp));
    f_RESPmedian = ud.FreqMeasure.f_RESPmedian(n_SampDisp);
    f_RESPstd = ud.FreqMeasure.f_RESPstd(n_SampDisp);

else
    f_RESPmax = [];
    RESPperc = [];
    f_RESPmedian = [];
    f_RESPstd = [];

end
if isempty(ud.EDRsig) & isempty(ud.RESPsig)
    st_disp = '';
    st_top = 'RESP/EDR';
elseif isempty(ud.EDRsig)
    st_disp = sprintf('%.3fHz\n%.3fHz\n%.3fHz\n%.1f%%',f_RESPmax, f_RESPmedian, f_RESPstd, RESPperc);
    st_top = 'RESP';
elseif isempty(ud.RESPsig)
    st_disp = sprintf('%.3fHz\n%.3fHz\n%.3fHz\n%.1f%%',f_EDRmax, f_EDRmedian, f_EDRstd, EDRperc);
    st_top = 'EDR';
else
    st_disp = sprintf('%.3fHz/%.3fHz\n%.3fHz/%.3fHz\n%.3fHz/%.3fHz\n%.1f%%/%.1f%%',f_RESPmax, f_EDRmax, f_RESPmedian, f_EDRmedian, f_RESPstd, f_EDRstd, RESPperc, EDRperc);
    st_top = 'RESP/EDR';
end
%     fprintf('%.3f/0.3f\n\n%.3f',f_RESPmax,f_EDRmax)
set(h.RespirationMeasure_text,'string',st_disp);
set(h.RESPEDR_text,'string',st_top);


%ud
%ud = get(h.figure1,'userdata')

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%                                                            %%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%                   Export functions                            %%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%                                                            %%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%           Update             %%%%%%%%%%%%%%%
%%%%%%%%%%%%%%   TimeMeasureExportString    %%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function Update_TimeMeasureExportString(n_sample)
fprintf('Update ExportString\n')

h = guidata(gcf);
ha1 = h.axes1;
ud1 = get(ha1,'userdata');
ud = get(h.figure1,'userdata');
EXPORT = 1;

if nargin == 0 
    n_sample = ud.Sample_Nber;
end

if isempty(ud.Sample_Nber) | isnan(ud.Sample_Nber)
    ud.TimeMeasure.text = 'No Sample';
else
    Update_TimeMeasure(n_sample, EXPORT)
    ud = get(h.figure1,'userdata');
    ud.TimeMeasure.text = [];
    ud.TimeFields = 'MeanRR , STDRR , MeanHR , STDHR , RMSSD, MeanSCL, EDRs';
    
    for i = n_sample 
        
        ud.TimeMeasure.text{i} = sprintf('%.2f , %.3f , %.3f , %.4f , %.4f , %.2f, %d',...
            ud.TimeMeasure.MeanRR(i),ud.TimeMeasure.STDRR(i),ud.TimeMeasure.MeanHR(i),...
            ud.TimeMeasure.STDHR(i),ud.TimeMeasure.RMSSD(i),ud.TimeMeasure.MeanSCL(i),ud.TimeMeasure.N_SCR(i));
        
    end
end
set(h.figure1,'userdata',ud);





%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%           Update             %%%%%%%%%%%%%%%
%%%%%%%%%%%%%%   FreqMeasureExportString    %%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function Update_FreqMeasureExportString(n_sample)
fprintf('Update ExportString\n')

h = guidata(gcf);
ha1 = h.axes1;
ud1 = get(ha1,'userdata');
ud = get(h.figure1,'userdata');
EXPORT = 1;

% if ~iscellstr(ud.FreqMeasure.text)  % == 'No Sample'
%     ud.FreqMeasure.text = [];
% end
set(h.figure1,'userdata',ud);

if  ~isempty(ud.Sample_Nber) & ~isnan(ud.Sample_Nber)
    ud.FreqMeasure.text = [];
    if nargin == 0 
        n_sample = ud.Sample_Nber;    
    end
    
    for i = n_sample
        Update_FreqMeasure(i, EXPORT)
    end
    
    ud1 = get(ha1,'userdata');
    ud = get(h.figure1,'userdata');
 
    text_IBIf = 'f_VLFmax , f_LFmax , f_HFmax';
    text_RESPf = ' f_RESPmean , f_RESPmedian , f_RESPstd ,  f_RESPmax';
    text_EDRf = 'f_EDRmean , f_EDRmedian , f_EDRstd ,  f_EDRmax';
    text_IBIpwr = 'VLFpwr , LFpwr , HFpwr';
    text_RESPEDRpwr = 'RESPLFpwr , RESPHFpwr , EDRLFpwr , EDRHFpwr';
    text_pwr_perc = 'VLFpwr_perc , LFpwr_perc , HFpwr_perc , LFoverHF';
    text_pwr_nu = 'LFpwr_nu , HFpwr_nu';

   ud.FreqFields = [text_IBIf ' , ' text_RESPf ' , ' text_EDRf ' , '  text_IBIpwr ' , ' text_RESPEDRpwr ' , ' text_pwr_perc ' , ' text_pwr_nu];
    
   
   %'f_VLFmax  ,  f_LFmax  ,  f_HFmax , f_EDRmax, f _RESPmax , VLFpwr ,  LFpwr  ,  HFpwr , EDRpwr, RESPpwr ,  VLFpwr_perc  ,  LFpwr_perc  ,  HFpwr_perc  ,  LFoverHF   ,  LFpwr_nu   ,   HFpwr_nu';
   
   for i = n_sample
       VLFpwr = ud.FreqMeasure.VLFpwr(i);
       LFpwr = ud.FreqMeasure.LFpwr(i);
       HFpwr = ud.FreqMeasure.HFpwr(i);
       f_VLFmax = ud.FreqMeasure.f_VLFmax(i);
       f_LFmax = ud.FreqMeasure.f_LFmax(i);
       f_HFmax = ud.FreqMeasure.f_HFmax(i);
       
       totalpwr = VLFpwr + LFpwr + HFpwr;
       VLFpwr_perc = 100*VLFpwr./totalpwr;
       LFpwr_perc = 100*LFpwr./totalpwr;
       HFpwr_perc = 100*HFpwr./totalpwr;
       LFoverHF = LFpwr./HFpwr;
       LFpwr_nu = 100*LFpwr./(LFpwr + HFpwr);
       HFpwr_nu = 100*HFpwr./(LFpwr + HFpwr);
       
       
       if ~isnan(i) & ~isempty(i) & ~isempty(ud.RESPsig) %& get(h.RESP_togglebutton,'Value') == 1
           f_RESPmax = ud.FreqMeasure.f_RESPmax(i);
           RESPLFpwr = ud.FreqMeasure.RESPLFpwr(i);
           RESPHFpwr = ud.FreqMeasure.RESPHFpwr(i); 
           f_RESPmedian = ud.FreqMeasure.f_RESPmedian(i);
           f_RESPmean = ud.FreqMeasure.f_RESPmean(i);
           f_RESPstd = ud.FreqMeasure.f_RESPstd(i);
           
       else
           f_RESPmax = NaN;
           RESPLFpwr = NaN;
           RESPHFpwr = NaN;
           f_RESPmedian = NaN;
           f_RESPmean = NaN;
           f_RESPstd = NaN;
       end
       if ~isnan(i) & ~isempty(i) & ~isempty(ud.EDRsig) %& get(h.EDR_togglebutton,'Value') == 1
           f_EDRmax = ud.FreqMeasure.f_EDRmax(i);
           EDRLFpwr = ud.FreqMeasure.EDRLFpwr(i);
           EDRHFpwr = ud.FreqMeasure.EDRHFpwr(i); 
           f_EDRmedian = ud.FreqMeasure.f_EDRmedian(i);
           f_EDRmean = ud.FreqMeasure.f_EDRmean(i);
           f_EDRstd = ud.FreqMeasure.f_EDRstd(i);
       else
           f_EDRmax = NaN;
           EDRLFpwr = NaN;
           EDRHFpwr = NaN;
           f_EDRmedian = NaN;
           f_EDRmean = NaN;
           f_EDRstd = NaN;
       end
       text_IBIf = sprintf('%.5f , %.5f , %.5f ',f_VLFmax,f_LFmax,f_HFmax);
       text_RESPf = sprintf('%.5f , %.5f , %.5f , %.5f', f_RESPmean,f_RESPmedian,f_RESPstd, f_RESPmax);
       text_EDRf = sprintf('%.5f , %.5f , %.5f , %.5f', f_EDRmean,f_EDRmedian,f_EDRstd, f_EDRmax);
       text_IBIpwr = sprintf('%.4f , %.4f , %.4f' ,VLFpwr,LFpwr,HFpwr);
       text_RESPEDRpwr = sprintf('%.4f, %.4f, %.4f , %.4f',RESPLFpwr,RESPHFpwr,EDRLFpwr,EDRHFpwr);
       text_pwr_perc = sprintf('%.2f , %.2f , %.2f , %.2f ',VLFpwr_perc,LFpwr_perc,HFpwr_perc,LFoverHF);
       text_pwr_nu = sprintf('%.2f , %.2f ',LFpwr_nu,HFpwr_nu);
       
       
       ud.FreqMeasure.text{i} = sprintf('%s , %s , %s , %s , %s , %s , %s', text_IBIf, text_RESPf, text_EDRf,...
           text_IBIpwr, text_RESPEDRpwr, text_pwr_perc, text_pwr_nu);
   end
else
    ud.FreqMeasure.text = 'No Sample';
end
set(h.figure1,'userdata',ud);

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %%%%%%%%%%                Export to File Function                   %%%%%%%%%%
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    
  function ExportMeasures
    % Callback code for pushbutton with Tag "export"
    %hObject
    h = guidata(gcf);
    set(h.figure1,'pointer','watch')

    fprintf('Exporting Results \n')
    
    h = guidata(gcf);
    ha1 = h.axes1;
    matlab_wd = pwd;
    ud = get(h.figure1,'userdata');
    ud1 = get(ha1,'userdata');

    % Update Final Signal
    UpdateFinalSignal
    
    % Update Freq Measure ExportString
    Update_FreqMeasureExportString(1:ud.Nber_of_Samples)
    % Update Time Measure ExportString
    Update_TimeMeasureExportString(1:ud.Nber_of_Samples)
    
    Update_IBIplot
    Update_PatchSignal
    
    ud = get(h.figure1,'userdata');
    mf = length(ud.fileNameString);
    ECGsig_filename = ud.fullFileName;
    FileNameExport = 0;
    %%%%%%% Didier 3.1 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %mf1 = max(find(ud.fileNameString == '.'));
    mf1 = max(find(ud.fileNameString == '.'))-1;
    if isempty(mf1)
        mf1 = length(ud.fileNameString);
    end
        %%%%%%%%%%% Didier  v3.2  %%%%%%%%%%%%%%%%%%%%%%
        % resolve issue with file having no ECG
        ni = max(findstr(ud.fileNameString, '_ECG'));
        if isempty(ni)
            DefaultName = sprintf('%s_HRV.txt',ud.fileNameString(1:mf1));
        else
            DefaultName = sprintf('%s_HRV.txt',ud.fileNameString([1:ni-1 ni+4:mf1]) );
        end
        %DefaultName = sprintf('%s_HRV.txt',ud.fileNameString([1:ni-1 ni+4:mf1]) )
        %%%%%%%%%%% Didier  %%%%%%%%%%%%%%%%%%%%%%
    %Replace spaces by '_'
    nh = find(DefaultName==' ');
    DefaultName(nh)='_';

%     if strcmp(ud.fileNameString(mf1-3:mf1-1), 'ECG') == 1
%         mf1 = mf1 - 4;
%     end
    %DefaultName = sprintf('%s_HRV.txt',ud.fileNameString(1:mf1-1));
    
    %%%%%%%%%%%%% Didier %%%%%%%%%%%%%%%%%%%%%%%%%%%
    
%     if isempty(ud.FileNameExportHRV)
%         %DefaultName = sprintf('%s_RR.txt',ud.fileNameString(1:mf-4));
%         DefaultName = sprintf('%s_HRV.txt',ud.fileNameString(1:mf1-1));
%     else
%         DefaultName = ud.FileNameExportHRV;
%     end
    if isempty(ud.PathNameExportHRV)
        DefaultPathName = ud.PathNameLoad;
    else
        DefaultPathName = ud.PathNameExportHRV;
    end
    cd(DefaultPathName)
    
    %%%%%%%%%%%%% Didier v3.3 %%%%%%%%%%%%%%%%
    %   [FileNameExport,PathNameExport] = uiputfile({'*.txt;*.dat','Text or Data File (*.txt,*.dat)'},'Export File Name', DefaultName)
    if ud.automatic ~= 1 & (~exist([ud.PathNameExport ud.FileNameExport]) ||  isempty(ud.FileNameExport))
        [FileNameExport,PathNameExport] = uiputfile({'*.txt;*.dat','Text or Data File (*.txt,*.dat)'},'Export File Name', DefaultName);
    else
        FileNameExport = ud.FileNameExportHRV;
        PathNameExport = ud.PathNameExportHRV;
    end
    %%%%%%%%%%%%% Didier v3.3 %%%%%%%%%%%%%%%%

    
     
    if FileNameExport ~= 0 & ~isempty(FileNameExport) 
        whosString = ['w=whos(''-file'',''' [PathNameExport FileNameExport] ''');'];
        
        cd(ud.wd)
        err=0;
        ud.FileNameExportHRV = FileNameExport;
        ud.PathNameExportHRV = PathNameExport;
        %text_FieldHeader = sprintf('PathName , FileNameExport, FileName , PatientID, SampleNber , SampleLabel , Duration , DurationEdited , EditedPerc , t1 , t2 , %s , %s', ud.TimeFields, ud.FreqFields);
        text_FieldHeader = sprintf('PathName , FileNameExport, FileName , PatientID, SampleNber , SampleLabel , Duration , DurationEdited , EditedPerc, DurationHRV , t1 , t2 , %s , %s', ud.TimeFields, ud.FreqFields);
        
        %PatientID = FileNameExport(1:findstr(FileNameExport,'_')-1);
        PatientID = ud.fileNameString(1:findstr(ud.fileNameString,'_')-1);
        %nch = findstr('CH',ud.fileNameString);
        %[PatientID , remain] = strtok(ud.fileNameString(nch:nch+6), '_');        

        
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%  BEDREST-START  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% %%%%%%%%%%%%%%%%%%Edited on 6/14/07 by Carl Brown 11/12/08 Dr. Allexandre %%%%%%%%%%%%%%%%%%%%%%%%%%
% %%%%%%%%%%Use for week, base, and final readings.
%         %PatientID = FileNameExport(1:findstr(FileNameExport,'_')-1);
%         nch = findstr('ID',ud.fileNameString);
%         [PatientID , remain] = strtok(ud.fileNameString(nch:nch+4), '-');        
        
% %%%%%%%%%%%%This is used for all week readings, commented for base and final readings.
%         text_FieldHeader = sprintf('PathName , FileNameExport , PatientID, Week, Time, SampleNber , SampleLabel , Duration , DurationEdited , EditedPerc , t1 , t2 , %s , %s', ud.TimeFields, ud.FreqFields);       
% 
%         mch = findstr('W',ud.fileNameString);
%         [Week , remain] = strtok(ud.fileNameString(mch:mch+3), '-');
% 
%         och = findstr('T',ud.fileNameString);
%         [Time , remain] = strtok(ud.fileNameString(och:och+1), '-'); 

% %%%%%%%%%%%%This is used for all base and final readings, commented for week.
%         text_FieldHeader = sprintf('PathName , FileNameExport , PatientID, Reading, SampleNber , SampleLabel , Duration , DurationEdited , EditedPerc , t1 , t2 , %s , %s', ud.TimeFields, ud.FreqFields);              
% 
% if ~isempty(findstr('base',ud.fileNameString))
%     Reading = 'base';
% elseif ~isempty(findstr('final',ud.fileNameString))
%     Reading = 'final';
% else
%     Reading = 'Error';
% end

% %%%% OLD VERSION %%%% Do not use
% %%%%%%%%%%%%This is used for all base readings, commented for week and final readings.
% %         mch = findstr('b',ud.fileNameString);
% %         [Reading , remain] = strtok(ud.fileNameString(mch:mch+3), '-');  
% %         
% %%%%%%%%%%%%This is used for all final readings, commented for base and week readings.
% %         mch = findstr('f',ud.fileNameString);
% %         [Reading , remain] = strtok(ud.fileNameString(mch:mch+4), '-');       

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%  BEDREST-END %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

                
        %%%%%%%%%%%% Didier v3.3 %%%%%%%%%%%%%%%%
        % when automatic on, always append
        if ud.automatic == 1
            button = 'Append';
        else

            button = 'Overwrite';
            % eval(whosString,'err=1;')
            err = exist([PathNameExport FileNameExport]) == 0; % err = 1 if the file doesn't exist

            if ~err
                fprintf('<file already exists>\n');
                button = questdlg(sprintf('This file already exists! \n Would you like to append Data to the existing content or overwrite the file content!'),'Exporting Results','Append','Overwrite','Cancel','Overwrite')
            end

        end

        %%%%%%%%%%%% Didier 3.3  %%%%%%%%%%%%%%%%%%%%%
        
        
        switch button
            case {'Overwrite','Append'}
                switch button
                    case 'Overwrite'    
                        [fid errmsg] = fopen([PathNameExport FileNameExport],'wt');
                        fprintf(fid,'%s \n ', text_FieldHeader);
                        
                    case 'Append'
                        [fid errmsg] = fopen([PathNameExport FileNameExport],'at');
                end
                if fid ~= -1 % can open the file
                    %ud.Nsample = 1;
                    %text_export = [];
                    %text_export = text_FieldHeader;
                    m = length(PathNameExport);
                    NewPathNameExport = PathNameExport(4:m-1);
                    ns = findstr('\',NewPathNameExport); k = 0;
                    m = length(NewPathNameExport);
                    for i = ns
                        NewPathNameExport = [NewPathNameExport(1:i+k) NewPathNameExport(i+k:m+k)];
                        k = k+1;
                    end
                    
                    fprintf('Exported : SID=%d ; File=%s \n',PatientID,FileNameExport)

%%%%%%%%%%%%%%%%%%%%%%Use for Reiki Stress Study, Comment for Bed Rest.
                    for i = 1:ud.Nber_of_Samples
                        text_sample = sprintf(...
                        '%s , %s , %s, %s , %d , %s , %0.1f ,%0.1f ,%.1f ,%.1f , %.1f , %.1f , %s , %s',...
                        ud.PathNameExportHRV, ud.FileNameExportHRV, ud.fileNameString, PatientID, i, ud.SampleLabel{i}, ud.Samplet2(i)-ud.Samplet1(i), ud.SampleAnalyzedSec(i),ud.SampleAnalyzedPerc(i), ud.SampleAnalyzedHRVSec(i),  ud.Samplet1(i) , ud.Samplet2(i) , ud.TimeMeasure.text{i},ud.FreqMeasure.text{i});
                        %text_export = sprintf('%s \n %s ',text_export,text_sample);
                        %PathNameExport(3:m)
                        %fprintf(fid,sprintf('%s \n ', text_sample));
                        fprintf(fid,'%s \n', text_sample );
                    end
                else
                    errordlg(sprintf('%s \n Data not save.\n',errmsg))
                end
               
            otherwise
                errordlg(sprintf('Data not save. \n'))
        end
        switch button
            case {'Overwrite','Append'}
                fclose(fid);
                % Save all the Data
                set(h.figure1,'userdata',ud);
                
                %--------- Didier v3.3 ------------------
                mf1 = max(find(ud.fileNameString == '.'))-1;
                if isempty(mf1)
                    mf1 = length(ud.fileNameString);
                end
                % resolve issue with file name not having string ECG
                ni = max(findstr(ud.fileNameString, '_ECG'));
                if isempty(ni)
                    FileName = sprintf('%s_all.mat',ud.fileNameString(1:mf1));
                    FileName_Param = ud.fileNameString(1:mf1);
                else
                    FileName = sprintf('%s_all.mat',ud.fileNameString([1:ni-1 ni+4:mf1]) );
                    FileName_Param = ud.fileNameString([1:ni-1 ni+4:mf1]);
                end
                %FileName = sprintf('%s_all.mat',ud.fileNameString(1:mf1))
                 %-----------------------------------
               
                udsave = ud;
                udsave = rmfield(ud,{'tsig','ECGsig','ECGfil'});
                
                
                %%%%%%%%%%%%%%%% Didier v3.3 %%%%%%%%
                % prevent Matlab 7.0 from sving as compressed file
                % so that file can be read in Matlab 6.xx
                if str2num(version('-release'))>13
                    save([PathNameExport  FileName],'udsave','ud1','-v6');
                else
                    save([PathNameExport  FileName],'udsave','ud1');
                end
                %%%%%%%%%%%%%%%% Didier %%%%%%%%

                %               destination_file = 'Parameters.m'
 %               [success,message] = copyfile([ud.PathNameParam '\' ud.FileNameParam],[PathNameExport '\' destination_file]);
                destination_file = [FileName_Param '_' ud.FileNameParam ];
                
                [success,message] = copyfile([ud.PathNameParam '\' ud.FileNameParam],[PathNameExport '\' destination_file]);
                if success == 1
                    fprintf('Successfully copied %s \n   to file %s \n',[ud.PathNameParam ud.FileNameParam], [PathNameExport '\' destination_file]);
                else
                    fprintf('error: %s \n',message);
                end
        end
        

    end
    set(h.figure1,'pointer','arrow')

    cd(ud.wd)





% --- Executes on button press in SignalAnalyzed.
function SignalAnalyzed_Callback(hObject, eventdata, handles)
% hObject    handle to SignalAnalyzed (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of SignalAnalyzed



function SampleAnalyzedPerc_Callback(hObject, eventdata, handles)
% hObject    handle to SampleAnalyzedPerc (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of SampleAnalyzedPerc as text
%        str2double(get(hObject,'String')) returns contents of SampleAnalyzedPerc as a double



function SampleAnalyzedSec_Callback(hObject, eventdata, handles)
% hObject    handle to SampleAnalyzedSec (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of SampleAnalyzedSec as text
%        str2double(get(hObject,'String')) returns contents of SampleAnalyzedSec as a double



% --- Executes during object creation, after setting all properties.
function SampleAnalyzedHRVSec_CreateFcn(hObject, eventdata, handles)
% hObject    handle to SampleAnalyzedHRVSec (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc
    set(hObject,'BackgroundColor','white');
else
    set(hObject,'BackgroundColor',get(0,'defaultUicontrolBackgroundColor'));
end



function SampleAnalyzedHRVSec_Callback(hObject, eventdata, handles)
% hObject    handle to SampleAnalyzedHRVSec (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of SampleAnalyzedHRVSec as text
%        str2double(get(hObject,'String')) returns contents of SampleAnalyzedHRVSec as a double









%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%                                                            %%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%                   Clear plots/Initialize Parameters        %%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%                                                            %%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function Clear_Plots


h = guidata(gcf);
ha1 = h.axes1;
ud = get(h.figure1,'userdata');
ud1 = get(ha1,'userdata');
ud2 = get(h.axes2,'userdata');

%         ud1.xy1 = [];
%         ud1.xy3 = [];


axes_handle = [h.axes1 ; h.axes2; h.axes3; h.FFT_axes; h.EDRaxes3; h.SCLaxes3; h.EDR_FFTaxes; h.RESPaxes3; h.SampleEditaxes; h.SignalEditaxes;...
        h.Spectrogram_axes ; h.Spectrogram_axes_contour ; h.ANSTime_HFLF_axes; h.ANSTime_axes ];
try delete(ud.hlegend)
catch
end
clear_child(axes_handle)
ud1.hPatch = [];
ud1.hRsig = [];
ud1.hIBI = [];
ud1.hIBI2 = [];
ud1.hIBI2b = [];
ud1.hIBI3 = [];

ud2.hPatch2 = [];
ud1.hIBI3 = []; ud1.hPatch3 = [];
ud.hEDRsig = [];
ud.hSCLsig = [];
ud.hRESPsig = [];
ud.hSCLsig = [];
ud.hRESPsig = [];
ud.hlegend = [];

try
delete(ud.hPatchSample);
delete(ud1.hPatchSignal);
catch
end
ud.hPatchSample = [];
ud1.hPatchSignal = [];


set(h.figure1,'userdata',ud);
set(ha1,'userdata',ud1);
set(h.axes2,'userdata',ud2);


function clear_child(axes_handle)
%hall = cell2mat(allchild(axes_handle)); delete(hall) % doesn't work anymore
hall = allchild(axes_handle);
delete(cat(1,hall{:}));set(axes_handle,'XTick',[],'YTick',[],'XTickLabel',[], 'YTickLabel',[])  ;


function Initialize_all


h = guidata(gcf);
ha1 = h.axes1;
ud = get(h.figure1,'userdata');
ud1 = get(ha1,'userdata');
%hall = get(h.axes1);

set(h.IBI_togglebutton,'Value', 0);
set(h.EDR_togglebutton,'Value', 0);
set(h.RESP_togglebutton,'Value', 0);
set(h.SCL_togglebutton,'Value', 0);
set(h.NextFile,'enable','off','BackgroundColor',ud.blue_enable_back,'foregroundColor',ud.blue_enable_for,'Value',0)

%set(h.ALL_togglebutton,'Value', 0);

%hall = allchild(h.axes3); delete(hall);

ud.ECGfil = [];
ud.nRfil = [];
ud.tRfil = [];
ud.nR2 = [];
ud.tR2 = [];
ud.nR = [];
ud.tR = [];
ud.nR2offset = [];
ud.tR2offset = [];
ud.tmin = [];
ud.tmax = [];

%ud.hEDRsig = [];

ud.EDRsig = [];
ud.tEDRsig = [];
ud.EDRval = 0;
ud.RESPsig = [];
ud.tRESPsig = [];
%ud.hRESPsig = [];
ud.SCLsig = [];
ud.tSCLsig = [];
ud.SCLsig_nSCR = [];
%ud.hSCLsig = [];

ud.IBI_FFT =[];
ud.EDR_FFT =[];
ud.RESP_FFT =[];
ud.IBI_Fp = [];
ud.EDR_Fp = [];
ud.RESP_Fp = [];

ud.Spectrogram_RelAbs = 1; %relative
set(h.Spectrogram_RelAbs_menu,'Value', ud.Spectrogram_RelAbs)
ud.Compute_Spectrogram = 0;
ud.Compute_RespTimeResponse = 0;
ud.cursor = []; 
% 
% 
% % Samples informations
% ud.Samplet1 = [];
% ud.Samplet2 = [];
% ud.Nber_of_Samples = 0;
% ud.Sample_Nber = [];
% ud.SampleLabel = {};
% Signal informations
ud.Signalt1 = [];
ud.Signalt2 = [];
ud.Nber_of_Signals = 0;
ud.Signal_Nber = [];




set(ha1,'userdata',ud1);
set(h.figure1,'userdata',ud);

LoadParameters_Fcn(ud.FileNameParam, ud.PathNameParam); 

function LoadParameters_Fcn(filename,pathname)


h = guidata(gcf);
ud = get(h.figure1,'userdata');

    
%%%%%%% Didier 5.6 %%%%%%%%%%%
% modified LoadParameters function to ask to choose a file if none is
% specified; and accept "m" and "mat" files

if nargin == 0 %ask to choose a file
    if ~exist(ud.PathNameParam) 
        ud.PathNameParam = ud.wd;
    end
    cd(ud.PathNameParam);
    
    [filename,pathname]=uigetfile({'*Parameter*.m*','Parameters File (*.m,*.mat)';'*.*','*.*'},'Please Peak a Parameter File',ud.FileNameParam);
    cd(ud.wd)
    
elseif nargin < 2 
    
    pathname = ud.wd;

end
% if nargin < 2 ; pathname =ud.wd; end
[fPath, fName, fExt] = fileparts(filename);

if isempty(filename)
    fprintf('No Parameters file selected!!! \n');
elseif ~strcmp(lower(fExt),'.mat') && ~strcmp(lower(fExt),'.m')
    fprintf('Unrecognized Parameters file selected!!! \n');
else
    %%%%%%% Didier  %%%%%%%%%%%%%%%%%%%
    
    fprintf('Load Parameters: %s \n', filename);
    cd(pathname)
    
    switch lower(fExt)
        case '.m' %m file
            s = filename(1:length(filename)-2);
            eval([s ';']);
        case '.mat' % mat file
            % change only ud values given by the file
            Svar = load(filename,'ud'); udnew = Svar.ud;
            udname = fieldnames(udnew);
            n = length(udname);
            for i = 1:n
                % transfer anything from udsave to ud which is not handle
                if and(isempty(findstr(udname{i},'andle')),isempty(findstr(udname{i},'filemenu')))
                    %eval(['ud.' udname{i} '= udnew.' udname{i} ';']);
                    ud = setfield(ud, udname{i}, getfield(udnew,udname{i}));
                end
            end

    end
    ud.FileNameParam = filename;
    ud.PathNameParam = pathname;
    
    %%%%%%% Didier 3.1 %%%%%%%%%%%
    cd(ud.wd)
    %%%%%%%%%  Didier %%%%%%%%%%%%%
    
    % Cleaning samples making sure they are within ud.tmin and ud.tmax
    if ~isempty(ud.tmin)
        for i = 1:ud.Nber_of_Samples
            ud.Samplet1 = min(max(ud.Samplet1,ud.tmin),ud.tmax);
            ud.Samplet2 = min(max(ud.Samplet2,ud.tmin),ud.tmax);
        end
        nsamp = find(ud.Samplet1 ~= ud.Samplet2);
        ud.Samplet1 = ud.Samplet1(nsamp);
        ud.Samplet2 = ud.Samplet2(nsamp);
        ud.SampleLabel = ud.SampleLabel(nsamp);
        ud.Nber_of_Samples = length(ud.Samplet1);
    end
    set(h.figure1,'userdata',ud);
    %%%%%% Didier 3.1  %%%%%%
    
    
    %%%%%%%% Didier v3.2 %%%%%%%
    %% Setting Values
    set(h.VLFmin,'String',sprintf('%4.2f',ud.VLFmin));
    set(h.VLFmax,'String',sprintf('%4.2f',ud.VLFmax));
    set(h.LFmin,'String',sprintf('%4.2f',ud.LFmin));
    set(h.LFmax,'String',sprintf('%4.2f',ud.LFmax));
    set(h.HFmin,'String',sprintf('%4.2f',ud.HFmin));
    set(h.HFmax,'String',sprintf('%4.2f',ud.HFmax));
    
    %---------- Didier v4.4 -----------
    set(h.ARorder_edit,'String',sprintf('%d',ud.ARorder));
    %---------- v4.4 --------------
    set(h.interpol_edit,'String',sprintf('%d',ud.Fs_interp));
    set(h.detrend_menu,'Value',ud.detrend);
    set(h.smoothN_edit,'string',sprintf('%d',ud.smoothN));
    set(h.NFFT_edit,'String',sprintf('%d',ud.NFFT));
    set(h.WindowLength_edit,'String',sprintf('%d',ud.Nwindow));
    set(h.WindowOverlap_edit,'String',sprintf('%d',ud.Noverlap));
    set(h.FreqMethod_menu,'Value',ud.FreqMethod);
    set(h.WindowFilter_menu,'Value',ud.WindowFilter);
    set(h.SpectrogramMethod_menu,'Value',ud.SpectrogramMethod);
    
    
    
    % Update Sample Edit
    set(h.SampleLength_edit,'String',[]);
    set(h.SampleStart_edit,'String',[]);
    set(h.SampleEnd_edit,'String',[]);
    set(h.Sample_Nber,'String',[]);
    set(h.Nber_of_Samples,'String',[]);
    
    %set([ud.SamplePushbuttonHandle;ud.SampleEditHandle],'Enable','off');
    set(h.Nber_of_Samples,'Enable','on');
    
    set(h.HRVMeasurePeak_text,'string',[]);
    set(h.HRVMeasurePwr_ms_text,'string',[]);
    set(h.HRVMeasurePwr_perc_text,'string',[]);
    set(h.HRVMeasurePwr_nu_text,'string',[]);
    set(h.TimeMeasure_text,'string',[]);
    
    %Update Time and Freq Measures
    
    if ~isempty(ud.nR)
        QuitSignalEditing
        ud = get(h.figure1,'userdata');
        if ud.Nber_of_Samples ~= 0
            set([ud.SamplePushbuttonHandle;ud.SampleEditHandle],'Enable','on');
            Update_SamplePatchesMeasures 
            %Update_TimeFreqMeasure    
        end
    end
    %%%%%%%% Didier v3.2 %%%%%
    
end
%%%%%% Didier  %%%%%%


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%                                                            %%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%                        Spectrogram                        %%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%                                                            %%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%



% --- Executes on button press in RR_Editing_View.
function RR_Editing_View_Callback(hObject, eventdata, handles)
% hObject    handle to RR_Editing_View (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of RR_Editing_View

         

h = guidata(gcf);
ha1 = h.axes1;
ud = get(h.figure1,'userdata');
ud1 = get(ha1,'userdata');

val = get(h.All_Signals_View,'Value');
if val == 1
    RR_Editing_View_Fcn(val)    
else
    set(h.RR_Editing_View,'Value',1);
    set(h.All_Signals_View,'Value',0);
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function RR_Editing_View_Fcn(val)

h = guidata(gcf);
ha1 = h.axes1;
ud = get(h.figure1,'userdata');
ud1 = get(ha1,'userdata');

if val == 1 || val == 0
    set(ud.EditingViewHandle, 'visible','on');
    
%     set([ud.AllSignalViewHandle;  h.Spectrogram_axes ; allchild(h.Spectrogram_axes); ...
%             h.Spectrogram_axes_contour ; allchild(h.Spectrogram_axes_contour); ...
%             h.ANSTime_HFLF_axes; h.Spectrogram_axis; allchild(h.ANSTime_HFLF_axes); ...
%             [h.colorbar;allchild(h.colorbar)]; ud.hlegend; allchild(ud.hlegend); ...
%             h.ANSTime_axes ; allchild(h.ANSTime_axes);h.axes_SpectrumBackground1;h.axes_SpectrumBackground2],  'visible','off');
    set([ud.AllSignalViewHandle ; h.axes_SpectrumBackground1; h.axes_SpectrumBackground2;...
            h.Spectrogram_axes ;  allchild(h.Spectrogram_axes); ...
            h.Spectrogram_axes_contour ; allchild(h.Spectrogram_axes_contour);...
            h.ANSTime_axes ; allchild(h.ANSTime_axes);...
            h.colorbar;allchild(h.colorbar);... %ud.hlegend; ...%; allchild(ud.hlegend);...
            h.ANSTime_HFLF_axes; allchild(h.ANSTime_HFLF_axes);...
            h.Spectrogram_axis; ],  'visible','off');
    axes(h.Spectrogram_axes_contour)
    
    set([h.axes1;allchild(h.axes1);h.axes2; allchild(h.axes2)],'visible','on');
    
    h1 = [ud.SamplePush1Handle ;  ud.SignalPush1Handle];
    pos_left = 0.11;
    pos7 = get(h1(7),'Position');
    for i = 1:length(h1)
        pos = get(h1(i),'Position');
        %set(h1(i),'Position',[(pos(1)- (0.053-0.11)   0.304    pos(3:4)]);
        set(h1(i),'Position',[pos_left + (pos(1)-pos7(1))   0.304    pos(3:4)]);
    end

    set([h.SCLaxes3;h.RESPaxes3;h.EDRaxes3; h.axis3; h.axes3; h.SignalEditaxes ; h.SampleEditaxes],'Position',ud.axes3_Pos1);
    %set(h.RESPaxes3,'YAxisLocation','right'); axes(h.RESPaxes3)
    Update_axislimit('ALL'); axes(h.RESPaxes3)
    set(h.figure1,'Color',ud.blue0)

    set(h.All_Signals_View,'Value',0);
    set(h.RR_Editing_View,'Value',1);
else
    
end

% --- Executes on button press in All_Signals_View.
function All_Signals_View_Callback(hObject, eventdata, handles)
% hObject    handle to All_Signals_View (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of All_Signals_View


h = guidata(gcf);
ha1 = h.axes1;
ud = get(h.figure1,'userdata');
ud1 = get(ha1,'userdata');

val = get(h.RR_Editing_View,'Value');
if val == 1
    All_Signals_View_Fcn(val)
else
    set(h.RR_Editing_View,'Value',0);
    set(h.All_Signals_View,'Value',1);
end
Update_axislimit('ALL')

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function All_Signals_View_Fcn(val)

h = guidata(gcf);
ha1 = h.axes1;
ud = get(h.figure1,'userdata');
ud1 = get(ha1,'userdata');

if val == 1 | val == 0
    set(ud.EditingViewHandle, 'visible','off');
    axes(h.Spectrogram_axis)
%     set([ud.AllSignalViewHandle ; h.axes_SpectrumBackground1;h.axes_SpectrumBackground2;...
%             h.Spectrogram_axes ;  allchild(h.Spectrogram_axes); ...
%             [h.colorbar;allchild(h.colorbar)];...
%             h.ANSTime_HFLF_axes; allchild(h.ANSTime_HFLF_axes); h.Spectrogram_axis;  ...
%             h.Spectrogram_axes_contour ; allchild(h.Spectrogram_axes_contour); ],  'visible','on');
    set(ud.AllSignalViewHandle,  'visible','on');

    set([h.axes1 ; allchild(h.axes1) ; h.axes2 ; allchild(h.axes2)],'visible','off');
    set([h.axis3 ; h.SignalEditaxes ; h.SampleEditaxes],'Position',ud.axis3_Pos2);
    h1 = [ud.SamplePush1Handle;ud.SignalPush1Handle];
    pos_left = 0.053;
    pos7 = get(h1(7),'Position');
    for i = 1:length(h1)
        pos = get(h1(i),'Position');
        %set(h1(i),'Position',[pos(1)+(0.053-0.11)   0.871    pos(3:4)]);
        set(h1(i),'Position',[pos_left + (pos(1)-pos7(1))   0.871    pos(3:4)]);
    end
    ud.axes3_Pos1 = get(h.axes3,'Position');
    
    set(h.SCLaxes3,'Position',ud.SCL_Pos2); axes(h.SCLaxes3)
    set(h.RESPaxes3,'Position',ud.RESP_Pos2,'YAxisLocation','left'); axes(h.RESPaxes3)
    set(h.EDRaxes3,'Position',ud.EDR_Pos2);axes(h.EDRaxes3)
    set(h.axes3,'Position',ud.axes3_Pos2); axes(h.axes3);
    set(h.figure1,'Color',ud.orange_light)
    
    if get(h.Spectrum_pushbutton,'Value') == 1
        set(h.Spectrogram_axes,'Visible','on');
        set([allchild(h.Spectrogram_axes);h.axes_SpectrumBackground1;h.axes_SpectrumBackground2;],'Visible','on'); 
        
        set(h.Spectrogram_axes_contour,'Visible','off');
        set([allchild(h.Spectrogram_axes_contour);h.colorbar;allchild(h.colorbar)],'Visible','on'  );
        
        axes(h.ANSTime_axes);  set(h.ANSTime_axes,'Visible','off'); set([allchild(h.ANSTime_axes)],'Visible','on');
        set([h.ANSTime_HFLF_axes; allchild(h.ANSTime_HFLF_axes)],'Visible','off');
        Update_Spectrogram_plot
        Update_RespTimeFreqplot
    else
        set([h.Spectrogram_axes;allchild(h.Spectrogram_axes)],'Visible','off'); %,'color',[1 1 1]);
        set([h.Spectrogram_axes_contour;allchild(h.Spectrogram_axes_contour)],'Visible','off'  );
        set([h.colorbar;allchild(h.colorbar)],'visible','off')
        set(h.ANSTime_axes,'Visible','on');
        Update_ANSTimeplot
        
        
%         set(h.Spectrogram_axis,'visible','off');
%         set([h.Spectrogram_axes;allchild(h.Spectrogram_axes)],'Visible','off'); %,'color',[1 1 1]);
%         set([h.Spectrogram_axes_contour;allchild(h.Spectrogram_axes_contour)],'Visible','off'  );
%         set([h.colorbar;allchild(h.colorbar)],'visible','off')
%         axes(h.ANSTime_axes); axes(h.ANSTime_HFLF_axes)
%         set(h.ANSTime_axes,'Visible','on');
%         set([allchild(h.ANSTime_axes)],'Visible','off');
%         set([h.ANSTime_HFLF_axes; allchild(h.ANSTime_HFLF_axes)],'Visible','on');


    end





    
    
    
    set(h.RR_Editing_View,'Value',0);
    set(h.All_Signals_View,'Value',1);
end
% % --- Executes on button press in pushzoomoutb.
% function pushzoomoutb_Callback(hObject, eventdata, handles)
% % hObject    handle to pushzoomoutb (see GCBO)
% % eventdata  reserved - to be defined in a future version of MATLAB
% % handles    structure with handles and user data (see GUIDATA)
% 


% --- Executes on button press in SpectrumRefresh_togglebutton.
function RefreshSpectrum_pushbutton_Callback(hObject, eventdata, handles)
% hObject    handle to SpectrumRefresh_togglebutton (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of SpectrumRefresh_togglebutton

h = guidata(gcf);
ha1 = h.axes1;
ud = get(h.figure1,'userdata');
ud1 = get(ha1,'userdata');

if get(h.Spectrum_pushbutton,'Value') == 1
    Compute_Spectrogram
    Update_Spectrogram_plot
    Compute_RespTimeResponse
    Update_RespTimeFreqplot
%     axes(h.Spectrogram_axes); %,'color',[1 1 1]);
%     axes(h.Spectrogram_axes_contour); axis off;
%     axes(h.ANSTime_axes); axis off;
    set(h.Spectrogram_axes,'Visible','off');set(allchild(h.Spectrogram_axes),'Visible','on'); %,'color',[1 1 1]);
    set(h.Spectrogram_axes,'YTickLabelMode','auto','XTickLabelMode','auto','YTickMode','auto','XTickMode','auto','XTickLabelMode','auto','visible','on','color','none');
    set(h.Spectrogram_axes_contour,'Visible','off');set(allchild(h.Spectrogram_axes_contour),'Visible','on'  ); 
    axes(h.ANSTime_axes);  set(h.ANSTime_axes,'Visible','off'); set([allchild(h.ANSTime_axes)],'Visible','on');

else
    Compute_Spectrogram
    set([h.Spectrogram_axes;allchild(h.Spectrogram_axes)],'Visible','off'); %,'color',[1 1 1]);
    set([h.Spectrogram_axes_contour;allchild(h.Spectrogram_axes_contour)],'Visible','off'  ); 
    set(h.ANSTime_axes,'Visible','off');  
    Update_ANSTimeplot
end

% --- Executes on button press in Spectrum_pushbutton.
function Spectrum_pushbutton_Callback(hObject, eventdata, handles)
% hObject    handle to Spectrum_pushbutton (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of Spectrum_pushbutton


h = guidata(gcf);
ha1 = h.axes1;
ud = get(h.figure1,'userdata');
ud1 = get(ha1,'userdata');

if get(hObject,'Value') == 1
    set(hObject,'value',1,'Enable','off');
    set(h.Power_pushbutton,'value',0,'Enable','on');
    if ud.Compute_Spectrogram == 0
        Compute_Spectrogram
    end
    Update_Spectrogram_plot
    if ud.Compute_RespTimeResponse == 0
        Compute_RespTimeResponse
    end
    Update_RespTimeFreqplot
    %axes(h.Spectrogram_axes); %,'color',[1 1 1]);
    
    set(h.Spectrogram_axes,'Visible','on');set(allchild(h.Spectrogram_axes),'Visible','on'); %,'color',[1 1 1]);
    set(h.Spectrogram_axes,'YTickLabelMode','auto','XTickLabelMode','auto','YTickMode','auto','XTickMode','auto','XTickLabelMode','auto','visible','on','color','none');

    set(h.Spectrogram_axes_contour,'Visible','off');set(allchild(h.Spectrogram_axes_contour),'Visible','on'  ); 
    set([h.colorbar;allchild(h.colorbar)],'visible','on')
    %axes(h.ANSTime_axes); axis off;
    % 
%     axes(h.Spectrogram_axes_contour); axis off;
%     axes(h.ANSTime_axes); axis off;
    
end

%------------------------------------------------------
function Compute_Spectrogram(nS_vec)
fprintf('Compute Spectrogram \n')


h = guidata(gcf);
ha1 = h.axes1;
ud = get(h.figure1,'userdata');
ud1 = get(ha1,'userdata');

Update_IBIplot

if nargin == 0
  nS_vec = 1:ud.Nber_of_Samples;
end

mother = 'MORLET';

Method_val = get(h.SpectrogramMethod_menu,'Value');
ud.SpectrogramMethod = Method_val;
switch Method_val
    case 1
        Method = 'Fourier';
    case 2
        Method = 'AutoRegressive';
    case 3
        mother = 'DOG';
        Method = 'Wavelet'
        param = -1;
    case 4 
        mother = 'MORLET'
        Method = 'Wavelet'
        param = 10;
    case 5
        mother = 'PAUL'
        Method = 'Wavelet'
        param = -1;
end

ud.Compute_Spectrogram = 1;

Dt = 1/ud.Fs_interp;
pad = 1;

Norder = ud.detrend-1; %2;
Nfft = ud.NFFT; %1024*ud.Fs_interp/2;
Nwindow = ud.Nwindow; %512/2*ud.Fs_interp/2;
Noverlap = ud.Noverlap; %256/2*ud.Fs_interp/2;
Filter = ud.WindowFilter; % Filter = 2; %Hamming
Fs_interp = ud.Fs_interp;


for nS = nS_vec
    t1 = ud.Samplet1(nS); t2 = ud.Samplet2(nS);
    rg = find(ud.tIBI_final>=t1-15 & ud.tIBI_final<=t2+15);
    %rg = (rg(1) - round(5*ud.Fs_interp)) : max(rg) + round(5*ud.Fs_interp);
    t_finalshift = ud.tIBI_finalshift(rg);
    t_final = ud.tIBI_final(rg); % actual time (non shifted)
    IBI_final = ud.IBI_final(rg); 
    ud.Spectrogram(nS).nxt0 = rg(1); 
    
    % there maybe discontinuity within t_final (segment of noisy signal).
    % Thus the interpolation must be done on t_finalshift
    tR_interp = (t_finalshift(1):1/ud.Fs_interp:t_finalshift(end))';
    IBI_interp = interp1(t_finalshift, IBI_final,tR_interp,'spline');
    
    % We need now to find tR_interp equivalent in the original not shifted
    % time t_final. This is done by computing the interpolating values of 
    % t_final given at t_finalshift
    % To retain the discontinuity, we use the "nearest" method
    tR_final_interp = interp1(t_finalshift, t_final, tR_interp,'spline');
    %detrending
    if Norder < 3
        [P, S ] = polyfit(tR_interp, IBI_interp, Norder);
        IBI_detrend = IBI_interp - polyval(P,tR_interp);
    else
        IBI_detrend = IBI_interp - smooth(IBI_interp,ud.smoothN);
    end
    

    if strcmp(Method,'Fourier')
        FreqMethod = 'FFT'
        Ntwindow = 30*ud.Fs_interp;
        Nt = length(tR_interp);
        IBI_FFT = zeros(Nt,Nfft);
        for i = 1:Nt
            %rgw = max(1,rg(i)-floor((Ntwindow-1)/2)) : min(Nt,rg(i)+ceil((Ntwindow-1)/2));
            rgw = max(1,i-floor((Ntwindow-1)/2)) : min(Nt,i+ceil((Ntwindow-1)/2));
            IBI_FFT(i,:) = fft(IBI_detrend(rgw)/1000,Nfft)';
            %IBI_FFT(i,:) = fft(IBI_detrend/1000,Nfft)';
        end
        IBI_Fp = (1:Nfft)*Fs_interp/Nfft;
        ud.Spectrogram(nS).y = IBI_FFT; 
        ud.Spectrogram(nS).xf_pwr = IBI_Fp;
        ud.Spectrogram(nS).ypwr = abs(IBI_FFT.^2);
        ud.Spectrogram(nS).xf = IBI_Fp; %(1:N)*DtS;  
        ud.Spectrogram(nS).xt = tR_final_interp; %tR_interp;
        ud.Spectrogram(nS).mother = 'NA';
        ud.Spectrogram(nS).COI = [];
        ud.Spectrogram(nS).scale = 1;
        ud.Spectrogram(nS).method = 'STFT'; %Short-Time Fourier Transform
        ud.Spectrogram(nS).Cd = 1; %/ud.Fs_interp; %=Dt
        ud.Spectrogram(nS).Dj = ud.Fs_interp; %to compensate for Dt

        
    elseif strcmp(Method,'AutoRegressive')
        
    else % Wavelet
        Ds = -1; s0 = -1; spa = -1;  % smaller scale
        %dS = 1; S0 = 1;
        Dj = 1/8; %number of point between 2 power of 2 scale
        s0 = 2*Dt;
        Ns = -1; %number of scale
        Ns = 16/Dj;
        
%         t = tR_interp;
%         yECG = IBI_detrend;
%         yRESP = ud.RESP_final(rg);
%         save ECGRESP t yECG yRESP
%        axes(h.axes3); hold on; ud.hdetrend = plot(tR_interp-tR_interp(1)+ud.tIBI_final(rg(1)),IBI_detrend+mean(IBI_final),'-r');
        axes(h.axes3); hold on; ud.hdetrend = plot(tR_final_interp,IBI_detrend+mean(IBI_final),'-r');
        
        
        [y_wavelet,tf_wavelet,scale,COI,Cd] = wavelet(IBI_detrend,Dt,pad,Dj,s0,Ns,mother,param);
        [N,NS] = size(y_wavelet);
        Nt = length(tR_interp);
        as = repmat(scale,Nt,1);
        ud.Spectrogram(nS).y = transpose(y_wavelet)/1000; %transforming to sec and spectral density
        ypwr = abs(ud.Spectrogram(nS).y).^2;
        Nf = 2^9-1;
        xf_pwr = (0:1:Nf)/Nf*ud.HFmax*1.1;% ud.IBI_Fp; 1:0:ud.HFmax
        ypwr = interp1(1./tf_wavelet,ypwr',xf_pwr,'spline')';
        ud.Spectrogram(nS).xf_pwr = xf_pwr;
        ud.Spectrogram(nS).ypwr = ypwr;
        ud.Spectrogram(nS).xf = 1./tf_wavelet; %(1:N)*DtS;  
        ud.Spectrogram(nS).xt = tR_final_interp; %tR_interp;
        ud.Spectrogram(nS).mother = mother;
        ud.Spectrogram(nS).COI = COI;
        ud.Spectrogram(nS).scale = scale;
        ud.Spectrogram(nS).method = ['Wavelet-' mother]; 
        %calculating Cdelta
        ud.Spectrogram(nS).Cd = Cd;
        ud.Spectrogram(nS).Dj = Dj;
        fprintf('Cd = %1.3g \n',Cd)
    end
end
set(h.figure1,'userdata',ud);


%------------------------------------------------------

function Compute_RespTimeResponse
fprintf('Compute RespTimeResponse \n')


h = guidata(gcf);
ha1 = h.axes1;
ud = get(h.figure1,'userdata');

if ~isempty(ud.RESPsig) 
    ud.Compute_RespTimeResponse = 1;
    for nS = 1:ud.Nber_of_Samples
        t1 = ud.Samplet1(nS); t2 = ud.Samplet2(nS);
        rg = find(ud.tRESP_final>=t1-15 & ud.tRESP_final<=t2+15);
        %rg = (rg(1) - round(5*ud.Fs_interp)) : max(rg) + round(5*ud.Fs_interp);
        
        %t_finalshift = ud.tRESP_finalshift(rg);
        %m2 = length(t_finalshift);
        t_final = ud.tRESP_final(rg);
        m2 = length(t_final);
        RESP_final = ud.RESP_final(rg); % spacing between scales
        yh = hilbert(RESP_final);
        %method 1
        th = imag(log(yh));
        th = unwrap(th);
%         figure(2)
%         plot(t_finalshift, th);
%         %pause
%         figure(fig)
        %method 2
        %         th = atan(imag(yh)./real(yh));
        %         th = unwrap(th);
%         figure(1); plot(imag(yh)./real(yh));
%         figure(fig)
        % Smoothing data for 10s
        Tsm = 20;
        th_sm = smooth(th, Tsm*ud.Fs_interp);
        % calculating instanteneous freq = dtheta/dt and envelope
        %method 1
        f1 = 1/2/pi*(th(2:m2)-th(1:m2-1))*ud.Fs_interp; f1(m2) = f1(m2-1);
        f2 = smooth(f1,Tsm*ud.Fs_interp);
        %method 2
        dyhdt = (yh(2:m2)-yh(1:m2-1))*ud.Fs_interp; dyhdt(m2) = dyhdt(m2-1);
        f = imag(smooth(conj(yh).*dyhdt, Tsm*ud.Fs_interp)./smooth(abs(yh), Tsm*ud.Fs_interp));
        env = abs(yh);
        
        ud.RESPhil(nS).y = yh;
        ud.RESPhil(nS).Freq = f2;
        ud.RESPhil(nS).Env = env;
        ud.RESPhil(nS).t = t_final; %t_finalshift;
    end
else
     ud.Compute_RespTimeResponse = 0;
   for nS = 1:ud.Nber_of_Samples
        ud.RESPhil(nS).y = [];
        ud.RESPhil(nS).Freq = [];
        ud.RESPhil(nS).Env = [];
        ud.RESPhil(nS).t = [];
    end
end
if ~isempty(ud.EDRsig) 
     ud.Compute_RespTimeResponse = 1;
   
    for nS = 1:ud.Nber_of_Samples
        t1 = ud.Samplet1(nS); t2 = ud.Samplet2(nS);
        %rg = find(ud.tEDR_final>=t1-15 & ud.tEDR_final<=t2+15);
        rg = find(ud.tEDR_final>=t1-15 & ud.tEDR_final<=t2+15);
        %rg = (rg(1) - round(5*ud.Fs_interp)) : max(rg) + round(5*ud.Fs_interp);
        
        %t_finalshift = ud.tEDR_finalshift(rg);
        %m2 = length(t_finalshift);
        t_final = ud.tEDR_final(rg);
        m2 = length(t_final);
        EDR_final = ud.EDR_final(rg); % spacing between scales
        yh = hilbert(EDR_final);
        %method 1
        th = imag(log(yh));
        th = unwrap(th);
%         figure(2)
%         plot(t_finalshift, th);
        %pause
%         figure(fig)
%         %method 2
%         %         th = atan(imag(yh)./real(yh));
%         %         th = unwrap(th);
%         figure(1); plot(imag(yh)./real(yh));
%         figure(fig)
        % Smoothing data for 10s
        Tsm = 20;
        th_sm = smooth(th, Tsm*ud.Fs_interp);
        % calculating instanteneous freq = dtheta/dt and envelope
        %method 1
        f1 = 1/2/pi*(th(2:m2)-th(1:m2-1))*ud.Fs_interp; f1(m2) = f1(m2-1);
        f2 = smooth(f1,Tsm*ud.Fs_interp);
        %method 2
        dyhdt = (yh(2:m2)-yh(1:m2-1))*ud.Fs_interp; dyhdt(m2) = dyhdt(m2-1);
        f = imag(smooth(conj(yh).*dyhdt, Tsm*ud.Fs_interp)./smooth(abs(yh), Tsm*ud.Fs_interp));
        env = abs(yh);
        
        ud.EDRhil(nS).y = yh;
        ud.EDRhil(nS).Freq = f2;
        ud.EDRhil(nS).Env = env;
        ud.EDRhil(nS).t = t_final; %t_finalshift;
    end
    
    
else
    ud.Compute_RespTimeResponse = 0;
    for nS = 1:ud.Nber_of_Samples
        ud.EDRhil(nS).y = [];
        ud.EDRhil(nS).Freq = [];
        ud.EDRhil(nS).Env = [];
        ud.EDRhil(nS).t = [];
    end
    
end

if ~isempty(ud.ECGsig) 
     ud.Compute_RespTimeResponse = 1;
             % low pass filter at 1/30Hz - 1Hz
%           fp1 = 1/30; fp2 = 1; 
%           fp1 = 0.05; fp2 = 0.5; 
    Norder = ud.detrend-1; %2;

    for nS = 1:ud.Nber_of_Samples
        t1 = ud.Samplet1(nS); t2 = ud.Samplet2(nS);
        %rg = find(ud.tIBI_final>=t1-15 & ud.tIBI_final<=t2+15);
        
        rg = find(ud.tIBI_final>=t1-15 & ud.tIBI_final<=t2+15);
        %rg = (rg(1) - round(5*ud.Fs_interp)) : max(rg) + round(5*ud.Fs_interp);
        
        t_finalshift = ud.tIBI_finalshift(rg);
        m2 = length(t_finalshift);
        t_final = ud.tIBI_final(rg);
        IBI_final = ud.IBI_final(rg); 
        
        %interpolating 
        % Didier - 5/1/2022 - Bug?? ======= 
        % IBI_interp/IBI detrend is not used
        % Can the hilbert transform use non evenly sampled signal???
        % this needs some investigation
        % ===========================
        tR_interp = (t_finalshift(1):1/ud.Fs_interp:t_finalshift(m2))';
        IBI_interp = interp1(t_finalshift, IBI_final,tR_interp,'spline');
        %detrending
        if Norder < 3
            [P, S ] = polyfit(tR_interp, IBI_interp, Norder );
            IBI_detrend = IBI_interp - polyval(P,tR_interp);
        else
            IBI_detrend = IBI_interp - smooth(IBI_interp,ud.smoothN);
        end
        %------- Didier v4.4 ---------
%         % filter around resp freq
%         [b,a]=butter(4,2*ud.RESPfilter_freq./ud.Fs_interp);
%         % filter the signal
%         IBI_final = filter(b,a,IBI_final);
        
        % filter around resp freq
        [b,a]=butter(2,2*ud.RESPfilter_freq./ud.Fs_interp);
        % filter the signal        
        IBI_final = filtfilt(b,a,IBI_final);
        %------------ v4.4 ------------
        
        yh = hilbert(IBI_final);
        %method 1
        th = imag(log(yh));
        th = unwrap(th);
%         figure(2)
%         plot(t_finalshift, th);
        %pause
%         figure(fig)
%         %method 2
%         %         th = atan(imag(yh)./real(yh));
%         %         th = unwrap(th);
%         figure(1); plot(imag(yh)./real(yh));
%         figure(fig)
        % Smoothing data for 10s
        Tsm = 20;
        th_sm = smooth(th, Tsm*ud.Fs_interp);
        % calculating instanteneous freq = dtheta/dt and envelope
        %method 1
        f1 = 1/2/pi*(th(2:m2)-th(1:m2-1))*ud.Fs_interp; f1(m2) = f1(m2-1);
        f2 = smooth(f1,Tsm*ud.Fs_interp);
        %method 2
        dyhdt = (yh(2:m2)-yh(1:m2-1))*ud.Fs_interp; dyhdt(m2) = dyhdt(m2-1);
        f = imag(smooth(conj(yh).*dyhdt, Tsm*ud.Fs_interp)./smooth(abs(yh), Tsm*ud.Fs_interp));
        env = abs(yh);
        
        ud.IBIhil(nS).y = yh;
        ud.IBIhil(nS).Freq = f2;
        ud.IBIhil(nS).Env = env;
        ud.IBIhil(nS).t = t_final; %t_finalshift;
    end
    
    
else
    ud.Compute_RespTimeResponse = 0;
    for nS = 1:ud.Nber_of_Samples
        ud.IBIhil(nS).y = [];
        ud.IBIhil(nS).Freq = [];
        ud.IBIhil(nS).Env = [];
        ud.IBIhil(nS).t = [];
    end
    
end


set(h.figure1,'userdata',ud);

%compute maxima for RSA
if ud.Compute_RespTimeResponse == 1 & (~isempty(ud.EDRsig) | ~isempty(ud.RESPsig));
    fprintf('Computing RSA\n')
    nS = ud.Sample_Nber;
    xf_pwr = ud.Spectrogram(nS).xf_pwr;
    Df = xf_pwr(2)-xf_pwr(1); Nf = length(xf_pwr); 
    NDf = round(.05/Df); %window for looking for the maximum freq
      
    for nS = 1:ud.Nber_of_Samples
        ud.Spectrogram(nS).xfRSA = ud.Spectrogram(nS).ypwr(:,1)*NaN;
        ud.Spectrogram(nS).yRSAmax = ud.Spectrogram(nS).ypwr(:,1)*NaN;
        fprintf('\nCalculating fRSA for Sample Nber nS = %d : \n',nS); 

        t1 = ud.Samplet1(nS); t2 = ud.Samplet2(nS);
        ypwr = ud.Spectrogram(nS).ypwr;
        xt_pwr = ud.Spectrogram(nS).xt; 
        if ~isempty(ud.RESPsig)
            xf_resp = ud.RESPhil(nS).Freq;
            xt_resp = ud.RESPhil(nS).t; 
        else
            xf_resp = ud.EDRhil(nS).Freq;
            xt_resp = ud.EDRhil(nS).t;
        end
        rgt = find(xt_resp>t1 & xt_resp <t2); rgt = rgt(rgt<=length(xt_pwr));Nt = length(rgt);
        rgt2 = find(xt_pwr>t1 & xt_pwr <t2); Nt2 = length(rgt2);
%         rgt = find(xt_resp>max(t1,xt_pwr(1)) & xt_resp <min(t2,xt_pwr(end))); Nt = length(rgt);
%         rgt2 = find(xt_pwr>max(t1,xt_resp(1)) & xt_pwr <min(t2,xt_resp(end))); Nt2 = length(rgt2);
        nt = min(Nt, Nt2);
        nfRSAold = [];
        for it = rgt(1:nt)' %this assumes that indices points to the same time for xt_resp
                            % and xt_pwr. But this doesn't seem to be true
                            % when ud.Nber_of_Signal ~0 -> need to check
                            % this out
            nc = find(abs(xf_pwr-xf_resp(it)) == min( abs(xf_pwr-xf_resp(it)) ));
            rgf = max(1,nc-NDf):min(nc+NDf,Nf); Nrg = length(rgf);
            %finding extremum closest to xf_resp
            try
                dypwr1 = ypwr(it,rgf(2:Nrg-1))-ypwr(it,rgf(1:Nrg-2));
                dypwr2 = ypwr(it,rgf(2:Nrg-1))-ypwr(it,rgf(3:Nrg));
                n_ext = rgf(1) + find(dypwr1>=0 & dypwr2>=0);

                if ~isempty(nfRSAold)
                    %avoid sharp discontinuity
                    n_ext = n_ext(find( abs(ypwr(it,n_ext) - ypwr(it-1,nfRSAold))<= 0.2 ));
                end
                nfRSA1 = min( n_ext( find(abs(n_ext-nc) == min(abs(n_ext-nc)) ) ) );
                %nfRSA = rgf(1) - 1 + find( ypwr(it,rgf) == max(ypwr(it,rgf))  ) ;
                %if nfRSA == rgf(1) | nfRSA == rgf(2*NDf+1)
            catch
                nfRSA1 = [];
                fprintf('Error (it=%d)',it)
            end
            nfRSA2 = [];
            if ~isempty(nfRSAold)
                nc = nfRSAold; 
                rgf = max(1,nc-NDf):min(nc+NDf,Nf);Nrg = length(rgf);
                %finding extremum
                try
                    dypwr1 = ypwr(it,rgf(2:Nrg-1))-ypwr(it,rgf(1:Nrg-2));
                    dypwr2 = ypwr(it,rgf(2:Nrg-1))-ypwr(it,rgf(3:Nrg));
                    n_ext = rgf(1) + find(dypwr1>0 & dypwr2>0);
                    n_ext = n_ext(find( abs(ypwr(it,n_ext) - ypwr(it-1,nfRSAold))<= 0.2 & abs(xf_pwr(n_ext)-xf_pwr(nfRSAold))<= 0.025  ));
                    nfRSA2 = min( n_ext( find(abs(n_ext-nc) == min(abs(n_ext-nc)) ) ) );
                catch
                    fprintf('Error (it=%d)',it)
                end

                %nfRSA = rgf(1) - 1 + find( ypwr(it,rgf) == max(ypwr(it,rgf))  ) ;
            end
            try
                nfRSA_all = [nfRSA2; nfRSA1];
                nfRSA = max(nfRSA_all);
                if length(nfRSA_all)>1
                    if (ypwr(it,nfRSA1)/ypwr(it,nfRSA2))>5 | (ypwr(it,nfRSA1)/ypwr(it,nfRSA2))<1/5
                        nfRSA = nfRSA_all( find(ypwr(it,nfRSA_all)==max(ypwr(it,nfRSA_all))) );
                    end
                end 
            catch 
                'ok';    
            end
        
            
            if isempty(nfRSA) 
                ud.Spectrogram(nS).xfRSA(it) = NaN;
                ud.Spectrogram(nS).yRSAmax(it) = NaN;
            else
                ud.Spectrogram(nS).xfRSA(it) = xf_pwr(nfRSA);
                ud.Spectrogram(nS).yRSAmax(it) = ypwr(it,nfRSA);
            end
            if rem(it,50)==0; fprintf('%d:%2.0f ',it,xt_resp(it)); end
            nfRSAold = nfRSA;
        end
%         ud.Spectrogram(nS).xfRSA(rgt2(nt+1:Nt2)) = NaN;
%         ud.Spectrogram(nS).yRSAmax(rgt2(nt+1:Nt2)) = NaN;
    end
else
    ud.Spectrogram.xfRSA = ud.EDRhil.y; %empty struct
    ud.Spectrogram.yRSAmax = ud.EDRhil.y; %empty struct
end
    
set(h.figure1,'userdata',ud);


%------------------------------------------------------

function Update_Spectrogram_plot
fprintf('Update Spectrogram_plot \n')

h = guidata(gcf);
ha1 = h.axes1;
ud1 = get(ha1,'userdata');
ud = get(h.figure1,'userdata');
axis3 = axis(h.axes3);

axes(h.Spectrogram_axis)
set(h.Spectrogram_axis,'visible','on','color','w');

axes(h.Spectrogram_axes_contour); delete(allchild(h.Spectrogram_axes_contour))

axes(h.Spectrogram_axes); delete(allchild(h.Spectrogram_axes)); legend off
set(h.Spectrogram_axes,'YTickLabelMode','auto','XTickLabelMode','auto','YTickMode','auto','XTickMode','auto','visible','on','color','none');
if ud.SpectrogramMethod == 4
    colormap(fliplr((bone.^2)')');
else
    colormap(fliplr((bone)')');
end
nS = ud.Sample_Nber;
hold on
zmax = 0;
rgf = find(ud.Spectrogram(nS).xf_pwr>=ud.LFmin & ud.Spectrogram(nS).xf_pwr<=ud.HFmax);
Nf = length(ud.Spectrogram(nS).xf_pwr);
Nt = length(ud.Spectrogram(nS).xt);
%rgf = 1:length(ud.Spectrogram(nS).xf);

for nS = 1:ud.Nber_of_Samples

    tS1 = ud.Samplet1(nS); tS2 = ud.Samplet2(nS);
%     t{nS} = ud.Spectrogram(nS).xt - ud.tIBI_finalshift(ud.Spectrogram(nS).nxt0)...
%         + ud.tIBI_final(ud.Spectrogram(nS).nxt0);

    t{nS} = ud.Spectrogram(nS).xt;

    %     if ud.SpectrogramMethod == 1
    %         as = 1;
    %     else
    %         as = repmat(ud.Spectrogram(nS).scale,Nt,1);
    %     end
    as = 1;
    %         ySpec_pwr{nS} = abs(ud.Spectrogram(nS).y).^2./as;
    %         f{nS} = ud.Spectrogram(nS).xf;
    %         rg12 = find(t{nS}>=tS1 & t{nS}<=tS2);
    %         ud.Spectrogram(nS).zmax = max(max(ySpec_pwr{nS}(rg12,rgf)));
    %         ud.Spectrogram(nS).pwrmean = mean(ySpec_pwr{nS}(rg12,rgf),2);
    %zmax = max(zmax,max(max(ySpec_pwr{nS}))); 
    f{nS} = ud.Spectrogram(nS).xf_pwr;
    rg12 = find(t{nS}>=tS1 & t{nS}<=tS2);
    ud.Spectrogram(nS).zmax = max(max(ud.Spectrogram(nS).ypwr(rg12,rgf)));
    ud.Spectrogram(nS).pwrmean = mean(ud.Spectrogram(nS).ypwr(:,rgf),2); %accross time
end
    
if ud.Spectrogram_RelAbs == 2
    zmax = 0; 
    for ns=1:length(ud.Spectrogram); zmax = max([zmax;ud.Spectrogram(ns).zmax]); end %need to loop through because class
else
    zmax = ud.Spectrogram(ud.Sample_Nber).zmax;
end

for nS = 1:ud.Nber_of_Samples
    tS1 = ud.Samplet1(nS); tS2 = ud.Samplet2(nS);
    xt = repmat(t{nS},1,length(f{nS})); yf =  repmat(f{nS},length(t{nS}),1) ;
    Nt = length(xt); Nf = length(rgf);
    rgt = 1:min(4,round(Nt/1000)):Nt;
    rgf2 = rgf(1):round(Nf/100):rgf(Nf);
    
    surf(xt(rgt,rgf2), yf(rgt,rgf2) , ud.Spectrogram(nS).ypwr(rgt,rgf2)); shading interp; view(0,90)
    %plot contour
    axes(h.Spectrogram_axes_contour); hold on;
    contour(xt(rgt,rgf2),yf(rgt,rgf2),zmax-ud.Spectrogram(nS).ypwr(rgt,rgf2),[1:10]*zmax/10); 
    %plot sample line limits
    line([tS1 tS1], [0 1], 'LineWidth',2, 'Color',[130 220 130]/255);
    line([tS2 tS2], [0 1], 'LineWidth',2, 'Color',[130 220 130]/255);
    
    %plot cone of influence (anything below may suffer from edge effect)
    line(xt,1./ud.Spectrogram(nS).COI,'LineWidth',1.5,'Color','r','LineStyle','--')
    axis([axis3(1) axis3(2) 0 round(ud.HFmax*110)/100])
    %call axis...
    axes(h.Spectrogram_axes)
    axis([axis3(1) axis3(2) 0 round(ud.HFmax*110)/100])
end

% delete(findall(gcf,'Type','colorbar'));
% h.colorbar = colorbar(h.Spectrogram_axes); set(h.colorbar,'Position',[0.5505 0.0393 0.0100 0.2624]);
% try
%     colorbar(h.colorbar); 
% catch
%     h.colorbar = colorbar;
% end


% find nearest number for colobar axis (0.045 -> 0.05)
%caxis([0 zmax]);
caxis([0 ceil(zmax/10^(ceil(log10(zmax))-1))*10^(ceil(log10(zmax))-1)])

set(h.colorbar,'visible','on');

axes(h.Spectrogram_axes_contour);
plot([ud.tmin ud.tmax],[ud.HFmin ud.HFmin],'--r',...
    [ud.tmin ud.tmax],[ud.HFmax ud.HFmax],'--r',...
    [ud.tmin ud.tmax],[ud.LFmin ud.LFmin],'--r',...
    [ud.tmin ud.tmax],[ud.VLFmin ud.VLFmin],'--r');

set(h.figure1,'userdata',ud);

%------------------------------------------------------

function Update_RespTimeFreqplot
fprintf('Update RespTime plot \n')

h = guidata(gcf);
ha1 = h.axes1;
ud1 = get(ha1,'userdata');
ud = get(h.figure1,'userdata');

Update_RESPplot
axisR = axis(h.RESPaxes3);

axis3 = axis(h.axes3);

nS = ud.Sample_Nber;


set([h.ANSTime_HFLF_axes; allchild(h.ANSTime_HFLF_axes)],'Visible','off');
axes(h.ANSTime_axes); hall = allchild(h.ANSTime_axes); delete(hall)
legend off
hold on

zmax_RESP = 0;
zmax_EDR = 0;

for nS = 1:ud.Nber_of_Samples
    axes(h.ANSTime_axes); hold on

    tS1 = ud.Samplet1(nS); tS2 = ud.Samplet2(nS);
    % rg = find(ud.tRESP_final>=tS1 & ud.tRESP_final<=tS2);
    % rg = (rg(1) - round(5*ud.Fs_interp)) : max(rg) + round(5*ud.Fs_interp);
    % t_finalshift = ud.tRESP_finalshift(rg);
    
    % N = length(ud.Sample(nS).RESPhilbertFreq);
    % t = t_finalshift(1) + (0:N-1)'/ud.Fs_interp;
    
    if ~isempty(ud.RESPsig)
        hRESP = line(ud.RESPhil(nS).t, ud.RESPhil(nS).Freq,'color','m','LineWidth',1.5); 
        %zmax_RESP = max(zmax_RESP,max(ud.RESPhil(nS).Freq));
    end
    if ~isempty(ud.EDRsig)
        hEDR = line(ud.EDRhil(nS).t, ud.EDRhil(nS).Freq,'color','g','LineWidth',1.5); 
        %zmax_EDR = max(zmax_EDR,max(ud.EDRhil(nS).Freq));
    end
    if ~isempty(ud.ECGsig)
        hIBI = line(ud.IBIhil(nS).t, ud.IBIhil(nS).Freq,'color','b','LineWidth',1.5,'LineStyle','--'); 
        %zmax_EDR = max(zmax_EDR,max(ud.EDRhil(nS).Freq));
    end
    % plot xfRSA if it exists
    xt = ud.Spectrogram(nS).xt; 
    hRSA = line(xt,ud.Spectrogram(nS).xfRSA,'LineWidth',1.5, 'Color','b','LineStyle','-');
    
    line([tS1 tS1], [0 ud.HFmax], 'LineWidth',2, 'Color',[130 220 130]/255);
    line([tS2 tS2], [0 ud.HFmax], 'LineWidth',2, 'Color',[130 220 130]/255);
    
    if ~isempty(ud.RESPsig)
        axes(h.RESPaxes3)
        %hold on;
        %plot(ud.RESPhil(nS).t, ud.RESPhil(nS).Env,':m',ud.RESPhil(nS).t, -ud.RESPhil(nS).Env , 'm:')
        axis(axisR);
    end
    if ~isempty(ud.EDRsig)
        axes(h.EDRaxes3)
        hold on;
        plot(ud.EDRhil(nS).t, ud.EDRhil(nS).Env,':g',ud.EDRhil(nS).t, -ud.EDRhil(nS).Env , 'g:')
        t1 = ud.Samplet1(nS); t2 = ud.Samplet2(nS);
        rg = find(ud.tEDR_final>=t1-15 & ud.tEDR_final<=t2+15);
        EDR_final = ud.EDR_final(rg); % spacing between scales
        plot(ud.EDRhil(nS).t, EDR_final./ud.EDRhil(nS).Env,'k-')
        axis(axisR);
    end
    axes(h.ANSTime_axes)
    
end
%legend()


% DtS = tS2 - tS1;
% x1 = max(ud.tmin,tS1-max(DtS/10,10));
% x2 = min(ud.tmax,tS2+max(DtS/10,10));
plot([ud.tmin ud.tmax],[ud.HFmin ud.HFmin],'--r',...
    [ud.tmin ud.tmax],[ud.HFmax ud.HFmax],'--r',...
    [ud.tmin ud.tmax],[ud.LFmin ud.LFmin],'--r',...
    [ud.tmin ud.tmax],[ud.VLFmin ud.VLFmin],'--r');

axis([axis3(1) axis3(2) 0 round(ud.HFmax*110)/100 ]);
set(h.ANSTime_axes, 'visible','off')
ud.hlegend = legend([hRESP;hEDR;hIBI;hRSA],'RESP','EDR','IBI','RSA'); set(ud.hlegend,'color','w');
%ylabel('Freq (Hz)','Visible','on');
ylabel('Freq (Hz)');
set([allchild(h.ANSTime_axes)],'Visible','on');





% --- Executes on button press in Power_pushbutton.
function Power_pushbutton_Callback(hObject, eventdata, handles)
% hObject    handle to Power_pushbutton (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)


fprintf('Update RespTime plot \n')

h = guidata(gcf);
ha1 = h.axes1;
ud1 = get(ha1,'userdata');
ud = get(h.figure1,'userdata');

Update_RESPplot
axisR = axis(h.RESPaxes3);

axis3 = axis(h.axes3);




if get(hObject,'Value') == 1
    set(h.Spectrum_pushbutton,'value',0,'Enable','on');
    set(h.Power_pushbutton,'value',1,'Enable','off');
    
    Compute_Spectrogram
    set([h.Spectrogram_axes;allchild(h.Spectrogram_axes)],'Visible','off'); %,'color',[1 1 1]);
    set([h.Spectrogram_axes_contour;allchild(h.Spectrogram_axes_contour)],'Visible','off'  ); 
    set([h.colorbar;allchild(h.colorbar)],'visible','off')
    set(h.ANSTime_axes,'Visible','on'); 
    Update_ANSTimeplot
end

% --- Executes on button press in.
function Update_ANSTimeplot
fprintf('Update ANSTime plot \n')

h = guidata(gcf);
ha1 = h.axes1;
ud1 = get(ha1,'userdata');
ud = get(h.figure1,'userdata');

axis3 = axis(h.axes3);

axes(h.Spectrogram_axis)
set(h.Spectrogram_axis,'visible','on','color','w');

axes(h.ANSTime_HFLF_axes); hall = allchild(h.ANSTime_HFLF_axes); delete(hall); hold on

hall = allchild(h.ANSTime_axes); delete(hall)
try
    set([h.colorbar;allchild(h.colorbar)],'visible','off')
end
axes(h.ANSTime_axes); hold on


COR = 1;
ymax = 0;
for nS = 1:ud.Nber_of_Samples
    Nt = length(ud.Spectrogram(nS).xt);
    %     %Calculate VLF values
    %     [ud.Spectrogram(nS).VLFpwr, ud.FreqMeasure.VLFmax, ud.FreqMeasure.f_VLFmax] = ...
    %         HRV_measures(ud.IBI_Fp,ud.IBI_FFT,n_sample,ud.VLFmin,ud.VLFmax,COR);
    dim = 2;
    as = repmat(ud.Spectrogram(nS).scale,Nt,1);
    %as = 1;
    Cd = ud.Spectrogram(nS).Cd;
    Dj = ud.Spectrogram(nS).Dj;
    Dt = 1/ud.Fs_interp;
    ud.PowerSpec = Dj*Dt/Cd*abs(ud.Spectrogram(nS).y).^2./as;

    Nf = length(ud.Spectrogram(nS).xf);
    
    %Calculate LF values
    [ud.Spectrogram(nS).LFpwr, ud.Spectrogram(nS).LFmax, ud.Spectrogram(nS).f_LFmax] = ...
        HRV_measures(ud.Spectrogram(nS).xf,ud.PowerSpec,[],ud.LFmin,ud.LFmax,COR,dim);
    %ud.Spectrogram(nS).xf
    
    %Calculate HF values
    [ud.Spectrogram(nS).HFpwr, ud.Spectrogram(nS).HFmax, ud.Spectrogram(nS).f_HFmax] = ...
        HRV_measures(ud.Spectrogram(nS).xf,ud.PowerSpec,[],ud.HFmin,ud.HFmax,COR,dim);
    Totalpwr = ud.Spectrogram(nS).LFpwr + ud.Spectrogram(nS).HFpwr;
    
    Ts = 3; %3s
    LFpwr = smooth(ud.Spectrogram(nS).LFpwr./Totalpwr,Ts*ud.Fs_interp);
    HFpwr = smooth(ud.Spectrogram(nS).HFpwr./Totalpwr,Ts*ud.Fs_interp);
    hLF = plot(ud.Spectrogram(nS).xt, LFpwr, 'b'); 
    hHF = plot(ud.Spectrogram(nS).xt, HFpwr, 'r');
    
    
    axes(h.ANSTime_HFLF_axes);
    hLFHF = plot(ud.Spectrogram(nS).xt, LFpwr./HFpwr, 'k',...
        ud.Spectrogram(nS).xt,ud.Spectrogram(nS).xt==ud.Spectrogram(nS).xt,'k--');
    set([hLF; hHF ;hLFHF], 'linewidth',2);
    %ymax = max(ymax,max(max([ud.Spectrogram(nS).LFpwr/Totalpwr ; ud.Spectrogram(nS).HFpwr/Totalpwr; ud.Spectrogram(nS).LFpwr./ud.Spectrogram(nS).HFpwr);
    tS1 = ud.Samplet1(nS); tS2 = ud.Samplet2(nS);
    line([tS1 tS1], ylim, 'LineWidth',2, 'Color',[130 220 130]/255);
    line([tS2 tS2], ylim, 'LineWidth',2, 'Color',[130 220 130]/255);

    
    axes(h.ANSTime_axes); 
    
end
ylabel('LF or HF (nu)') 
ud.hlegend = legend([hLF;hHF;hLFHF],'LF (nu)','HF (nu)','LF/HF'); set(ud.hlegend,'color','w');
% Not sure what these lines are doing anymore (Didier 2022/04/01)
% hall = allchild(ud.hlegend);
% htype = cell2mat(get(hall,'type')); set(h.figure1,'userdata',ud);
% nh = find(htype(:,1)== repmat('l',length(htype),1)); set(hall(nh(2)),'color','k'); set(hall(nh(4)),'color','r');

set(h.ANSTime_axes,'color','none','visible','on','YAxisLocation','left'...
    ,'YTickMode','auto','YTickLabelMode','auto','XTickMode','auto','XTickLabelMode','auto');ylabel('LF (nu) - HF (nu)');
xlim([axis3(1) axis3(2)]);
ylim([0 1])
axes(h.ANSTime_HFLF_axes);
set([h.ANSTime_HFLF_axes; allchild(h.ANSTime_HFLF_axes)],'Visible','on');
set(h.ANSTime_HFLF_axes,'color','none','YAxisLocation','right','YTickMode','auto','YTickLabelMode','auto');ylabel('LF/HF')
xlim([axis3(1) axis3(2)]);
ylim('auto')

set(h.figure1,'userdata',ud);



% --- Executes on selection change in SpectrogramMethod_menu.
function SpectrogramMethod_menu_Callback(hObject, eventdata, handles)
% hObject    handle to SpectrogramMethod_menu (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: contents = get(hObject,'String') returns SpectrogramMethod_menu contents as cell array
%        contents{get(hObject,'Value')} returns selected item from SpectrogramMethod_menu

h = guidata(gcf);

Compute_Spectrogram
Update_Spectrogram_plot
Compute_RespTimeResponse
Update_RespTimeFreqplot
axes(h.Spectrogram_axes); %,'color',[1 1 1]);
axes(h.Spectrogram_axes_contour); axis off;
axes(h.ANSTime_axes); axis off;


% --- Executes on button press in CopyClipboard_pushbutton.
function CopyClipboard_pushbutton_Callback(hObject, eventdata, handles)
% hObject    handle to CopyClipboard_pushbutton (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)


print(gcf,'-dmeta') 




% --- Executes on selection change in Spectrogram_RalAbs_menu.
function Spectrogram_RelAbs_menu_Callback(hObject, eventdata, handles)
% hObject    handle to Spectrogram_RalAbs_menu (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: contents = get(hObject,'String') returns Spectrogram_RalAbs_menu contents as cell array
%        contents{get(hObject,'Value')} returns selected item from Spectrogram_RalAbs_menu

h = guidata(gcf);
ud = get(h.figure1,'userdata');

contents = get(hObject,'String');
ud.Spectrogram_RelAbs = get(hObject,'Value');

axes(h.Spectrogram_axes)

if ud.Spectrogram_RelAbs == 2
    zmax = max(ud.Spectrogram(:).zmax);
    %axis([axis3(1) axis3(2) 0 round(ud.HFmax*110)/100 ); 
    caxis([0 zmax]);
else
    %axis([axis3(1) axis3(2) 0 round(ud.HFmax*110)/100 0 ud.Spectrogram(ud.Sample_Nber).zmax]);
    caxis([0 ud.Spectrogram(ud.Sample_Nber).zmax]);
end
try
    colorbar(h.colorbar); 
catch
    h.colorbar = colorbar;
end
axes(h.Spectrogram_axes_contour);
axes(h.ANSTime_axes)
set(h.figure1,'userdata',ud);











% --- Executes on button press in AbnormalRpeaks_togglebutton.
function AbnormalRpeaks_togglebutton_Callback(hObject, eventdata, handles)
% hObject    handle to AbnormalRpeaks_togglebutton (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)


h = guidata(gcf);
ud = get(h.figure1,'userdata');

th_BadR = 0.2; %20% change
m = length(ud.nR);
tIBI = 1000*(ud.tR(2:m)-ud.tR(1:m-1));
Nr = length(tIBI);

% find single IBI 20% larger/smaller than the 2 nearest neighbors 
% find IBIs 40% larger than one of its nearest neighbors 
nr_bad = find( ( ( abs(tIBI(2:Nr-1)-tIBI(1:Nr-2))>th_BadR*tIBI(1:Nr-2) ) & ( abs(tIBI(3:Nr)-tIBI(2:Nr-1))>th_BadR*tIBI(3:Nr) ) ) | ...
               ( ( (tIBI(2:Nr-1)-tIBI(1:Nr-2))>th_BadR*2*tIBI(1:Nr-2) ) | ( (tIBI(2:Nr-1)-tIBI(3:Nr))>th_BadR*2*tIBI(3:Nr) ) )  ) + 1;
 
% nr_bad = find( ( ( abs(tIBI(2:Nr-2)-tIBI(1:Nr-3))>th_BadR*tIBI(1:Nr-3) ) & ( abs(tIBI(3:Nr-1)-tIBI(2:Nr-2))>th_BadR*tIBI(3:Nr-1) ) ) | ...
%     ( ( (tIBI(2:Nr-2)-tIBI(1:Nr-3))>th_BadR*2*tIBI(1:Nr-3) ) | ( (tIBI(2:Nr-2)-tIBI(3:Nr-1))>th_BadR*2*tIBI(3:Nr-1) ) )  | ...
%     ) + 1;

if ~isempty(nr_bad)
    Nr2 = length(nr_bad);
    Signalt1 = (ud.tR(nr_bad+1)+ud.tR(nr_bad) )' / 2;
    Signalt2 = (ud.tR(nr_bad+1)+ud.tR(nr_bad+2) )' / 2;
    %     iS = find(Signalt1(2:Nr2) ~= Signalt2(1:Nr2-1));
    %     Signalt1b = Signalt1([1 iS+1]);
    %     Signalt2b = Signalt2([iS Nr2]);

    Ns = length(Signalt1);
    
    
    ud.Nber_of_Signals = ud.Nber_of_Signals + Ns;
    ud.Signalt1 = [ud.Signalt1 Signalt1];
    ud.Signalt2 = [ud.Signalt2 Signalt2];
    ud.Signal_Nber = 1;
    set(h.figure1,'userdata',ud)
  

    Clean_SignalSample

    Update_SamplePatchesMeasures
end







